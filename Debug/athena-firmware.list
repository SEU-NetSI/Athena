
athena-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb2c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015bf0  0800bcbc  0800bcbc  0000ccbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080218ac  080218ac  00023460  2**0
                  CONTENTS
  4 .ARM          00000000  080218ac  080218ac  00023460  2**0
                  CONTENTS
  5 .preinit_array 00000000  080218ac  080218ac  00023460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080218ac  080218ac  000228ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080218b0  080218b0  000228b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000460  20000000  080218b4  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003120  20000460  08021d14  00023460  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003580  08021d14  00023580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00023460  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a03f  00000000  00000000  00023490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c72  00000000  00000000  0003d4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  00042148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001357  00000000  00000000  00043b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027baa  00000000  00000000  00044e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e07a  00000000  00000000  0006ca11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc593  00000000  00000000  0008aa8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016701e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fa8  00000000  00000000  00167064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  0016e00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000460 	.word	0x20000460
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bca4 	.word	0x0800bca4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000464 	.word	0x20000464
 80001cc:	0800bca4 	.word	0x0800bca4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db0b      	blt.n	8000b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 021f 	and.w	r2, r3, #31
 8000b50:	4907      	ldr	r1, [pc, #28]	@ (8000b70 <__NVIC_EnableIRQ+0x38>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	@ (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	@ (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	@ 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	@ 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000c3c:	4907      	ldr	r1, [pc, #28]	@ (8000c5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c44:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000

08000c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff ffe3 	bl	8000c30 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	f7ff ffe0 	bl	8000c30 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2105      	movs	r1, #5
 8000c74:	200e      	movs	r0, #14
 8000c76:	f004 fc36 	bl	80054e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000c7a:	200e      	movs	r0, #14
 8000c7c:	f004 fc4f 	bl	800551e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2105      	movs	r1, #5
 8000c84:	200f      	movs	r0, #15
 8000c86:	f004 fc2e 	bl	80054e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f004 fc47 	bl	800551e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000c90:	f7ff ff44 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2200      	movs	r2, #0
 8000c98:	2105      	movs	r1, #5
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff94 	bl	8000bc8 <NVIC_EncodePriority>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	2010      	movs	r0, #16
 8000ca6:	f7ff ff65 	bl	8000b74 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000caa:	2010      	movs	r0, #16
 8000cac:	f7ff ff44 	bl	8000b38 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000cb0:	f7ff ff34 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2105      	movs	r1, #5
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff84 	bl	8000bc8 <NVIC_EncodePriority>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	2011      	movs	r0, #17
 8000cc6:	f7ff ff55 	bl	8000b74 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000cca:	2011      	movs	r0, #17
 8000ccc:	f7ff ff34 	bl	8000b38 <__NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000cd0:	f7ff ff24 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2105      	movs	r1, #5
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff74 	bl	8000bc8 <NVIC_EncodePriority>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	2044      	movs	r0, #68	@ 0x44
 8000ce6:	f7ff ff45 	bl	8000b74 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8000cea:	2044      	movs	r0, #68	@ 0x44
 8000cec:	f7ff ff24 	bl	8000b38 <__NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000cf0:	f7ff ff14 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2105      	movs	r1, #5
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff64 	bl	8000bc8 <NVIC_EncodePriority>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4619      	mov	r1, r3
 8000d04:	2045      	movs	r0, #69	@ 0x45
 8000d06:	f7ff ff35 	bl	8000b74 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8000d0a:	2045      	movs	r0, #69	@ 0x45
 8000d0c:	f7ff ff14 	bl	8000b38 <__NVIC_EnableIRQ>

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	041a      	lsls	r2, r3, #16
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	400b      	ands	r3, r1
 8000d34:	431a      	orrs	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	619a      	str	r2, [r3, #24]
}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d4c:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <MX_FREERTOS_Init+0x18>)
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <MX_FREERTOS_Init+0x1c>)
 8000d52:	f006 feb5 	bl	8007ac0 <osThreadNew>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4a03      	ldr	r2, [pc, #12]	@ (8000d68 <MX_FREERTOS_Init+0x20>)
 8000d5a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	0800bd5c 	.word	0x0800bd5c
 8000d64:	08000dad 	.word	0x08000dad
 8000d68:	2000147c 	.word	0x2000147c

08000d6c <Write_Struct_to_Flash>:
uint8_t Write_Struct_to_Flash(uint32_t WriteAddr, VL53L5CX_ResultsData* pStruct)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
    return BSP_W25Qx_Write((uint8_t*)pStruct, WriteAddr, sizeof(VL53L5CX_ResultsData));
 8000d76:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	6838      	ldr	r0, [r7, #0]
 8000d7e:	f004 f993 	bl	80050a8 <BSP_W25Qx_Write>
 8000d82:	4603      	mov	r3, r0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <Read_Struct_from_Flash>:

// 从闪存读取结构体
uint8_t Read_Struct_from_Flash(uint32_t ReadAddr, VL53L5CX_ResultsData* pStruct)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
    return BSP_W25Qx_Read((uint8_t*)pStruct, ReadAddr, sizeof(VL53L5CX_ResultsData));
 8000d96:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	6838      	ldr	r0, [r7, #0]
 8000d9e:	f004 f945 	bl	800502c <BSP_W25Qx_Read>
 8000da2:	4603      	mov	r3, r0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08c      	sub	sp, #48	@ 0x30
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
//  /* Infinite loop */
	float position[3]={0,0,0};
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
	float yaw=0,  pitch=0,  roll=0;
 8000dc6:	f04f 0300 	mov.w	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ID[4];
	BSP_W25Qx_Init();
 8000dd8:	f004 f86e 	bl	8004eb8 <BSP_W25Qx_Init>
	BSP_W25Qx_Read_ID(ID);
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4618      	mov	r0, r3
 8000de2:	f004 f8f9 	bl	8004fd8 <BSP_W25Qx_Read_ID>
    I2C_expander_initialize();
 8000de6:	f001 ffe3 	bl	8002db0 <I2C_expander_initialize>
    initialize_sensors_I2C(&vl53l5dev_f,1);
 8000dea:	2101      	movs	r1, #1
 8000dec:	481b      	ldr	r0, [pc, #108]	@ (8000e5c <StartDefaultTask+0xb0>)
 8000dee:	f001 f859 	bl	8001ea4 <initialize_sensors_I2C>
    vl53l5cx_start_ranging(&vl53l5dev_f);
 8000df2:	481a      	ldr	r0, [pc, #104]	@ (8000e5c <StartDefaultTask+0xb0>)
 8000df4:	f003 f98a 	bl	800410c <vl53l5cx_start_ranging>
    while(1){
    	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_1);
 8000df8:	2102      	movs	r1, #2
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfe:	f7ff ff89 	bl	8000d14 <LL_GPIO_TogglePin>
    	get_sensor_data(&vl53l5dev_f, &vl53l5_res_f);
 8000e02:	4917      	ldr	r1, [pc, #92]	@ (8000e60 <StartDefaultTask+0xb4>)
 8000e04:	4815      	ldr	r0, [pc, #84]	@ (8000e5c <StartDefaultTask+0xb0>)
 8000e06:	f001 f8b1 	bl	8001f6c <get_sensor_data>
    	process(vl53l5_res_f.distance_mm,vl53l5_res_f.reflectance,vl53l5_res_f.target_status,position,yaw,pitch,roll);
 8000e0a:	f107 0310 	add.w	r3, r7, #16
 8000e0e:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8000e12:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8000e16:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <StartDefaultTask+0xb8>)
 8000e1c:	4912      	ldr	r1, [pc, #72]	@ (8000e68 <StartDefaultTask+0xbc>)
 8000e1e:	4813      	ldr	r0, [pc, #76]	@ (8000e6c <StartDefaultTask+0xc0>)
 8000e20:	f009 ffee 	bl	800ae00 <process>
    	//TEST TODO DELETE
    	static VL53L5CX_ResultsData vl53l5_res_test;
    	memset(&vl53l5_res_test, 0, sizeof(VL53L5CX_ResultsData));
 8000e24:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4811      	ldr	r0, [pc, #68]	@ (8000e70 <StartDefaultTask+0xc4>)
 8000e2c:	f00a f920 	bl	800b070 <memset>
    	BSP_W25Qx_Erase_Block(0x000000);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f004 f9c5 	bl	80051c0 <BSP_W25Qx_Erase_Block>
    	//
    	uint32_t writeAddress = 0x000000; // 假设写入地址为0x000000
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
        uint8_t writeStatus = Write_Struct_to_Flash(writeAddress, &vl53l5_res_f);
 8000e3a:	4909      	ldr	r1, [pc, #36]	@ (8000e60 <StartDefaultTask+0xb4>)
 8000e3c:	6a38      	ldr	r0, [r7, #32]
 8000e3e:	f7ff ff95 	bl	8000d6c <Write_Struct_to_Flash>
 8000e42:	4603      	mov	r3, r0
 8000e44:	77fb      	strb	r3, [r7, #31]
        //memset(&vl53l5_res_f, 0, sizeof(VL53L5CX_ResultsData));
        uint8_t readStatus = Read_Struct_from_Flash(writeAddress, &vl53l5_res_test);
 8000e46:	490a      	ldr	r1, [pc, #40]	@ (8000e70 <StartDefaultTask+0xc4>)
 8000e48:	6a38      	ldr	r0, [r7, #32]
 8000e4a:	f7ff ff9f 	bl	8000d8c <Read_Struct_from_Flash>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	77bb      	strb	r3, [r7, #30]
    	LL_mDelay(65);
 8000e52:	2041      	movs	r0, #65	@ 0x41
 8000e54:	f006 fd7e 	bl	8007954 <LL_mDelay>
    while(1){
 8000e58:	bf00      	nop
 8000e5a:	e7cd      	b.n	8000df8 <StartDefaultTask+0x4c>
 8000e5c:	2000047c 	.word	0x2000047c
 8000e60:	20000f2c 	.word	0x20000f2c
 8000e64:	200013b0 	.word	0x200013b0
 8000e68:	20001370 	.word	0x20001370
 8000e6c:	200012f0 	.word	0x200012f0
 8000e70:	20001480 	.word	0x20001480

08000e74 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e80:	4907      	ldr	r1, [pc, #28]	@ (8000ea0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <LL_GPIO_SetOutputPin>:
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	619a      	str	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <LL_GPIO_ResetOutputPin>:
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000ef2:	2080      	movs	r0, #128	@ 0x80
 8000ef4:	f7ff ffbe 	bl	8000e74 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f7ff ffbb 	bl	8000e74 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000efe:	2002      	movs	r0, #2
 8000f00:	f7ff ffb8 	bl	8000e74 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000f04:	2102      	movs	r1, #2
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0a:	f7ff ffd9 	bl	8000ec0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_5);
 8000f0e:	2127      	movs	r1, #39	@ 0x27
 8000f10:	481d      	ldr	r0, [pc, #116]	@ (8000f88 <MX_GPIO_Init+0xac>)
 8000f12:	f7ff ffd5 	bl	8000ec0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(W25QXX_CS_GPIO_Port, W25QXX_CS_Pin);
 8000f16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f1a:	481b      	ldr	r0, [pc, #108]	@ (8000f88 <MX_GPIO_Init+0xac>)
 8000f1c:	f7ff ffc2 	bl	8000ea4 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000f20:	2302      	movs	r3, #2
 8000f22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f24:	2301      	movs	r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	463b      	mov	r3, r7
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3c:	f005 ffd1 	bl	8006ee2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_5;
 8000f40:	2327      	movs	r3, #39	@ 0x27
 8000f42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f44:	2301      	movs	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	480b      	ldr	r0, [pc, #44]	@ (8000f88 <MX_GPIO_Init+0xac>)
 8000f5a:	f005 ffc2 	bl	8006ee2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = W25QXX_CS_Pin;
 8000f5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f64:	2301      	movs	r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(W25QXX_CS_GPIO_Port, &GPIO_InitStruct);
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	4803      	ldr	r0, [pc, #12]	@ (8000f88 <MX_GPIO_Init+0xac>)
 8000f7a:	f005 ffb2 	bl	8006ee2 <LL_GPIO_Init>

}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	48000400 	.word	0x48000400

08000f8c <__NVIC_GetPriorityGrouping>:
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_EnableIRQ>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4907      	ldr	r1, [pc, #28]	@ (8000fe0 <__NVIC_EnableIRQ+0x38>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000e100 	.word	0xe000e100

08000fe4 <__NVIC_SetPriority>:
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	@ (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	@ (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	@ 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80010b0:	4a0e      	ldr	r2, [pc, #56]	@ (80010ec <LL_DMA_SetDataTransferDirection+0x4c>)
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	4413      	add	r3, r2
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80010c4:	f023 0310 	bic.w	r3, r3, #16
 80010c8:	4908      	ldr	r1, [pc, #32]	@ (80010ec <LL_DMA_SetDataTransferDirection+0x4c>)
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	440a      	add	r2, r1
 80010ce:	7812      	ldrb	r2, [r2, #0]
 80010d0:	4611      	mov	r1, r2
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	440a      	add	r2, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80010de:	bf00      	nop
 80010e0:	371c      	adds	r7, #28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	0800bd80 	.word	0x0800bd80

080010f0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8001100:	4a0d      	ldr	r2, [pc, #52]	@ (8001138 <LL_DMA_SetMode+0x48>)
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	4413      	add	r3, r2
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 0220 	bic.w	r2, r3, #32
 8001114:	4908      	ldr	r1, [pc, #32]	@ (8001138 <LL_DMA_SetMode+0x48>)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	440b      	add	r3, r1
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	440b      	add	r3, r1
 8001122:	4619      	mov	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4313      	orrs	r3, r2
 8001128:	600b      	str	r3, [r1, #0]
             Mode);
}
 800112a:	bf00      	nop
 800112c:	371c      	adds	r7, #28
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	0800bd80 	.word	0x0800bd80

0800113c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 800114c:	4a0d      	ldr	r2, [pc, #52]	@ (8001184 <LL_DMA_SetPeriphIncMode+0x48>)
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	4413      	add	r3, r2
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001160:	4908      	ldr	r1, [pc, #32]	@ (8001184 <LL_DMA_SetPeriphIncMode+0x48>)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	440b      	add	r3, r1
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	440b      	add	r3, r1
 800116e:	4619      	mov	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001176:	bf00      	nop
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	0800bd80 	.word	0x0800bd80

08001188 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001198:	4a0d      	ldr	r2, [pc, #52]	@ (80011d0 <LL_DMA_SetMemoryIncMode+0x48>)
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	4413      	add	r3, r2
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	4413      	add	r3, r2
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80011ac:	4908      	ldr	r1, [pc, #32]	@ (80011d0 <LL_DMA_SetMemoryIncMode+0x48>)
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	440b      	add	r3, r1
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	440b      	add	r3, r1
 80011ba:	4619      	mov	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4313      	orrs	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80011c2:	bf00      	nop
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	0800bd80 	.word	0x0800bd80

080011d4 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80011e4:	4a0d      	ldr	r2, [pc, #52]	@ (800121c <LL_DMA_SetPeriphSize+0x48>)
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	4413      	add	r3, r2
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80011f8:	4908      	ldr	r1, [pc, #32]	@ (800121c <LL_DMA_SetPeriphSize+0x48>)
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	440b      	add	r3, r1
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	440b      	add	r3, r1
 8001206:	4619      	mov	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800120e:	bf00      	nop
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	0800bd80 	.word	0x0800bd80

08001220 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8001230:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <LL_DMA_SetMemorySize+0x48>)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	4413      	add	r3, r2
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001244:	4908      	ldr	r1, [pc, #32]	@ (8001268 <LL_DMA_SetMemorySize+0x48>)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	440b      	add	r3, r1
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	440b      	add	r3, r1
 8001252:	4619      	mov	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800125a:	bf00      	nop
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	0800bd80 	.word	0x0800bd80

0800126c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800127c:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	4413      	add	r3, r2
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001290:	4908      	ldr	r1, [pc, #32]	@ (80012b4 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	440b      	add	r3, r1
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	440b      	add	r3, r1
 800129e:	4619      	mov	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
             Priority);
}
 80012a6:	bf00      	nop
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	0800bd80 	.word	0x0800bd80

080012b8 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	@ 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	33a8      	adds	r3, #168	@ 0xa8
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	210f      	movs	r1, #15
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	401a      	ands	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	210f      	movs	r1, #15
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 80012f6:	2320      	movs	r3, #32
 80012f8:	e003      	b.n	8001302 <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fab3 f383 	clz	r3, r3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	4619      	mov	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	408b      	lsls	r3, r1
 8001308:	68f9      	ldr	r1, [r7, #12]
 800130a:	31a8      	adds	r1, #168	@ 0xa8
 800130c:	4313      	orrs	r3, r2
 800130e:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 8001310:	bf00      	nop
 8001312:	3724      	adds	r7, #36	@ 0x24
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	601a      	str	r2, [r3, #0]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_I2C_EnableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_EnableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableGeneralCall(I2C_TypeDef *I2Cx)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	601a      	str	r2, [r3, #0]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001370:	f023 0306 	bic.w	r3, r3, #6
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	430a      	orrs	r2, r1
 800137a:	431a      	orrs	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	60da      	str	r2, [r3, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	60da      	str	r2, [r3, #12]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	605a      	str	r2, [r3, #4]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	0e1a      	lsrs	r2, r3, #24
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <LL_RCC_SetI2CClockSource+0x4c>)
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	0c1b      	lsrs	r3, r3, #16
 80013e6:	f003 031f 	and.w	r3, r3, #31
 80013ea:	2103      	movs	r1, #3
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	401a      	ands	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	b2d9      	uxtb	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	0c1b      	lsrs	r3, r3, #16
 80013fc:	f003 031f 	and.w	r3, r3, #31
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	431a      	orrs	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	601a      	str	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40021088 	.word	0x40021088

0800141c <LL_AHB2_GRP1_EnableClock>:
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001424:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001428:	4907      	ldr	r1, [pc, #28]	@ (8001448 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4313      	orrs	r3, r2
 800142e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001432:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4013      	ands	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000

0800144c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001454:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001456:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001458:	4907      	ldr	r1, [pc, #28]	@ (8001478 <LL_APB1_GRP1_EnableClock+0x2c>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4313      	orrs	r3, r2
 800145e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001460:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001462:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4013      	ands	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40021000 	.word	0x40021000

0800147c <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08e      	sub	sp, #56	@ 0x38
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	615a      	str	r2, [r3, #20]
 8001494:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 80014a6:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 80014aa:	f7ff ff8f 	bl	80013cc <LL_RCC_SetI2CClockSource>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80014ae:	2002      	movs	r0, #2
 80014b0:	f7ff ffb4 	bl	800141c <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80014b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014ba:	2302      	movs	r3, #2
 80014bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80014c2:	2301      	movs	r3, #1
 80014c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80014ca:	2304      	movs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4851      	ldr	r0, [pc, #324]	@ (8001618 <MX_I2C1_Init+0x19c>)
 80014d4:	f005 fd05 	bl	8006ee2 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80014d8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80014dc:	f7ff ffb6 	bl	800144c <LL_APB1_GRP1_EnableClock>

  /* I2C1 DMA Init */

  /* I2C1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_7, LL_DMA_REQUEST_3);
 80014e0:	2203      	movs	r2, #3
 80014e2:	2106      	movs	r1, #6
 80014e4:	484d      	ldr	r0, [pc, #308]	@ (800161c <MX_I2C1_Init+0x1a0>)
 80014e6:	f7ff fee7 	bl	80012b8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2106      	movs	r1, #6
 80014ee:	484b      	ldr	r0, [pc, #300]	@ (800161c <MX_I2C1_Init+0x1a0>)
 80014f0:	f7ff fdd6 	bl	80010a0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80014f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014f8:	2106      	movs	r1, #6
 80014fa:	4848      	ldr	r0, [pc, #288]	@ (800161c <MX_I2C1_Init+0x1a0>)
 80014fc:	f7ff feb6 	bl	800126c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001500:	2200      	movs	r2, #0
 8001502:	2106      	movs	r1, #6
 8001504:	4845      	ldr	r0, [pc, #276]	@ (800161c <MX_I2C1_Init+0x1a0>)
 8001506:	f7ff fdf3 	bl	80010f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 800150a:	2200      	movs	r2, #0
 800150c:	2106      	movs	r1, #6
 800150e:	4843      	ldr	r0, [pc, #268]	@ (800161c <MX_I2C1_Init+0x1a0>)
 8001510:	f7ff fe14 	bl	800113c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001514:	2280      	movs	r2, #128	@ 0x80
 8001516:	2106      	movs	r1, #6
 8001518:	4840      	ldr	r0, [pc, #256]	@ (800161c <MX_I2C1_Init+0x1a0>)
 800151a:	f7ff fe35 	bl	8001188 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800151e:	2200      	movs	r2, #0
 8001520:	2106      	movs	r1, #6
 8001522:	483e      	ldr	r0, [pc, #248]	@ (800161c <MX_I2C1_Init+0x1a0>)
 8001524:	f7ff fe56 	bl	80011d4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001528:	2200      	movs	r2, #0
 800152a:	2106      	movs	r1, #6
 800152c:	483b      	ldr	r0, [pc, #236]	@ (800161c <MX_I2C1_Init+0x1a0>)
 800152e:	f7ff fe77 	bl	8001220 <LL_DMA_SetMemorySize>

  /* I2C1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_3);
 8001532:	2203      	movs	r2, #3
 8001534:	2105      	movs	r1, #5
 8001536:	4839      	ldr	r0, [pc, #228]	@ (800161c <MX_I2C1_Init+0x1a0>)
 8001538:	f7ff febe 	bl	80012b8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800153c:	2210      	movs	r2, #16
 800153e:	2105      	movs	r1, #5
 8001540:	4836      	ldr	r0, [pc, #216]	@ (800161c <MX_I2C1_Init+0x1a0>)
 8001542:	f7ff fdad 	bl	80010a0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8001546:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800154a:	2105      	movs	r1, #5
 800154c:	4833      	ldr	r0, [pc, #204]	@ (800161c <MX_I2C1_Init+0x1a0>)
 800154e:	f7ff fe8d 	bl	800126c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001552:	2200      	movs	r2, #0
 8001554:	2105      	movs	r1, #5
 8001556:	4831      	ldr	r0, [pc, #196]	@ (800161c <MX_I2C1_Init+0x1a0>)
 8001558:	f7ff fdca 	bl	80010f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 800155c:	2200      	movs	r2, #0
 800155e:	2105      	movs	r1, #5
 8001560:	482e      	ldr	r0, [pc, #184]	@ (800161c <MX_I2C1_Init+0x1a0>)
 8001562:	f7ff fdeb 	bl	800113c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001566:	2280      	movs	r2, #128	@ 0x80
 8001568:	2105      	movs	r1, #5
 800156a:	482c      	ldr	r0, [pc, #176]	@ (800161c <MX_I2C1_Init+0x1a0>)
 800156c:	f7ff fe0c 	bl	8001188 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001570:	2200      	movs	r2, #0
 8001572:	2105      	movs	r1, #5
 8001574:	4829      	ldr	r0, [pc, #164]	@ (800161c <MX_I2C1_Init+0x1a0>)
 8001576:	f7ff fe2d 	bl	80011d4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800157a:	2200      	movs	r2, #0
 800157c:	2105      	movs	r1, #5
 800157e:	4827      	ldr	r0, [pc, #156]	@ (800161c <MX_I2C1_Init+0x1a0>)
 8001580:	f7ff fe4e 	bl	8001220 <LL_DMA_SetMemorySize>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001584:	f7ff fd02 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 8001588:	4603      	mov	r3, r0
 800158a:	2200      	movs	r2, #0
 800158c:	2105      	movs	r1, #5
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fd52 	bl	8001038 <NVIC_EncodePriority>
 8001594:	4603      	mov	r3, r0
 8001596:	4619      	mov	r1, r3
 8001598:	201f      	movs	r0, #31
 800159a:	f7ff fd23 	bl	8000fe4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800159e:	201f      	movs	r0, #31
 80015a0:	f7ff fd02 	bl	8000fa8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80015a4:	f7ff fcf2 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2200      	movs	r2, #0
 80015ac:	2105      	movs	r1, #5
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fd42 	bl	8001038 <NVIC_EncodePriority>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4619      	mov	r1, r3
 80015b8:	2020      	movs	r0, #32
 80015ba:	f7ff fd13 	bl	8000fe4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015be:	2020      	movs	r0, #32
 80015c0:	f7ff fcf2 	bl	8000fa8 <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80015c4:	4816      	ldr	r0, [pc, #88]	@ (8001620 <MX_I2C1_Init+0x1a4>)
 80015c6:	f7ff fef1 	bl	80013ac <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80015ca:	4815      	ldr	r0, [pc, #84]	@ (8001620 <MX_I2C1_Init+0x1a4>)
 80015cc:	f7ff fede 	bl	800138c <LL_I2C_DisableOwnAddress2>
  LL_I2C_EnableGeneralCall(I2C1);
 80015d0:	4813      	ldr	r0, [pc, #76]	@ (8001620 <MX_I2C1_Init+0x1a4>)
 80015d2:	f7ff feb3 	bl	800133c <LL_I2C_EnableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80015d6:	4812      	ldr	r0, [pc, #72]	@ (8001620 <MX_I2C1_Init+0x1a4>)
 80015d8:	f7ff fea0 	bl	800131c <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00702991;
 80015e0:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <MX_I2C1_Init+0x1a8>)
 80015e2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	4808      	ldr	r0, [pc, #32]	@ (8001620 <MX_I2C1_Init+0x1a4>)
 8001600:	f005 fd80 	bl	8007104 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_I2C1_Init+0x1a4>)
 800160a:	f7ff fea7 	bl	800135c <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	3738      	adds	r7, #56	@ 0x38
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	48000400 	.word	0x48000400
 800161c:	40020000 	.word	0x40020000
 8001620:	40005400 	.word	0x40005400
 8001624:	00702991 	.word	0x00702991

08001628 <LL_RCC_HSE_Enable>:
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <LL_RCC_HSE_Enable+0x1c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <LL_RCC_HSE_Enable+0x1c>)
 8001632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000

08001648 <LL_RCC_HSE_IsReady>:
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 800164c:	4b07      	ldr	r3, [pc, #28]	@ (800166c <LL_RCC_HSE_IsReady+0x24>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001658:	d101      	bne.n	800165e <LL_RCC_HSE_IsReady+0x16>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <LL_RCC_HSE_IsReady+0x18>
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <LL_RCC_SetSysClkSource>:
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001678:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <LL_RCC_SetSysClkSource+0x24>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f023 0203 	bic.w	r2, r3, #3
 8001680:	4904      	ldr	r1, [pc, #16]	@ (8001694 <LL_RCC_SetSysClkSource+0x24>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4313      	orrs	r3, r2
 8001686:	608b      	str	r3, [r1, #8]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40021000 	.word	0x40021000

08001698 <LL_RCC_GetSysClkSource>:
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <LL_RCC_GetSysClkSource+0x18>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 030c 	and.w	r3, r3, #12
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000

080016b4 <LL_RCC_SetAHBPrescaler>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <LL_RCC_SetAHBPrescaler+0x24>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c4:	4904      	ldr	r1, [pc, #16]	@ (80016d8 <LL_RCC_SetAHBPrescaler+0x24>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000

080016dc <LL_RCC_SetAPB1Prescaler>:
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <LL_RCC_SetAPB1Prescaler+0x24>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016ec:	4904      	ldr	r1, [pc, #16]	@ (8001700 <LL_RCC_SetAPB1Prescaler+0x24>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000

08001704 <LL_RCC_SetAPB2Prescaler>:
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <LL_RCC_SetAPB2Prescaler+0x24>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001714:	4904      	ldr	r1, [pc, #16]	@ (8001728 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000

0800172c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001730:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <LL_RCC_PLL_Enable+0x1c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <LL_RCC_PLL_Enable+0x1c>)
 8001736:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000

0800174c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <LL_RCC_PLL_IsReady+0x24>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001758:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800175c:	d101      	bne.n	8001762 <LL_RCC_PLL_IsReady+0x16>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <LL_RCC_PLL_IsReady+0x18>
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000

08001774 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001788:	4013      	ands	r3, r2
 800178a:	68f9      	ldr	r1, [r7, #12]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	4311      	orrs	r1, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	0212      	lsls	r2, r2, #8
 8001794:	4311      	orrs	r1, r2
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	4904      	ldr	r1, [pc, #16]	@ (80017ac <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800179c:	4313      	orrs	r3, r2
 800179e:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	f9ff808c 	.word	0xf9ff808c

080017b4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4a04      	ldr	r2, [pc, #16]	@ (80017d0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80017be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000

080017d4 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <LL_FLASH_SetLatency+0x24>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 0207 	bic.w	r2, r3, #7
 80017e4:	4904      	ldr	r1, [pc, #16]	@ (80017f8 <LL_FLASH_SetLatency+0x24>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40022000 	.word	0x40022000

080017fc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001800:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <LL_FLASH_GetLatency+0x18>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40022000 	.word	0x40022000

08001818 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8001828:	4904      	ldr	r1, [pc, #16]	@ (800183c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40007000 	.word	0x40007000

08001840 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8001844:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800184c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001850:	d101      	bne.n	8001856 <LL_PWR_IsActiveFlag_VOS+0x16>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <LL_PWR_IsActiveFlag_VOS+0x18>
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40007000 	.word	0x40007000

08001868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186c:	f003 fcec 	bl	8005248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001870:	f000 f818 	bl	80018a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001874:	f7ff fb32 	bl	8000edc <MX_GPIO_Init>
  MX_DMA_Init();
 8001878:	f7ff f9f2 	bl	8000c60 <MX_DMA_Init>
  MX_I2C1_Init();
 800187c:	f7ff fdfe 	bl	800147c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001880:	f000 fdee 	bl	8002460 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001884:	f000 f862 	bl	800194c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001888:	f000 f89e 	bl	80019c8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800188c:	f000 fe9e 	bl	80025cc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001890:	f000 ff00 	bl	8002694 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001894:	f006 f8ca 	bl	8007a2c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001898:	f7ff fa56 	bl	8000d48 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800189c:	f006 f8ea 	bl	8007a74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <main+0x38>

080018a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 80018a8:	2004      	movs	r0, #4
 80018aa:	f7ff ff93 	bl	80017d4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 80018ae:	bf00      	nop
 80018b0:	f7ff ffa4 	bl	80017fc <LL_FLASH_GetLatency>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d1fa      	bne.n	80018b0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80018ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80018be:	f7ff ffab 	bl	8001818 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffbc 	bl	8001840 <LL_PWR_IsActiveFlag_VOS>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1fa      	bne.n	80018c4 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSE_Enable();
 80018ce:	f7ff feab 	bl	8001628 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80018d2:	bf00      	nop
 80018d4:	f7ff feb8 	bl	8001648 <LL_RCC_HSE_IsReady>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d1fa      	bne.n	80018d4 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 20, LL_RCC_PLLR_DIV_2);
 80018de:	2300      	movs	r3, #0
 80018e0:	2214      	movs	r2, #20
 80018e2:	2100      	movs	r1, #0
 80018e4:	2003      	movs	r0, #3
 80018e6:	f7ff ff45 	bl	8001774 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80018ea:	f7ff ff63 	bl	80017b4 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80018ee:	f7ff ff1d 	bl	800172c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80018f2:	bf00      	nop
 80018f4:	f7ff ff2a 	bl	800174c <LL_RCC_PLL_IsReady>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d1fa      	bne.n	80018f4 <SystemClock_Config+0x50>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80018fe:	2003      	movs	r0, #3
 8001900:	f7ff feb6 	bl	8001670 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001904:	bf00      	nop
 8001906:	f7ff fec7 	bl	8001698 <LL_RCC_GetSysClkSource>
 800190a:	4603      	mov	r3, r0
 800190c:	2b0c      	cmp	r3, #12
 800190e:	d1fa      	bne.n	8001906 <SystemClock_Config+0x62>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff fecf 	bl	80016b4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001916:	2000      	movs	r0, #0
 8001918:	f7ff fee0 	bl	80016dc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff fef1 	bl	8001704 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 8001922:	4806      	ldr	r0, [pc, #24]	@ (800193c <SystemClock_Config+0x98>)
 8001924:	f006 f83e 	bl	80079a4 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001928:	200f      	movs	r0, #15
 800192a:	f003 fca5 	bl	8005278 <HAL_InitTick>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001934:	f000 f804 	bl	8001940 <Error_Handler>
  }
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	04c4b400 	.word	0x04c4b400

08001940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001944:	b672      	cpsid	i
}
 8001946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <Error_Handler+0x8>

0800194c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001950:	4b1b      	ldr	r3, [pc, #108]	@ (80019c0 <MX_SPI1_Init+0x74>)
 8001952:	4a1c      	ldr	r2, [pc, #112]	@ (80019c4 <MX_SPI1_Init+0x78>)
 8001954:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001956:	4b1a      	ldr	r3, [pc, #104]	@ (80019c0 <MX_SPI1_Init+0x74>)
 8001958:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800195c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800195e:	4b18      	ldr	r3, [pc, #96]	@ (80019c0 <MX_SPI1_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001964:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <MX_SPI1_Init+0x74>)
 8001966:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800196a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800196c:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <MX_SPI1_Init+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001972:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <MX_SPI1_Init+0x74>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <MX_SPI1_Init+0x74>)
 800197a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800197e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <MX_SPI1_Init+0x74>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <MX_SPI1_Init+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800198c:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <MX_SPI1_Init+0x74>)
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001992:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <MX_SPI1_Init+0x74>)
 8001994:	2200      	movs	r2, #0
 8001996:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001998:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <MX_SPI1_Init+0x74>)
 800199a:	2207      	movs	r2, #7
 800199c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800199e:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <MX_SPI1_Init+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <MX_SPI1_Init+0x74>)
 80019a6:	2208      	movs	r2, #8
 80019a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019aa:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <MX_SPI1_Init+0x74>)
 80019ac:	f004 f90c 	bl	8005bc8 <HAL_SPI_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019b6:	f7ff ffc3 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200019d0 	.word	0x200019d0
 80019c4:	40013000 	.word	0x40013000

080019c8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <MX_SPI2_Init+0x74>)
 80019ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001a40 <MX_SPI2_Init+0x78>)
 80019d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <MX_SPI2_Init+0x74>)
 80019d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019da:	4b18      	ldr	r3, [pc, #96]	@ (8001a3c <MX_SPI2_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e0:	4b16      	ldr	r3, [pc, #88]	@ (8001a3c <MX_SPI2_Init+0x74>)
 80019e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80019e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019e8:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <MX_SPI2_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ee:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <MX_SPI2_Init+0x74>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <MX_SPI2_Init+0x74>)
 80019f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <MX_SPI2_Init+0x74>)
 80019fe:	2210      	movs	r2, #16
 8001a00:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <MX_SPI2_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <MX_SPI2_Init+0x74>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <MX_SPI2_Init+0x74>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a14:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MX_SPI2_Init+0x74>)
 8001a16:	2207      	movs	r2, #7
 8001a18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <MX_SPI2_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <MX_SPI2_Init+0x74>)
 8001a22:	2208      	movs	r2, #8
 8001a24:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a26:	4805      	ldr	r0, [pc, #20]	@ (8001a3c <MX_SPI2_Init+0x74>)
 8001a28:	f004 f8ce 	bl	8005bc8 <HAL_SPI_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a32:	f7ff ff85 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20001a34 	.word	0x20001a34
 8001a40:	40003800 	.word	0x40003800

08001a44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	@ 0x30
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a5c      	ldr	r2, [pc, #368]	@ (8001bd4 <HAL_SPI_MspInit+0x190>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d129      	bne.n	8001aba <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a66:	4b5c      	ldr	r3, [pc, #368]	@ (8001bd8 <HAL_SPI_MspInit+0x194>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6a:	4a5b      	ldr	r2, [pc, #364]	@ (8001bd8 <HAL_SPI_MspInit+0x194>)
 8001a6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a70:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a72:	4b59      	ldr	r3, [pc, #356]	@ (8001bd8 <HAL_SPI_MspInit+0x194>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b56      	ldr	r3, [pc, #344]	@ (8001bd8 <HAL_SPI_MspInit+0x194>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	4a55      	ldr	r2, [pc, #340]	@ (8001bd8 <HAL_SPI_MspInit+0x194>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8a:	4b53      	ldr	r3, [pc, #332]	@ (8001bd8 <HAL_SPI_MspInit+0x194>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a96:	23e0      	movs	r3, #224	@ 0xe0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ab4:	f003 fef6 	bl	80058a4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ab8:	e088      	b.n	8001bcc <HAL_SPI_MspInit+0x188>
  else if(spiHandle->Instance==SPI2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a47      	ldr	r2, [pc, #284]	@ (8001bdc <HAL_SPI_MspInit+0x198>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	f040 8083 	bne.w	8001bcc <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ac6:	4b44      	ldr	r3, [pc, #272]	@ (8001bd8 <HAL_SPI_MspInit+0x194>)
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aca:	4a43      	ldr	r2, [pc, #268]	@ (8001bd8 <HAL_SPI_MspInit+0x194>)
 8001acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ad2:	4b41      	ldr	r3, [pc, #260]	@ (8001bd8 <HAL_SPI_MspInit+0x194>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd8 <HAL_SPI_MspInit+0x194>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae2:	4a3d      	ldr	r2, [pc, #244]	@ (8001bd8 <HAL_SPI_MspInit+0x194>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aea:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <HAL_SPI_MspInit+0x194>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001af6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b08:	2305      	movs	r3, #5
 8001b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	4619      	mov	r1, r3
 8001b12:	4833      	ldr	r0, [pc, #204]	@ (8001be0 <HAL_SPI_MspInit+0x19c>)
 8001b14:	f003 fec6 	bl	80058a4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001b18:	4b32      	ldr	r3, [pc, #200]	@ (8001be4 <HAL_SPI_MspInit+0x1a0>)
 8001b1a:	4a33      	ldr	r2, [pc, #204]	@ (8001be8 <HAL_SPI_MspInit+0x1a4>)
 8001b1c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8001b1e:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <HAL_SPI_MspInit+0x1a0>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b24:	4b2f      	ldr	r3, [pc, #188]	@ (8001be4 <HAL_SPI_MspInit+0x1a0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <HAL_SPI_MspInit+0x1a0>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b30:	4b2c      	ldr	r3, [pc, #176]	@ (8001be4 <HAL_SPI_MspInit+0x1a0>)
 8001b32:	2280      	movs	r2, #128	@ 0x80
 8001b34:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b36:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <HAL_SPI_MspInit+0x1a0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b3c:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <HAL_SPI_MspInit+0x1a0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001b42:	4b28      	ldr	r3, [pc, #160]	@ (8001be4 <HAL_SPI_MspInit+0x1a0>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b48:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <HAL_SPI_MspInit+0x1a0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001b4e:	4825      	ldr	r0, [pc, #148]	@ (8001be4 <HAL_SPI_MspInit+0x1a0>)
 8001b50:	f003 fd00 	bl	8005554 <HAL_DMA_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_SPI_MspInit+0x11a>
      Error_Handler();
 8001b5a:	f7ff fef1 	bl	8001940 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a20      	ldr	r2, [pc, #128]	@ (8001be4 <HAL_SPI_MspInit+0x1a0>)
 8001b62:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b64:	4a1f      	ldr	r2, [pc, #124]	@ (8001be4 <HAL_SPI_MspInit+0x1a0>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001b6a:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <HAL_SPI_MspInit+0x1a8>)
 8001b6c:	4a20      	ldr	r2, [pc, #128]	@ (8001bf0 <HAL_SPI_MspInit+0x1ac>)
 8001b6e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001b70:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <HAL_SPI_MspInit+0x1a8>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <HAL_SPI_MspInit+0x1a8>)
 8001b78:	2210      	movs	r2, #16
 8001b7a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <HAL_SPI_MspInit+0x1a8>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b82:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <HAL_SPI_MspInit+0x1a8>)
 8001b84:	2280      	movs	r2, #128	@ 0x80
 8001b86:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b88:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <HAL_SPI_MspInit+0x1a8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <HAL_SPI_MspInit+0x1a8>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <HAL_SPI_MspInit+0x1a8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b9a:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <HAL_SPI_MspInit+0x1a8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001ba0:	4812      	ldr	r0, [pc, #72]	@ (8001bec <HAL_SPI_MspInit+0x1a8>)
 8001ba2:	f003 fcd7 	bl	8005554 <HAL_DMA_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_SPI_MspInit+0x16c>
      Error_Handler();
 8001bac:	f7ff fec8 	bl	8001940 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8001bec <HAL_SPI_MspInit+0x1a8>)
 8001bb4:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8001bec <HAL_SPI_MspInit+0x1a8>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2105      	movs	r1, #5
 8001bc0:	2024      	movs	r0, #36	@ 0x24
 8001bc2:	f003 fc90 	bl	80054e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001bc6:	2024      	movs	r0, #36	@ 0x24
 8001bc8:	f003 fca9 	bl	800551e <HAL_NVIC_EnableIRQ>
}
 8001bcc:	bf00      	nop
 8001bce:	3730      	adds	r7, #48	@ 0x30
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40013000 	.word	0x40013000
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40003800 	.word	0x40003800
 8001be0:	48000400 	.word	0x48000400
 8001be4:	20001a98 	.word	0x20001a98
 8001be8:	40020044 	.word	0x40020044
 8001bec:	20001ae0 	.word	0x20001ae0
 8001bf0:	40020058 	.word	0x40020058

08001bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <HAL_MspInit+0x4c>)
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfe:	4a10      	ldr	r2, [pc, #64]	@ (8001c40 <HAL_MspInit+0x4c>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <HAL_MspInit+0x4c>)
 8001c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_MspInit+0x4c>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c16:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <HAL_MspInit+0x4c>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c1e:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <HAL_MspInit+0x4c>)
 8001c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	210f      	movs	r1, #15
 8001c2e:	f06f 0001 	mvn.w	r0, #1
 8001c32:	f003 fc58 	bl	80054e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <NMI_Handler+0x4>

08001c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7e:	f003 fb37 	bl	80052f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c82:	f007 fbd7 	bl	8009434 <xTaskGetSchedulerState>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d001      	beq.n	8001c90 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c8c:	f008 f9cc 	bl	800a028 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001c98:	4802      	ldr	r0, [pc, #8]	@ (8001ca4 <DMA1_Channel4_IRQHandler+0x10>)
 8001c9a:	f003 fd54 	bl	8005746 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20001a98 	.word	0x20001a98

08001ca8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001cac:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <DMA1_Channel5_IRQHandler+0x10>)
 8001cae:	f003 fd4a 	bl	8005746 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20001ae0 	.word	0x20001ae0

08001cbc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_ER_IRQn 0 */

  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <SPI2_IRQHandler+0x10>)
 8001cfa:	f004 fcd7 	bl	80066ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20001a34 	.word	0x20001a34

08001d08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d58:	4a14      	ldr	r2, [pc, #80]	@ (8001dac <_sbrk+0x5c>)
 8001d5a:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <_sbrk+0x60>)
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d64:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d102      	bne.n	8001d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <_sbrk+0x64>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	@ (8001db8 <_sbrk+0x68>)
 8001d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d72:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d207      	bcs.n	8001d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d80:	f009 f98e 	bl	800b0a0 <__errno>
 8001d84:	4603      	mov	r3, r0
 8001d86:	220c      	movs	r2, #12
 8001d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	e009      	b.n	8001da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d96:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	4a05      	ldr	r2, [pc, #20]	@ (8001db4 <_sbrk+0x64>)
 8001da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001da2:	68fb      	ldr	r3, [r7, #12]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20010000 	.word	0x20010000
 8001db0:	00000400 	.word	0x00000400
 8001db4:	20001b28 	.word	0x20001b28
 8001db8:	20003580 	.word	0x20003580

08001dbc <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8001dc0:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <SystemInit+0x20>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc6:	4a05      	ldr	r2, [pc, #20]	@ (8001ddc <SystemInit+0x20>)
 8001dc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <config_sensors>:
#define VL53L5CX_FORWARD_I2C_ADDRESS            ((uint16_t)(VL53L5CX_DEFAULT_I2C_ADDRESS*4))
#define VL53L5CX_BACKWARD_I2C_ADDRESS            ((uint16_t)(VL53L5CX_FORWARD_I2C_ADDRESS+2))


bool config_sensors(VL53L5CX_Configuration *p_dev, uint16_t new_i2c_address)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
  p_dev->platform.address = VL53L5CX_DEFAULT_I2C_ADDRESS; // use default adress for first use
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2252      	movs	r2, #82	@ 0x52
 8001df0:	801a      	strh	r2, [r3, #0]

  // initialize the sensor
  uint8_t tof_res = vl53l5cx_init(p_dev);   if (tof_res != VL53L5CX_STATUS_OK) return false ;
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f001 fce8 	bl	80037c8 <vl53l5cx_init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <config_sensors+0x26>
 8001e02:	2300      	movs	r3, #0
 8001e04:	e04a      	b.n	8001e9c <config_sensors+0xbc>
  //DEBUG_PRINT("ToF Config Result: %d \n", tof_init_res);

  // Configurations
  //change i2c address
  tof_res = vl53l5cx_set_i2c_address(p_dev, new_i2c_address);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f002 f948 	bl	80040a0 <vl53l5cx_set_i2c_address>
 8001e10:	4603      	mov	r3, r0
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <config_sensors+0x3e>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e03e      	b.n	8001e9c <config_sensors+0xbc>
  tof_res = vl53l5cx_set_resolution(p_dev, VL53L5CX_RESOLUTION_8X8);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 8001e1e:	2140      	movs	r1, #64	@ 0x40
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f002 fd7c 	bl	800491e <vl53l5cx_set_resolution>
 8001e26:	4603      	mov	r3, r0
 8001e28:	73fb      	strb	r3, [r7, #15]
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <config_sensors+0x54>
 8001e30:	2300      	movs	r3, #0
 8001e32:	e033      	b.n	8001e9c <config_sensors+0xbc>
  // 1Hz
  tof_res = vl53l5cx_set_ranging_frequency_hz(p_dev, 1);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 8001e34:	2101      	movs	r1, #1
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f002 fe45 	bl	8004ac6 <vl53l5cx_set_ranging_frequency_hz>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <config_sensors+0x6a>
 8001e46:	2300      	movs	r3, #0
 8001e48:	e028      	b.n	8001e9c <config_sensors+0xbc>
  tof_res = vl53l5cx_set_target_order(p_dev, VL53L5CX_TARGET_ORDER_CLOSEST);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f002 fe5b 	bl	8004b08 <vl53l5cx_set_target_order>
 8001e52:	4603      	mov	r3, r0
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <config_sensors+0x80>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e01d      	b.n	8001e9c <config_sensors+0xbc>
  tof_res = vl53l5cx_set_ranging_mode(p_dev, VL53L5CX_RANGING_MODE_CONTINUOUS);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 8001e60:	2101      	movs	r1, #1
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f002 fe7c 	bl	8004b60 <vl53l5cx_set_ranging_mode>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <config_sensors+0x96>
 8001e72:	2300      	movs	r3, #0
 8001e74:	e012      	b.n	8001e9c <config_sensors+0xbc>
  //tof_res = vl53l5cx_set_ranging_mode(p_dev, VL53L5CX_RANGING_MODE_AUTONOMOUS);if (tof_res != VL53L5CX_STATUS_OK) return false ;// TODO test it

  //Check for sensor to be alive
  uint8_t isAlive;
  tof_res =vl53l5cx_is_alive(p_dev,&isAlive);if (tof_res != VL53L5CX_STATUS_OK) return false;
 8001e76:	f107 030e 	add.w	r3, r7, #14
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f001 fc59 	bl	8003734 <vl53l5cx_is_alive>
 8001e82:	4603      	mov	r3, r0
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <config_sensors+0xb0>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e005      	b.n	8001e9c <config_sensors+0xbc>
  if (isAlive != 1) return false;
 8001e90:	7bbb      	ldrb	r3, [r7, #14]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d001      	beq.n	8001e9a <config_sensors+0xba>
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <config_sensors+0xbc>

  // All Good!
  return true;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <initialize_sensors_I2C>:


bool initialize_sensors_I2C(VL53L5CX_Configuration *p_dev, uint8_t mode)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
  bool status = false;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]

  //reset I2C  //configure pins out/in for forward only

  //status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,I2C_RST_BACKWARD_PIN,I2C_RST_FORWARD_PIN);if (status == false)return status;

  if (mode == 1 && p_dev != NULL){
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d11f      	bne.n	8001efa <initialize_sensors_I2C+0x56>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01c      	beq.n	8001efa <initialize_sensors_I2C+0x56>
    //enable forward only and config
    status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,LPN_FORWARD_PIN | LED_FORWARD_PIN );if (status == false)return status;
 8001ec0:	2114      	movs	r1, #20
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f000 ff5e 	bl	8002d84 <I2C_expander_set_register>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	f083 0301 	eor.w	r3, r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <initialize_sensors_I2C+0x38>
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	e043      	b.n	8001f64 <initialize_sensors_I2C+0xc0>
    status = config_sensors(p_dev,VL53L5CX_FORWARD_I2C_ADDRESS);if (status == false)return status;
 8001edc:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff7d 	bl	8001de0 <config_sensors>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	f083 0301 	eor.w	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <initialize_sensors_I2C+0x56>
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	e034      	b.n	8001f64 <initialize_sensors_I2C+0xc0>
  }
  if (mode == 2 && p_dev != NULL){
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d11f      	bne.n	8001f40 <initialize_sensors_I2C+0x9c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01c      	beq.n	8001f40 <initialize_sensors_I2C+0x9c>
    //enable backward only and config
    status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,LPN_BACKWARD_PIN | LED_BACKWARD_PIN); if (status == false)return status;
 8001f06:	2121      	movs	r1, #33	@ 0x21
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f000 ff3b 	bl	8002d84 <I2C_expander_set_register>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	f083 0301 	eor.w	r3, r3, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <initialize_sensors_I2C+0x7e>
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	e020      	b.n	8001f64 <initialize_sensors_I2C+0xc0>
    status = config_sensors(p_dev,VL53L5CX_BACKWARD_I2C_ADDRESS);if (status == false)return status;
 8001f22:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ff5a 	bl	8001de0 <config_sensors>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	f083 0301 	eor.w	r3, r3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <initialize_sensors_I2C+0x9c>
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	e011      	b.n	8001f64 <initialize_sensors_I2C+0xc0>
  }
  //status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,0x00); //all off
  if (mode == 3){
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d10d      	bne.n	8001f62 <initialize_sensors_I2C+0xbe>
    //enable both forward & backward
    status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,LPN_BACKWARD_PIN | LED_BACKWARD_PIN|LPN_FORWARD_PIN | LED_FORWARD_PIN); if (status == false)return status;
 8001f46:	2135      	movs	r1, #53	@ 0x35
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f000 ff1b 	bl	8002d84 <I2C_expander_set_register>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	73fb      	strb	r3, [r7, #15]
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	f083 0301 	eor.w	r3, r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <initialize_sensors_I2C+0xbe>
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	e000      	b.n	8001f64 <initialize_sensors_I2C+0xc0>
  }
  return status;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <get_sensor_data>:

bool get_sensor_data(VL53L5CX_Configuration *p_dev,VL53L5CX_ResultsData *p_results){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]

  // Check  for data ready I2c
  uint8_t ranging_ready = 2;
 8001f76:	2302      	movs	r3, #2
 8001f78:	73bb      	strb	r3, [r7, #14]
  //ranging_ready --> 0 if data is not ready, or 1 if a new data is ready.
  uint8_t status = vl53l5cx_check_data_ready(p_dev, &ranging_ready);if (status != VL53L5CX_STATUS_OK) return false;
 8001f7a:	f107 030e 	add.w	r3, r7, #14
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f002 fa3d 	bl	8004400 <vl53l5cx_check_data_ready>
 8001f86:	4603      	mov	r3, r0
 8001f88:	73fb      	strb	r3, [r7, #15]
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <get_sensor_data+0x28>
 8001f90:	2300      	movs	r3, #0
 8001f92:	e010      	b.n	8001fb6 <get_sensor_data+0x4a>

  // 1 Get data in case it is ready
  if (ranging_ready == 1){
 8001f94:	7bbb      	ldrb	r3, [r7, #14]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d10a      	bne.n	8001fb0 <get_sensor_data+0x44>
    status = vl53l5cx_get_ranging_data(p_dev, p_results);if (status != VL53L5CX_STATUS_OK) return false;
 8001f9a:	6839      	ldr	r1, [r7, #0]
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f002 fa7f 	bl	80044a0 <vl53l5cx_get_ranging_data>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <get_sensor_data+0x48>
 8001fac:	2300      	movs	r3, #0
 8001fae:	e002      	b.n	8001fb6 <get_sensor_data+0x4a>
  }else {
    //0  data in not ready yet
    return false;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e000      	b.n	8001fb6 <get_sensor_data+0x4a>
  }

  // All good then
  //return false;// TODO deleet
  return true;
 8001fb4:	2301      	movs	r3, #1
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <__NVIC_GetPriorityGrouping>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	@ (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_EnableIRQ>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4907      	ldr	r1, [pc, #28]	@ (8002014 <__NVIC_EnableIRQ+0x38>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_SetPriority>:
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	@ (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	@ (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	@ 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	@ 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <LL_DMA_SetDataTransferDirection>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80020e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002120 <LL_DMA_SetDataTransferDirection+0x4c>)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	4413      	add	r3, r2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	4413      	add	r3, r2
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020f8:	f023 0310 	bic.w	r3, r3, #16
 80020fc:	4908      	ldr	r1, [pc, #32]	@ (8002120 <LL_DMA_SetDataTransferDirection+0x4c>)
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	440a      	add	r2, r1
 8002102:	7812      	ldrb	r2, [r2, #0]
 8002104:	4611      	mov	r1, r2
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	440a      	add	r2, r1
 800210a:	4611      	mov	r1, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]
}
 8002112:	bf00      	nop
 8002114:	371c      	adds	r7, #28
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	0800bdd0 	.word	0x0800bdd0

08002124 <LL_DMA_SetMode>:
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8002134:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <LL_DMA_SetMode+0x48>)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	4413      	add	r3, r2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	4413      	add	r3, r2
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 0220 	bic.w	r2, r3, #32
 8002148:	4908      	ldr	r1, [pc, #32]	@ (800216c <LL_DMA_SetMode+0x48>)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	440b      	add	r3, r1
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	440b      	add	r3, r1
 8002156:	4619      	mov	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
}
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	0800bdd0 	.word	0x0800bdd0

08002170 <LL_DMA_SetPeriphIncMode>:
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8002180:	4a0d      	ldr	r2, [pc, #52]	@ (80021b8 <LL_DMA_SetPeriphIncMode+0x48>)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4413      	add	r3, r2
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	4413      	add	r3, r2
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002194:	4908      	ldr	r1, [pc, #32]	@ (80021b8 <LL_DMA_SetPeriphIncMode+0x48>)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	440b      	add	r3, r1
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4619      	mov	r1, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	440b      	add	r3, r1
 80021a2:	4619      	mov	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]
}
 80021aa:	bf00      	nop
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	0800bdd0 	.word	0x0800bdd0

080021bc <LL_DMA_SetMemoryIncMode>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80021cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002204 <LL_DMA_SetMemoryIncMode+0x48>)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	4413      	add	r3, r2
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	4413      	add	r3, r2
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021e0:	4908      	ldr	r1, [pc, #32]	@ (8002204 <LL_DMA_SetMemoryIncMode+0x48>)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	440b      	add	r3, r1
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4619      	mov	r1, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	440b      	add	r3, r1
 80021ee:	4619      	mov	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
}
 80021f6:	bf00      	nop
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	0800bdd0 	.word	0x0800bdd0

08002208 <LL_DMA_SetPeriphSize>:
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8002218:	4a0d      	ldr	r2, [pc, #52]	@ (8002250 <LL_DMA_SetPeriphSize+0x48>)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	4413      	add	r3, r2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	4413      	add	r3, r2
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800222c:	4908      	ldr	r1, [pc, #32]	@ (8002250 <LL_DMA_SetPeriphSize+0x48>)
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	440b      	add	r3, r1
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	440b      	add	r3, r1
 800223a:	4619      	mov	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
}
 8002242:	bf00      	nop
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	0800bdd0 	.word	0x0800bdd0

08002254 <LL_DMA_SetMemorySize>:
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8002264:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <LL_DMA_SetMemorySize+0x48>)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	4413      	add	r3, r2
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	4413      	add	r3, r2
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002278:	4908      	ldr	r1, [pc, #32]	@ (800229c <LL_DMA_SetMemorySize+0x48>)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	440b      	add	r3, r1
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	440b      	add	r3, r1
 8002286:	4619      	mov	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
}
 800228e:	bf00      	nop
 8002290:	371c      	adds	r7, #28
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	0800bdd0 	.word	0x0800bdd0

080022a0 <LL_DMA_SetChannelPriorityLevel>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80022b0:	4a0d      	ldr	r2, [pc, #52]	@ (80022e8 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4413      	add	r3, r2
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	4413      	add	r3, r2
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022c4:	4908      	ldr	r1, [pc, #32]	@ (80022e8 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	440b      	add	r3, r1
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	440b      	add	r3, r1
 80022d2:	4619      	mov	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]
}
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	0800bdd0 	.word	0x0800bdd0

080022ec <LL_DMA_SetPeriphRequest>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	@ 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	33a8      	adds	r3, #168	@ 0xa8
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	210f      	movs	r1, #15
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	401a      	ands	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	210f      	movs	r1, #15
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	617b      	str	r3, [r7, #20]
  return result;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <LL_DMA_SetPeriphRequest+0x42>
    return 32U;
 800232a:	2320      	movs	r3, #32
 800232c:	e003      	b.n	8002336 <LL_DMA_SetPeriphRequest+0x4a>
  return __builtin_clz(value);
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4619      	mov	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	408b      	lsls	r3, r1
 800233c:	68f9      	ldr	r1, [r7, #12]
 800233e:	31a8      	adds	r1, #168	@ 0xa8
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
}
 8002344:	bf00      	nop
 8002346:	3724      	adds	r7, #36	@ 0x24
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_RCC_SetUSARTClockSource>:
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8002358:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <LL_RCC_SetUSARTClockSource+0x30>)
 800235a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	43db      	mvns	r3, r3
 8002364:	401a      	ands	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	b29b      	uxth	r3, r3
 800236a:	4905      	ldr	r1, [pc, #20]	@ (8002380 <LL_RCC_SetUSARTClockSource+0x30>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000

08002384 <LL_AHB2_GRP1_EnableClock>:
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800238c:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800238e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002390:	4907      	ldr	r1, [pc, #28]	@ (80023b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4313      	orrs	r3, r2
 8002396:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002398:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800239a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4013      	ands	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023a2:	68fb      	ldr	r3, [r7, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40021000 	.word	0x40021000

080023b4 <LL_APB1_GRP1_EnableClock>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023bc:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023c0:	4907      	ldr	r1, [pc, #28]	@ (80023e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023c8:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4013      	ands	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40021000 	.word	0x40021000

080023e4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80023ec:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023f0:	4907      	ldr	r1, [pc, #28]	@ (8002410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4013      	ands	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40021000 	.word	0x40021000

08002414 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	601a      	str	r2, [r3, #0]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	609a      	str	r2, [r3, #8]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08e      	sub	sp, #56	@ 0x38
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002466:	f107 031c 	add.w	r3, r7, #28
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
 8002474:	611a      	str	r2, [r3, #16]
 8002476:	615a      	str	r2, [r3, #20]
 8002478:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
 8002488:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 800248a:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800248e:	f7ff ff5f 	bl	8002350 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002492:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002496:	f7ff ffa5 	bl	80023e4 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800249a:	2002      	movs	r0, #2
 800249c:	f7ff ff72 	bl	8002384 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80024a0:	23c0      	movs	r3, #192	@ 0xc0
 80024a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80024a4:	2302      	movs	r3, #2
 80024a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80024b4:	2307      	movs	r3, #7
 80024b6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	4619      	mov	r1, r3
 80024bc:	4840      	ldr	r0, [pc, #256]	@ (80025c0 <MX_USART1_UART_Init+0x160>)
 80024be:	f004 fd10 	bl	8006ee2 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_7, LL_DMA_REQUEST_2);
 80024c2:	2202      	movs	r2, #2
 80024c4:	2106      	movs	r1, #6
 80024c6:	483f      	ldr	r0, [pc, #252]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 80024c8:	f7ff ff10 	bl	80022ec <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2106      	movs	r1, #6
 80024d0:	483c      	ldr	r0, [pc, #240]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 80024d2:	f7ff fdff 	bl	80020d4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2106      	movs	r1, #6
 80024da:	483a      	ldr	r0, [pc, #232]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 80024dc:	f7ff fee0 	bl	80022a0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2106      	movs	r1, #6
 80024e4:	4837      	ldr	r0, [pc, #220]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 80024e6:	f7ff fe1d 	bl	8002124 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2106      	movs	r1, #6
 80024ee:	4835      	ldr	r0, [pc, #212]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 80024f0:	f7ff fe3e 	bl	8002170 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80024f4:	2280      	movs	r2, #128	@ 0x80
 80024f6:	2106      	movs	r1, #6
 80024f8:	4832      	ldr	r0, [pc, #200]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 80024fa:	f7ff fe5f 	bl	80021bc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80024fe:	2200      	movs	r2, #0
 8002500:	2106      	movs	r1, #6
 8002502:	4830      	ldr	r0, [pc, #192]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 8002504:	f7ff fe80 	bl	8002208 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002508:	2200      	movs	r2, #0
 800250a:	2106      	movs	r1, #6
 800250c:	482d      	ldr	r0, [pc, #180]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 800250e:	f7ff fea1 	bl	8002254 <LL_DMA_SetMemorySize>

  /* USART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_2);
 8002512:	2202      	movs	r2, #2
 8002514:	2105      	movs	r1, #5
 8002516:	482b      	ldr	r0, [pc, #172]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 8002518:	f7ff fee8 	bl	80022ec <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800251c:	2210      	movs	r2, #16
 800251e:	2105      	movs	r1, #5
 8002520:	4828      	ldr	r0, [pc, #160]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 8002522:	f7ff fdd7 	bl	80020d4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8002526:	2200      	movs	r2, #0
 8002528:	2105      	movs	r1, #5
 800252a:	4826      	ldr	r0, [pc, #152]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 800252c:	f7ff feb8 	bl	80022a0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002530:	2200      	movs	r2, #0
 8002532:	2105      	movs	r1, #5
 8002534:	4823      	ldr	r0, [pc, #140]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 8002536:	f7ff fdf5 	bl	8002124 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 800253a:	2200      	movs	r2, #0
 800253c:	2105      	movs	r1, #5
 800253e:	4821      	ldr	r0, [pc, #132]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 8002540:	f7ff fe16 	bl	8002170 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002544:	2280      	movs	r2, #128	@ 0x80
 8002546:	2105      	movs	r1, #5
 8002548:	481e      	ldr	r0, [pc, #120]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 800254a:	f7ff fe37 	bl	80021bc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 800254e:	2200      	movs	r2, #0
 8002550:	2105      	movs	r1, #5
 8002552:	481c      	ldr	r0, [pc, #112]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 8002554:	f7ff fe58 	bl	8002208 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002558:	2200      	movs	r2, #0
 800255a:	2105      	movs	r1, #5
 800255c:	4819      	ldr	r0, [pc, #100]	@ (80025c4 <MX_USART1_UART_Init+0x164>)
 800255e:	f7ff fe79 	bl	8002254 <LL_DMA_SetMemorySize>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8002562:	f7ff fd2d 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002566:	4603      	mov	r3, r0
 8002568:	2200      	movs	r2, #0
 800256a:	2105      	movs	r1, #5
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fd7d 	bl	800206c <NVIC_EncodePriority>
 8002572:	4603      	mov	r3, r0
 8002574:	4619      	mov	r1, r3
 8002576:	2025      	movs	r0, #37	@ 0x25
 8002578:	f7ff fd4e 	bl	8002018 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800257c:	2025      	movs	r0, #37	@ 0x25
 800257e:	f7ff fd2d 	bl	8001fdc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002582:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002586:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800258c:	2300      	movs	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002590:	2300      	movs	r3, #0
 8002592:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002594:	230c      	movs	r3, #12
 8002596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002598:	2300      	movs	r3, #0
 800259a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800259c:	2300      	movs	r3, #0
 800259e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	4619      	mov	r1, r3
 80025a6:	4808      	ldr	r0, [pc, #32]	@ (80025c8 <MX_USART1_UART_Init+0x168>)
 80025a8:	f005 f96e 	bl	8007888 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80025ac:	4806      	ldr	r0, [pc, #24]	@ (80025c8 <MX_USART1_UART_Init+0x168>)
 80025ae:	f7ff ff41 	bl	8002434 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80025b2:	4805      	ldr	r0, [pc, #20]	@ (80025c8 <MX_USART1_UART_Init+0x168>)
 80025b4:	f7ff ff2e 	bl	8002414 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025b8:	bf00      	nop
 80025ba:	3738      	adds	r7, #56	@ 0x38
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	48000400 	.word	0x48000400
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40013800 	.word	0x40013800

080025cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08e      	sub	sp, #56	@ 0x38
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80025d2:	f107 031c 	add.w	r3, r7, #28
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	611a      	str	r2, [r3, #16]
 80025e2:	615a      	str	r2, [r3, #20]
 80025e4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e6:	1d3b      	adds	r3, r7, #4
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
 80025f4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80025f6:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 80025fa:	f7ff fea9 	bl	8002350 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80025fe:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002602:	f7ff fed7 	bl	80023b4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002606:	2001      	movs	r0, #1
 8002608:	f7ff febc 	bl	8002384 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800260c:	230c      	movs	r3, #12
 800260e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002610:	2302      	movs	r3, #2
 8002612:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002614:	2303      	movs	r3, #3
 8002616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002620:	2307      	movs	r3, #7
 8002622:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	4619      	mov	r1, r3
 8002628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800262c:	f004 fc59 	bl	8006ee2 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8002630:	f7ff fcc6 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002634:	4603      	mov	r3, r0
 8002636:	2200      	movs	r2, #0
 8002638:	2105      	movs	r1, #5
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fd16 	bl	800206c <NVIC_EncodePriority>
 8002640:	4603      	mov	r3, r0
 8002642:	4619      	mov	r1, r3
 8002644:	2026      	movs	r0, #38	@ 0x26
 8002646:	f7ff fce7 	bl	8002018 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800264a:	2026      	movs	r0, #38	@ 0x26
 800264c:	f7ff fcc6 	bl	8001fdc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002650:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002654:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800265e:	2300      	movs	r3, #0
 8002660:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002662:	230c      	movs	r3, #12
 8002664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002666:	2300      	movs	r3, #0
 8002668:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800266a:	2300      	movs	r3, #0
 800266c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800266e:	f107 031c 	add.w	r3, r7, #28
 8002672:	4619      	mov	r1, r3
 8002674:	4806      	ldr	r0, [pc, #24]	@ (8002690 <MX_USART2_UART_Init+0xc4>)
 8002676:	f005 f907 	bl	8007888 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800267a:	4805      	ldr	r0, [pc, #20]	@ (8002690 <MX_USART2_UART_Init+0xc4>)
 800267c:	f7ff feda 	bl	8002434 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002680:	4803      	ldr	r0, [pc, #12]	@ (8002690 <MX_USART2_UART_Init+0xc4>)
 8002682:	f7ff fec7 	bl	8002414 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002686:	bf00      	nop
 8002688:	3738      	adds	r7, #56	@ 0x38
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40004400 	.word	0x40004400

08002694 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08e      	sub	sp, #56	@ 0x38
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800269a:	f107 031c 	add.w	r3, r7, #28
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]
 80026a8:	611a      	str	r2, [r3, #16]
 80026aa:	615a      	str	r2, [r3, #20]
 80026ac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
 80026bc:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART3_CLKSOURCE_PCLK1);
 80026be:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 80026c2:	f7ff fe45 	bl	8002350 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80026c6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80026ca:	f7ff fe73 	bl	80023b4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80026ce:	2002      	movs	r0, #2
 80026d0:	f7ff fe58 	bl	8002384 <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80026d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026da:	2302      	movs	r3, #2
 80026dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80026de:	2303      	movs	r3, #3
 80026e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80026ea:	2307      	movs	r3, #7
 80026ec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	4619      	mov	r1, r3
 80026f2:	4819      	ldr	r0, [pc, #100]	@ (8002758 <MX_USART3_UART_Init+0xc4>)
 80026f4:	f004 fbf5 	bl	8006ee2 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80026f8:	f7ff fc62 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2200      	movs	r2, #0
 8002700:	2105      	movs	r1, #5
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fcb2 	bl	800206c <NVIC_EncodePriority>
 8002708:	4603      	mov	r3, r0
 800270a:	4619      	mov	r1, r3
 800270c:	2027      	movs	r0, #39	@ 0x27
 800270e:	f7ff fc83 	bl	8002018 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8002712:	2027      	movs	r0, #39	@ 0x27
 8002714:	f7ff fc62 	bl	8001fdc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002718:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800271c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002726:	2300      	movs	r3, #0
 8002728:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800272a:	230c      	movs	r3, #12
 800272c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800272e:	2300      	movs	r3, #0
 8002730:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002732:	2300      	movs	r3, #0
 8002734:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8002736:	f107 031c 	add.w	r3, r7, #28
 800273a:	4619      	mov	r1, r3
 800273c:	4807      	ldr	r0, [pc, #28]	@ (800275c <MX_USART3_UART_Init+0xc8>)
 800273e:	f005 f8a3 	bl	8007888 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8002742:	4806      	ldr	r0, [pc, #24]	@ (800275c <MX_USART3_UART_Init+0xc8>)
 8002744:	f7ff fe76 	bl	8002434 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8002748:	4804      	ldr	r0, [pc, #16]	@ (800275c <MX_USART3_UART_Init+0xc8>)
 800274a:	f7ff fe63 	bl	8002414 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	3738      	adds	r7, #56	@ 0x38
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	48000400 	.word	0x48000400
 800275c:	40004800 	.word	0x40004800

08002760 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002760:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002798 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002764:	f7ff fb2a 	bl	8001dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002768:	480c      	ldr	r0, [pc, #48]	@ (800279c <LoopForever+0x6>)
  ldr r1, =_edata
 800276a:	490d      	ldr	r1, [pc, #52]	@ (80027a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800276c:	4a0d      	ldr	r2, [pc, #52]	@ (80027a4 <LoopForever+0xe>)
  movs r3, #0
 800276e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002770:	e002      	b.n	8002778 <LoopCopyDataInit>

08002772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002776:	3304      	adds	r3, #4

08002778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800277a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800277c:	d3f9      	bcc.n	8002772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277e:	4a0a      	ldr	r2, [pc, #40]	@ (80027a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002780:	4c0a      	ldr	r4, [pc, #40]	@ (80027ac <LoopForever+0x16>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002784:	e001      	b.n	800278a <LoopFillZerobss>

08002786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002788:	3204      	adds	r2, #4

0800278a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800278a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800278c:	d3fb      	bcc.n	8002786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800278e:	f008 fc8d 	bl	800b0ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002792:	f7ff f869 	bl	8001868 <main>

08002796 <LoopForever>:

LoopForever:
    b LoopForever
 8002796:	e7fe      	b.n	8002796 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002798:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800279c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a0:	20000460 	.word	0x20000460
  ldr r2, =_sidata
 80027a4:	080218b4 	.word	0x080218b4
  ldr r2, =_sbss
 80027a8:	20000460 	.word	0x20000460
  ldr r4, =_ebss
 80027ac:	20003580 	.word	0x20003580

080027b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027b0:	e7fe      	b.n	80027b0 <ADC1_IRQHandler>

080027b2 <LL_I2C_EnableDMAReq_TX>:
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_TXDMAEN);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	601a      	str	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <LL_I2C_EnableDMAReq_RX>:
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXDMAEN);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	601a      	str	r2, [r3, #0]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_I2C_DMA_GetRegAddr>:
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  if (Direction == LL_I2C_DMA_REG_DATA_TRANSMIT)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <LL_I2C_DMA_GetRegAddr+0x18>
    data_reg_addr = (uint32_t) &(I2Cx->TXDR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3328      	adds	r3, #40	@ 0x28
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e002      	b.n	8002810 <LL_I2C_DMA_GetRegAddr+0x1e>
    data_reg_addr = (uint32_t) &(I2Cx->RXDR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3324      	adds	r3, #36	@ 0x24
 800280e:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 8002810:	68fb      	ldr	r3, [r7, #12]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_I2C_IsActiveFlag_TXE>:
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <LL_I2C_IsActiveFlag_TXE+0x18>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <LL_I2C_IsActiveFlag_TXE+0x1a>
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_I2C_IsActiveFlag_STOP>:
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b20      	cmp	r3, #32
 8002856:	d101      	bne.n	800285c <LL_I2C_IsActiveFlag_STOP+0x18>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <LL_I2C_IsActiveFlag_STOP+0x1a>
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <LL_I2C_IsActiveFlag_BUSY>:
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800287a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800287e:	d101      	bne.n	8002884 <LL_I2C_IsActiveFlag_BUSY+0x1a>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <LL_I2C_IsActiveFlag_BUSY+0x1c>
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <LL_I2C_ClearFlag_STOP>:
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f043 0220 	orr.w	r2, r3, #32
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	61da      	str	r2, [r3, #28]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_I2C_ClearFlag_TXE>:
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  WRITE_REG(I2Cx->ISR, I2C_ISR_TXE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	619a      	str	r2, [r3, #24]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	0d5b      	lsrs	r3, r3, #21
 80028e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <LL_I2C_HandleTransfer+0x48>)
 80028e8:	430b      	orrs	r3, r1
 80028ea:	43db      	mvns	r3, r3
 80028ec:	401a      	ands	r2, r3
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4319      	orrs	r1, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	041b      	lsls	r3, r3, #16
 80028f8:	4319      	orrs	r1, r3
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	4319      	orrs	r1, r3
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	430b      	orrs	r3, r1
 8002902:	431a      	orrs	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	03ff7bff 	.word	0x03ff7bff

08002918 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <LL_DMA_EnableChannel>:
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8002946:	4a0c      	ldr	r2, [pc, #48]	@ (8002978 <LL_DMA_EnableChannel+0x40>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4413      	add	r3, r2
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4908      	ldr	r1, [pc, #32]	@ (8002978 <LL_DMA_EnableChannel+0x40>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	440a      	add	r2, r1
 800295c:	7812      	ldrb	r2, [r2, #0]
 800295e:	4611      	mov	r1, r2
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	440a      	add	r2, r1
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6013      	str	r3, [r2, #0]
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	0800bdd8 	.word	0x0800bdd8

0800297c <LL_DMA_DisableChannel>:
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800298a:	4a0c      	ldr	r2, [pc, #48]	@ (80029bc <LL_DMA_DisableChannel+0x40>)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	4413      	add	r3, r2
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4908      	ldr	r1, [pc, #32]	@ (80029bc <LL_DMA_DisableChannel+0x40>)
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	440a      	add	r2, r1
 80029a0:	7812      	ldrb	r2, [r2, #0]
 80029a2:	4611      	mov	r1, r2
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	440a      	add	r2, r1
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	6013      	str	r3, [r2, #0]
}
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	0800bdd8 	.word	0x0800bdd8

080029c0 <LL_DMA_SetDataLength>:
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80029d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a08 <LL_DMA_SetDataLength+0x48>)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4413      	add	r3, r2
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	4413      	add	r3, r2
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	041b      	lsls	r3, r3, #16
 80029e4:	4908      	ldr	r1, [pc, #32]	@ (8002a08 <LL_DMA_SetDataLength+0x48>)
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	440a      	add	r2, r1
 80029ea:	7812      	ldrb	r2, [r2, #0]
 80029ec:	4611      	mov	r1, r2
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	440a      	add	r2, r1
 80029f2:	4611      	mov	r1, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	0800bdd8 	.word	0x0800bdd8

08002a0c <LL_DMA_ConfigAddresses>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d114      	bne.n	8002a4e <LL_DMA_ConfigAddresses+0x42>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8002a24:	4a17      	ldr	r2, [pc, #92]	@ (8002a84 <LL_DMA_ConfigAddresses+0x78>)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	4413      	add	r3, r2
 8002a32:	461a      	mov	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8002a38:	4a12      	ldr	r2, [pc, #72]	@ (8002a84 <LL_DMA_ConfigAddresses+0x78>)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	4413      	add	r3, r2
 8002a46:	461a      	mov	r2, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6093      	str	r3, [r2, #8]
}
 8002a4c:	e013      	b.n	8002a76 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8002a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a84 <LL_DMA_ConfigAddresses+0x78>)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4413      	add	r3, r2
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8002a62:	4a08      	ldr	r2, [pc, #32]	@ (8002a84 <LL_DMA_ConfigAddresses+0x78>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4413      	add	r3, r2
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	4413      	add	r3, r2
 8002a70:	461a      	mov	r2, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	60d3      	str	r3, [r2, #12]
}
 8002a76:	bf00      	nop
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	0800bdd8 	.word	0x0800bdd8

08002a88 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a9c:	d101      	bne.n	8002aa2 <LL_DMA_IsActiveFlag_TC6+0x1a>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <LL_DMA_IsActiveFlag_TC6+0x1c>
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ac4:	d101      	bne.n	8002aca <LL_DMA_IsActiveFlag_TC7+0x1a>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <LL_DMA_IsActiveFlag_TC7+0x1c>
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <i2cdevWriteReg8>:
 *         - SUCCESS:
 *         - ERROR:   Not applicable
 * */

ErrorStatus i2cdevWriteReg8(I2C_TypeDef *I2Cx , uint8_t SlaveAddr_IC , uint8_t target_reg , uint8_t value)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	70fb      	strb	r3, [r7, #3]
 8002aea:	460b      	mov	r3, r1
 8002aec:	70bb      	strb	r3, [r7, #2]
 8002aee:	4613      	mov	r3, r2
 8002af0:	707b      	strb	r3, [r7, #1]
	//Address process
	SlaveAddr_IC = SlaveAddr_IC<<1;
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	70fb      	strb	r3, [r7, #3]

	//I2C wait for : BUS BUSY
	uint32_t counter = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
	while(LL_I2C_IsActiveFlag_BUSY(I2Cx) == SET){
 8002afc:	e00b      	b.n	8002b16 <i2cdevWriteReg8+0x3e>
		counter++;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3301      	adds	r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
		if( counter == 25000 ) {
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d103      	bne.n	8002b16 <i2cdevWriteReg8+0x3e>
			Error_Handler();
 8002b0e:	f7fe ff17 	bl	8001940 <Error_Handler>
			return 0xFF;
 8002b12:	23ff      	movs	r3, #255	@ 0xff
 8002b14:	e04b      	b.n	8002bae <i2cdevWriteReg8+0xd6>
	while(LL_I2C_IsActiveFlag_BUSY(I2Cx) == SET){
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff fea7 	bl	800286a <LL_I2C_IsActiveFlag_BUSY>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d0ed      	beq.n	8002afe <i2cdevWriteReg8+0x26>
		}
	}

	LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002b22:	78f9      	ldrb	r1, [r7, #3]
 8002b24:	4b24      	ldr	r3, [pc, #144]	@ (8002bb8 <i2cdevWriteReg8+0xe0>)
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2302      	movs	r3, #2
 8002b30:	2200      	movs	r2, #0
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff feca 	bl	80028cc <LL_I2C_HandleTransfer>

	//I2C wait for : TX REG BUSY AND CLEAR
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);
 8002b38:	bf00      	nop
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff fe6f 	bl	800281e <LL_I2C_IsActiveFlag_TXE>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f9      	beq.n	8002b3a <i2cdevWriteReg8+0x62>

    LL_I2C_TransmitData8(I2Cx, target_reg);
 8002b46:	78bb      	ldrb	r3, [r7, #2]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff fee4 	bl	8002918 <LL_I2C_TransmitData8>

	//I2C wait for : TX REG BUSY AND CLEAR
    counter=0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
 8002b54:	e00e      	b.n	8002b74 <i2cdevWriteReg8+0x9c>
        counter++;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
        if( counter == 25000 ){
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d106      	bne.n	8002b74 <i2cdevWriteReg8+0x9c>
            LL_I2C_ClearFlag_TXE(I2Cx);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fea3 	bl	80028b2 <LL_I2C_ClearFlag_TXE>
            Error_Handler();
 8002b6c:	f7fe fee8 	bl	8001940 <Error_Handler>
            return ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e01c      	b.n	8002bae <i2cdevWriteReg8+0xd6>
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff fe52 	bl	800281e <LL_I2C_IsActiveFlag_TXE>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ea      	beq.n	8002b56 <i2cdevWriteReg8+0x7e>
        }
    }

    LL_I2C_TransmitData8(I2Cx, value);
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	4619      	mov	r1, r3
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff fec7 	bl	8002918 <LL_I2C_TransmitData8>

	//I2C wait for : TX REG BUSY AND CLEAR
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);
 8002b8a:	bf00      	nop
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff fe46 	bl	800281e <LL_I2C_IsActiveFlag_TXE>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f9      	beq.n	8002b8c <i2cdevWriteReg8+0xb4>

    //I2C wait for : STOP CLEAR
    while(LL_I2C_IsActiveFlag_STOP(I2Cx)==RESET);
 8002b98:	bf00      	nop
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fe52 	bl	8002844 <LL_I2C_IsActiveFlag_STOP>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f9      	beq.n	8002b9a <i2cdevWriteReg8+0xc2>

    LL_I2C_ClearFlag_STOP(I2Cx);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fe73 	bl	8002892 <LL_I2C_ClearFlag_STOP>

    return SUCCESS;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	80002000 	.word	0x80002000

08002bbc <i2cdevReadReg16>:
 * */
void i2cdevReadReg16(I2C_TypeDef *I2Cx ,
						uint8_t SlaveAddr_IC ,
						uint16_t target_reg,
						uint8_t *p_values,
						uint32_t size){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	72fb      	strb	r3, [r7, #11]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	813b      	strh	r3, [r7, #8]

	//Address process
	SlaveAddr_IC = SlaveAddr_IC<<1;
 8002bce:	7afb      	ldrb	r3, [r7, #11]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	72fb      	strb	r3, [r7, #11]

	LL_I2C_IsActiveFlag_BUSY(I2Cx);
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f7ff fe48 	bl	800286a <LL_I2C_IsActiveFlag_BUSY>
	LL_I2C_HandleTransfer(I2Cx , SlaveAddr_IC , LL_I2C_ADDRSLAVE_7BIT , 2 , LL_I2C_MODE_AUTOEND , LL_I2C_GENERATE_START_WRITE);
 8002bda:	7af9      	ldrb	r1, [r7, #11]
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c98 <i2cdevReadReg16+0xdc>)
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2302      	movs	r3, #2
 8002be8:	2200      	movs	r2, #0
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f7ff fe6e 	bl	80028cc <LL_I2C_HandleTransfer>
	//Send the Address
	LL_I2C_TransmitData8(I2Cx, (uint8_t)(target_reg >> 8));
 8002bf0:	893b      	ldrh	r3, [r7, #8]
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff fe8c 	bl	8002918 <LL_I2C_TransmitData8>

	while (!LL_I2C_IsActiveFlag_TXE(I2Cx));
 8002c00:	bf00      	nop
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff fe0b 	bl	800281e <LL_I2C_IsActiveFlag_TXE>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f9      	beq.n	8002c02 <i2cdevReadReg16+0x46>

	LL_I2C_TransmitData8(I2Cx, (uint8_t)(target_reg & 0xFF));
 8002c0e:	893b      	ldrh	r3, [r7, #8]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	4619      	mov	r1, r3
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7ff fe7f 	bl	8002918 <LL_I2C_TransmitData8>

	while (!LL_I2C_IsActiveFlag_TXE(I2Cx));
 8002c1a:	bf00      	nop
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7ff fdfe 	bl	800281e <LL_I2C_IsActiveFlag_TXE>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f9      	beq.n	8002c1c <i2cdevReadReg16+0x60>

	//Send the Data
	LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC, LL_I2C_ADDRSLAVE_7BIT, size ,LL_I2C_MODE_AUTOEND ,LL_I2C_GENERATE_START_READ);
 8002c28:	7af9      	ldrb	r1, [r7, #11]
 8002c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c9c <i2cdevReadReg16+0xe0>)
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2200      	movs	r2, #0
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f7ff fe47 	bl	80028cc <LL_I2C_HandleTransfer>

	//I2C DMA Transfer
	LL_DMA_ConfigAddresses(DMA1,
 8002c3e:	2101      	movs	r1, #1
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff fdd6 	bl	80027f2 <LL_I2C_DMA_GetRegAddr>
 8002c46:	4602      	mov	r2, r0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	9100      	str	r1, [sp, #0]
 8002c4e:	2106      	movs	r1, #6
 8002c50:	4813      	ldr	r0, [pc, #76]	@ (8002ca0 <i2cdevReadReg16+0xe4>)
 8002c52:	f7ff fedb 	bl	8002a0c <LL_DMA_ConfigAddresses>
						   LL_DMA_CHANNEL_7,
						   LL_I2C_DMA_GetRegAddr(I2Cx,LL_I2C_DMA_REG_DATA_RECEIVE),
						   (uint32_t)p_values,
						   LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, size);
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	2106      	movs	r1, #6
 8002c5a:	4811      	ldr	r0, [pc, #68]	@ (8002ca0 <i2cdevReadReg16+0xe4>)
 8002c5c:	f7ff feb0 	bl	80029c0 <LL_DMA_SetDataLength>
    LL_I2C_EnableDMAReq_RX(I2Cx);
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff fdb6 	bl	80027d2 <LL_I2C_EnableDMAReq_RX>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002c66:	2106      	movs	r1, #6
 8002c68:	480d      	ldr	r0, [pc, #52]	@ (8002ca0 <i2cdevReadReg16+0xe4>)
 8002c6a:	f7ff fe65 	bl	8002938 <LL_DMA_EnableChannel>

    //Debug problem :TBD
    LL_mDelay(10);
 8002c6e:	200a      	movs	r0, #10
 8002c70:	f004 fe70 	bl	8007954 <LL_mDelay>
    while(!LL_DMA_IsActiveFlag_TC7(DMA1));
 8002c74:	bf00      	nop
 8002c76:	480a      	ldr	r0, [pc, #40]	@ (8002ca0 <i2cdevReadReg16+0xe4>)
 8002c78:	f7ff ff1a 	bl	8002ab0 <LL_DMA_IsActiveFlag_TC7>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f9      	beq.n	8002c76 <i2cdevReadReg16+0xba>
    //TBD: double check if need Stop clear here.
    LL_I2C_ClearFlag_STOP(I2Cx);
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f7ff fe05 	bl	8002892 <LL_I2C_ClearFlag_STOP>
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002c88:	2106      	movs	r1, #6
 8002c8a:	4805      	ldr	r0, [pc, #20]	@ (8002ca0 <i2cdevReadReg16+0xe4>)
 8002c8c:	f7ff fe76 	bl	800297c <LL_DMA_DisableChannel>

}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	80002000 	.word	0x80002000
 8002c9c:	80002400 	.word	0x80002400
 8002ca0:	40020000 	.word	0x40020000

08002ca4 <i2cdevWriteReg16>:

void i2cdevWriteReg16(I2C_TypeDef *I2Cx,
                      uint8_t SlaveAddr_IC,
                      uint16_t target_reg,
                      uint8_t *p_values,
                      uint32_t size) {
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	72fb      	strb	r3, [r7, #11]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	813b      	strh	r3, [r7, #8]
    // Shift the Slave Address left by 1
    SlaveAddr_IC = SlaveAddr_IC << 1;
 8002cb6:	7afb      	ldrb	r3, [r7, #11]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	72fb      	strb	r3, [r7, #11]

    // Ensure the I2C bus is not busy before starting a new transfer
    while (LL_I2C_IsActiveFlag_BUSY(I2Cx));
 8002cbc:	bf00      	nop
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f7ff fdd3 	bl	800286a <LL_I2C_IsActiveFlag_BUSY>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f9      	bne.n	8002cbe <i2cdevWriteReg16+0x1a>

    // Begin the I2C write transfer to send the target register address
    LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC, LL_I2C_ADDRSLAVE_7BIT, 2+size, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002cca:	7af9      	ldrb	r1, [r7, #11]
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	3302      	adds	r3, #2
 8002cd0:	4a2a      	ldr	r2, [pc, #168]	@ (8002d7c <i2cdevWriteReg16+0xd8>)
 8002cd2:	9201      	str	r2, [sp, #4]
 8002cd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cd8:	9200      	str	r2, [sp, #0]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7ff fdf5 	bl	80028cc <LL_I2C_HandleTransfer>

    // Send the high byte of the register address
    LL_I2C_TransmitData8(I2Cx, (uint8_t)(target_reg >> 8));
 8002ce2:	893b      	ldrh	r3, [r7, #8]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	4619      	mov	r1, r3
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f7ff fe13 	bl	8002918 <LL_I2C_TransmitData8>

    // Wait until the data transmission is complete
    while (!LL_I2C_IsActiveFlag_TXE(I2Cx));
 8002cf2:	bf00      	nop
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff fd92 	bl	800281e <LL_I2C_IsActiveFlag_TXE>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f9      	beq.n	8002cf4 <i2cdevWriteReg16+0x50>

    // Send the low byte of the register address
    LL_I2C_TransmitData8(I2Cx, (uint8_t)(target_reg & 0xFF));
 8002d00:	893b      	ldrh	r3, [r7, #8]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	4619      	mov	r1, r3
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f7ff fe06 	bl	8002918 <LL_I2C_TransmitData8>

    // Wait until the data transmission is complete
    while (!LL_I2C_IsActiveFlag_TXE(I2Cx));
 8002d0c:	bf00      	nop
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7ff fd85 	bl	800281e <LL_I2C_IsActiveFlag_TXE>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f9      	beq.n	8002d0e <i2cdevWriteReg16+0x6a>
//    //I2C wait for : STOP CLEAR
//    while(LL_I2C_IsActiveFlag_STOP(I2Cx)==RESET);


    // Initiate the I2C transfer to send data with DMA
    LL_DMA_ConfigAddresses(DMA1,
 8002d1a:	687c      	ldr	r4, [r7, #4]
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7ff fd67 	bl	80027f2 <LL_I2C_DMA_GetRegAddr>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2210      	movs	r2, #16
 8002d28:	9200      	str	r2, [sp, #0]
 8002d2a:	4622      	mov	r2, r4
 8002d2c:	2105      	movs	r1, #5
 8002d2e:	4814      	ldr	r0, [pc, #80]	@ (8002d80 <i2cdevWriteReg16+0xdc>)
 8002d30:	f7ff fe6c 	bl	8002a0c <LL_DMA_ConfigAddresses>
                           LL_DMA_CHANNEL_6,
                           (uint32_t)p_values,
                           LL_I2C_DMA_GetRegAddr(I2Cx, LL_I2C_DMA_REG_DATA_TRANSMIT),
                           LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, size);
 8002d34:	6a3a      	ldr	r2, [r7, #32]
 8002d36:	2105      	movs	r1, #5
 8002d38:	4811      	ldr	r0, [pc, #68]	@ (8002d80 <i2cdevWriteReg16+0xdc>)
 8002d3a:	f7ff fe41 	bl	80029c0 <LL_DMA_SetDataLength>
    LL_I2C_EnableDMAReq_TX(I2Cx);
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f7ff fd37 	bl	80027b2 <LL_I2C_EnableDMAReq_TX>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002d44:	2105      	movs	r1, #5
 8002d46:	480e      	ldr	r0, [pc, #56]	@ (8002d80 <i2cdevWriteReg16+0xdc>)
 8002d48:	f7ff fdf6 	bl	8002938 <LL_DMA_EnableChannel>

    osDelay(10);
 8002d4c:	200a      	movs	r0, #10
 8002d4e:	f004 ff49 	bl	8007be4 <osDelay>
    // Wait briefly to ensure DMA starts properly
    while(!LL_DMA_IsActiveFlag_TC6(DMA1));
 8002d52:	bf00      	nop
 8002d54:	480a      	ldr	r0, [pc, #40]	@ (8002d80 <i2cdevWriteReg16+0xdc>)
 8002d56:	f7ff fe97 	bl	8002a88 <LL_DMA_IsActiveFlag_TC6>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f9      	beq.n	8002d54 <i2cdevWriteReg16+0xb0>

    // Clear STOP flag to avoid any unwanted stoppage
    LL_I2C_ClearFlag_STOP(I2Cx);
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff fd96 	bl	8002892 <LL_I2C_ClearFlag_STOP>

    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002d66:	2105      	movs	r1, #5
 8002d68:	4805      	ldr	r0, [pc, #20]	@ (8002d80 <i2cdevWriteReg16+0xdc>)
 8002d6a:	f7ff fe07 	bl	800297c <LL_DMA_DisableChannel>

    // Clear STOP flag at the end of the transfer
    LL_I2C_ClearFlag_STOP(I2Cx);
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f7ff fd8f 	bl	8002892 <LL_I2C_ClearFlag_STOP>
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd90      	pop	{r4, r7, pc}
 8002d7c:	80002000 	.word	0x80002000
 8002d80:	40020000 	.word	0x40020000

08002d84 <I2C_expander_set_register>:
#include "i2c_drv.h"

#include "tca6408a.h"

bool I2C_expander_set_register(uint8_t reg_address,uint8_t reg_value)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	460a      	mov	r2, r1
 8002d8e:	71fb      	strb	r3, [r7, #7]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71bb      	strb	r3, [r7, #6]
	i2cdevWriteReg8(I2C1, I2C_EXPANDER_DEFAULT_I2C_ADDRESS, reg_address, reg_value);
 8002d94:	79bb      	ldrb	r3, [r7, #6]
 8002d96:	79fa      	ldrb	r2, [r7, #7]
 8002d98:	2120      	movs	r1, #32
 8002d9a:	4804      	ldr	r0, [pc, #16]	@ (8002dac <I2C_expander_set_register+0x28>)
 8002d9c:	f7ff fe9c 	bl	8002ad8 <i2cdevWriteReg8>

	return true;
 8002da0:	2301      	movs	r3, #1
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40005400 	.word	0x40005400

08002db0 <I2C_expander_initialize>:

    return true;
}

bool I2C_expander_initialize()
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
    uint8_t reg_value;

    //set all outputs zero
    reg_value = 0x30; // 1-->on, 0-->off
 8002db6:	2330      	movs	r3, #48	@ 0x30
 8002db8:	71fb      	strb	r3, [r7, #7]
    I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,0x00);
 8002dba:	2100      	movs	r1, #0
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	f7ff ffe1 	bl	8002d84 <I2C_expander_set_register>

    //configure inversion all 0
    reg_value = 0x00; // 1-->inveritng, 0-->non-inveritng
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	71fb      	strb	r3, [r7, #7]
    i2cdevWriteReg8(I2C1, I2C_EXPANDER_DEFAULT_I2C_ADDRESS, POLARITY_INVERSION_REG_ADDRESS, reg_value);
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	2120      	movs	r1, #32
 8002dcc:	480a      	ldr	r0, [pc, #40]	@ (8002df8 <I2C_expander_initialize+0x48>)
 8002dce:	f7ff fe83 	bl	8002ad8 <i2cdevWriteReg8>

    //configure pins out/in
    reg_value = INTERRUPT_SENSE_BACKWARD_PIN|INTERRUPT_SENSE_FORWARD_PIN; // 1-->input, 0-->output
 8002dd2:	23c0      	movs	r3, #192	@ 0xc0
 8002dd4:	71fb      	strb	r3, [r7, #7]
    i2cdevWriteReg8(I2C1, I2C_EXPANDER_DEFAULT_I2C_ADDRESS, CONFIGURATION_REG_ADDRESS, reg_value);
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	2203      	movs	r2, #3
 8002dda:	2120      	movs	r1, #32
 8002ddc:	4806      	ldr	r0, [pc, #24]	@ (8002df8 <I2C_expander_initialize+0x48>)
 8002dde:	f7ff fe7b 	bl	8002ad8 <i2cdevWriteReg8>

    reg_value=LPN_FORWARD_PIN | LED_FORWARD_PIN;
 8002de2:	2314      	movs	r3, #20
 8002de4:	71fb      	strb	r3, [r7, #7]
    I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,LPN_FORWARD_PIN | LED_FORWARD_PIN );
 8002de6:	2114      	movs	r1, #20
 8002de8:	2001      	movs	r0, #1
 8002dea:	f7ff ffcb 	bl	8002d84 <I2C_expander_set_register>

    return true;
 8002dee:	2301      	movs	r3, #1
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40005400 	.word	0x40005400

08002dfc <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	460b      	mov	r3, r1
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	817b      	strh	r3, [r7, #10]
	uint16_t Address= (p_platform->address)>>1;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	085b      	lsrs	r3, r3, #1
 8002e10:	82fb      	strh	r3, [r7, #22]
	i2cdevReadReg16(I2C1, Address, RegisterAdress, p_value, 1);
 8002e12:	8afb      	ldrh	r3, [r7, #22]
 8002e14:	b2d9      	uxtb	r1, r3
 8002e16:	897a      	ldrh	r2, [r7, #10]
 8002e18:	2301      	movs	r3, #1
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4804      	ldr	r0, [pc, #16]	@ (8002e30 <RdByte+0x34>)
 8002e20:	f7ff fecc 	bl	8002bbc <i2cdevReadReg16>
	return 0;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40005400 	.word	0x40005400

08002e34 <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
 8002e40:	4613      	mov	r3, r2
 8002e42:	707b      	strb	r3, [r7, #1]
	uint8_t rx_buffer[1];
	rx_buffer[0]=value;
 8002e44:	787b      	ldrb	r3, [r7, #1]
 8002e46:	733b      	strb	r3, [r7, #12]
	uint16_t Address= (p_platform->address)>>1;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	085b      	lsrs	r3, r3, #1
 8002e4e:	81fb      	strh	r3, [r7, #14]
	i2cdevWriteReg16(I2C1, Address, RegisterAdress, rx_buffer, 1);
 8002e50:	89fb      	ldrh	r3, [r7, #14]
 8002e52:	b2d9      	uxtb	r1, r3
 8002e54:	f107 030c 	add.w	r3, r7, #12
 8002e58:	887a      	ldrh	r2, [r7, #2]
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	9000      	str	r0, [sp, #0]
 8002e5e:	4804      	ldr	r0, [pc, #16]	@ (8002e70 <WrByte+0x3c>)
 8002e60:	f7ff ff20 	bl	8002ca4 <i2cdevWriteReg16>
	return 0;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40005400 	.word	0x40005400

08002e74 <WrMulti>:
uint8_t WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	@ 0x28
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	460b      	mov	r3, r1
 8002e82:	817b      	strh	r3, [r7, #10]
	uint16_t Address= (p_platform->address)>>1;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	833b      	strh	r3, [r7, #24]
	uint32_t remaining_size = size;  // Calculate remaining size to write
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	61fb      	str	r3, [r7, #28]
    uint16_t current_address =RegisterAdress;  // Initialize current address
 8002e90:	897b      	ldrh	r3, [r7, #10]
 8002e92:	837b      	strh	r3, [r7, #26]
	while(remaining_size> 0){
 8002e94:	e01d      	b.n	8002ed2 <WrMulti+0x5e>
		uint32_t current_chunk_size = (remaining_size > chunk_size) ? chunk_size : remaining_size;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	2b80      	cmp	r3, #128	@ 0x80
 8002e9a:	bf28      	it	cs
 8002e9c:	2380      	movcs	r3, #128	@ 0x80
 8002e9e:	617b      	str	r3, [r7, #20]
		i2cdevWriteReg16(I2C1, Address, current_address, p_values, current_chunk_size);
 8002ea0:	8b3b      	ldrh	r3, [r7, #24]
 8002ea2:	b2d9      	uxtb	r1, r3
 8002ea4:	8b7a      	ldrh	r2, [r7, #26]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	480d      	ldr	r0, [pc, #52]	@ (8002ee4 <WrMulti+0x70>)
 8002eae:	f7ff fef9 	bl	8002ca4 <i2cdevWriteReg16>
		remaining_size-= current_chunk_size;
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	61fb      	str	r3, [r7, #28]
		current_address+=current_chunk_size;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	8b7b      	ldrh	r3, [r7, #26]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	837b      	strh	r3, [r7, #26]
		p_values+= current_chunk_size;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	4413      	add	r3, r2
 8002eca:	607b      	str	r3, [r7, #4]
		osDelay(10);
 8002ecc:	200a      	movs	r0, #10
 8002ece:	f004 fe89 	bl	8007be4 <osDelay>
	while(remaining_size> 0){
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1de      	bne.n	8002e96 <WrMulti+0x22>
	}

	return 0;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40005400 	.word	0x40005400

08002ee8 <RdMulti>:
uint8_t RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	@ 0x28
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	817b      	strh	r3, [r7, #10]
	uint16_t Address= (p_platform->address)>>1;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	085b      	lsrs	r3, r3, #1
 8002efe:	833b      	strh	r3, [r7, #24]
	uint32_t remaining_size = size;  // Calculate remaining size to write
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	61fb      	str	r3, [r7, #28]
	uint16_t current_address =RegisterAdress;  // Initialize current address
 8002f04:	897b      	ldrh	r3, [r7, #10]
 8002f06:	837b      	strh	r3, [r7, #26]
	while(remaining_size> 0){
 8002f08:	e01d      	b.n	8002f46 <RdMulti+0x5e>
		uint32_t current_chunk_size = (remaining_size > chunk_size) ? chunk_size : remaining_size;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2b80      	cmp	r3, #128	@ 0x80
 8002f0e:	bf28      	it	cs
 8002f10:	2380      	movcs	r3, #128	@ 0x80
 8002f12:	617b      	str	r3, [r7, #20]
		i2cdevReadReg16(I2C1, Address, current_address, p_values, current_chunk_size);
 8002f14:	8b3b      	ldrh	r3, [r7, #24]
 8002f16:	b2d9      	uxtb	r1, r3
 8002f18:	8b7a      	ldrh	r2, [r7, #26]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	480d      	ldr	r0, [pc, #52]	@ (8002f58 <RdMulti+0x70>)
 8002f22:	f7ff fe4b 	bl	8002bbc <i2cdevReadReg16>
		remaining_size-= current_chunk_size;
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	61fb      	str	r3, [r7, #28]
		current_address+=current_chunk_size;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	8b7b      	ldrh	r3, [r7, #26]
 8002f34:	4413      	add	r3, r2
 8002f36:	837b      	strh	r3, [r7, #26]
		p_values+= current_chunk_size;
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	607b      	str	r3, [r7, #4]
		LL_mDelay(10);
 8002f40:	200a      	movs	r0, #10
 8002f42:	f004 fd07 	bl	8007954 <LL_mDelay>
	while(remaining_size> 0){
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1de      	bne.n	8002f0a <RdMulti+0x22>
	}
	return 0;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40005400 	.word	0x40005400

08002f5c <SwapBuffer>:
}

void SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;

	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	e021      	b.n	8002fb2 <SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	440b      	add	r3, r1
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	041b      	lsls	r3, r3, #16
 8002f84:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3302      	adds	r3, #2
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	440b      	add	r3, r1
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	021b      	lsls	r3, r3, #8
 8002f92:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	3203      	adds	r2, #3
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	440a      	add	r2, r1
 8002f9c:	7812      	ldrb	r2, [r2, #0]
 8002f9e:	4313      	orrs	r3, r2
		tmp = (
 8002fa0:	60bb      	str	r3, [r7, #8]

		memcpy(&(buffer[i]), &tmp, 4);
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	887b      	ldrh	r3, [r7, #2]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d3d9      	bcc.n	8002f6e <SwapBuffer+0x12>
	}
}
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <WaitMs>:

uint8_t WaitMs(
		VL53L5CX_Platform *p_platform,
               uint32_t TimeMs)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
	osDelay(TimeMs);
 8002fd2:	6838      	ldr	r0, [r7, #0]
 8002fd4:	f004 fe06 	bl	8007be4 <osDelay>
	return 0;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	4608      	mov	r0, r1
 8002fec:	4611      	mov	r1, r2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	70fb      	strb	r3, [r7, #3]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70bb      	strb	r3, [r7, #2]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8003004:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= RdMulti(&(p_dev->platform), address,
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	8839      	ldrh	r1, [r7, #0]
 8003010:	f7ff ff6a 	bl	8002ee8 <RdMulti>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	4313      	orrs	r3, r2
 800301c:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	210a      	movs	r1, #10
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ffd0 	bl	8002fc8 <WaitMs>
 8003028:	4603      	mov	r3, r0
 800302a:	461a      	mov	r2, r3
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	4313      	orrs	r3, r2
 8003030:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8003032:	7bbb      	ldrb	r3, [r7, #14]
 8003034:	2bc7      	cmp	r3, #199	@ 0xc7
 8003036:	d904      	bls.n	8003042 <_vl53l5cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
			break;
 8003040:	e01a      	b.n	8003078 <_vl53l5cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d909      	bls.n	800305c <_vl53l5cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 800304e:	2b7e      	cmp	r3, #126	@ 0x7e
 8003050:	d904      	bls.n	800305c <_vl53l5cx_poll_for_answer+0x7a>
		{
			status |= VL53L5CX_MCU_ERROR;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003058:	73fb      	strb	r3, [r7, #15]
			break;
 800305a:	e00d      	b.n	8003078 <_vl53l5cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 800305c:	7bbb      	ldrb	r3, [r7, #14]
 800305e:	3301      	adds	r3, #1
 8003060:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8003062:	78bb      	ldrb	r3, [r7, #2]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	4413      	add	r3, r2
 8003068:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 800306c:	7e3b      	ldrb	r3, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	b2db      	uxtb	r3, r3
 8003072:	7f3a      	ldrb	r2, [r7, #28]
 8003074:	429a      	cmp	r2, r3
 8003076:	d1c5      	bne.n	8003004 <_vl53l5cx_poll_for_answer+0x22>

	return status;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f107 020b 	add.w	r2, r7, #11
 8003098:	2106      	movs	r1, #6
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff feae 	bl	8002dfc <RdByte>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 80030aa:	7afb      	ldrb	r3, [r7, #11]
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	da10      	bge.n	80030d4 <_vl53l5cx_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f107 020a 	add.w	r2, r7, #10
 80030b8:	2107      	movs	r1, #7
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fe9e 	bl	8002dfc <RdByte>
 80030c0:	4603      	mov	r3, r0
 80030c2:	461a      	mov	r2, r3
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 80030ca:	7aba      	ldrb	r2, [r7, #10]
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	73fb      	strb	r3, [r7, #15]
			break;
 80030d2:	e012      	b.n	80030fa <_vl53l5cx_poll_for_mcu_boot+0x78>
		}
		(void)WaitMs(&(p_dev->platform), 1);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2101      	movs	r1, #1
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff75 	bl	8002fc8 <WaitMs>
		timeout++;
 80030de:	89bb      	ldrh	r3, [r7, #12]
 80030e0:	3301      	adds	r3, #1
 80030e2:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 80030e4:	7afb      	ldrb	r3, [r7, #11]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d104      	bne.n	80030f8 <_vl53l5cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 80030ee:	89bb      	ldrh	r3, [r7, #12]
 80030f0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80030f4:	d3cd      	bcc.n	8003092 <_vl53l5cx_poll_for_mcu_boot+0x10>
 80030f6:	e000      	b.n	80030fa <_vl53l5cx_poll_for_mcu_boot+0x78>
			break;
 80030f8:	bf00      	nop

   return status;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b0ea      	sub	sp, #424	@ 0x1a8
 8003108:	af02      	add	r7, sp, #8
 800310a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800310e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003112:	6018      	str	r0, [r3, #0]
 8003114:	460a      	mov	r2, r1
 8003116:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800311a:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 800311e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8003126:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800312a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800312e:	4ad9      	ldr	r2, [pc, #868]	@ (8003494 <_vl53l5cx_send_offset_data+0x390>)
 8003130:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003134:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8003138:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800313c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003140:	4ad5      	ldr	r2, [pc, #852]	@ (8003498 <_vl53l5cx_send_offset_data+0x394>)
 8003142:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003146:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 800314a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800314e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 8003158:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800315c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3310      	adds	r3, #16
	(void)memcpy(p_dev->temp_buffer,
 8003164:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8003168:	4619      	mov	r1, r3
 800316a:	f007 ffc5 	bl	800b0f8 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 800316e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003172:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b10      	cmp	r3, #16
 800317a:	f040 8122 	bne.w	80033c2 <_vl53l5cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 800317e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003182:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 800318c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003190:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003194:	cb03      	ldmia	r3!, {r0, r1}
 8003196:	6010      	str	r0, [r2, #0]
 8003198:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 800319a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800319e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a8:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fed5 	bl	8002f5c <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 80031b2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80031b6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f203 513c 	addw	r1, r3, #1340	@ 0x53c
 80031c0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80031c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031c8:	4618      	mov	r0, r3
 80031ca:	f007 ff95 	bl	800b0f8 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 80031ce:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80031d2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f503 61c8 	add.w	r1, r3, #1600	@ 0x640
 80031dc:	f107 0318 	add.w	r3, r7, #24
 80031e0:	2280      	movs	r2, #128	@ 0x80
 80031e2:	4618      	mov	r0, r3
 80031e4:	f007 ff88 	bl	800b0f8 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 80031ee:	e0ac      	b.n	800334a <_vl53l5cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80031f0:	2300      	movs	r3, #0
 80031f2:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 80031f6:	e09c      	b.n	8003332 <_vl53l5cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 80031f8:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80031fc:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	005a      	lsls	r2, r3, #1
 8003206:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800320a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800320e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8003212:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003216:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	1c59      	adds	r1, r3, #1
 8003222:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800322a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800322e:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8003230:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003234:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	440b      	add	r3, r1
 800323c:	3304      	adds	r3, #4
 800323e:	0059      	lsls	r1, r3, #1
 8003240:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003248:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800324c:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 800324e:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003252:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	440b      	add	r3, r1
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	f103 0109 	add.w	r1, r3, #9
 8003260:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003268:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800326c:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800326e:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 8003272:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8003276:	0092      	lsls	r2, r2, #2
 8003278:	440a      	add	r2, r1
                                  /(uint32_t)4;
 800327a:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800327c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8003288:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 800328c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	005a      	lsls	r2, r3, #1
 8003296:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800329a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800329e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80032a2:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 80032a4:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80032a8:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80032b8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80032bc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80032c0:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 80032c2:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80032c6:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80032ca:	00d2      	lsls	r2, r2, #3
 80032cc:	440a      	add	r2, r1
 80032ce:	3204      	adds	r2, #4
 80032d0:	0051      	lsls	r1, r2, #1
 80032d2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80032d6:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80032da:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80032de:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 80032e0:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80032e4:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80032e8:	00d2      	lsls	r2, r2, #3
 80032ea:	440a      	add	r2, r1
 80032ec:	0052      	lsls	r2, r2, #1
 80032ee:	f102 0109 	add.w	r1, r2, #9
 80032f2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80032f6:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80032fa:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80032fe:	4413      	add	r3, r2
                                  /(int16_t)4;
 8003300:	2b00      	cmp	r3, #0
 8003302:	da00      	bge.n	8003306 <_vl53l5cx_send_offset_data+0x202>
 8003304:	3303      	adds	r3, #3
 8003306:	109b      	asrs	r3, r3, #2
 8003308:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 800330a:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 800330e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	441a      	add	r2, r3
 8003316:	b209      	sxth	r1, r1
 8003318:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800331c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003320:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8003324:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8003328:	b2db      	uxtb	r3, r3
 800332a:	3301      	adds	r3, #1
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8003332:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8003336:	2b03      	cmp	r3, #3
 8003338:	f77f af5e 	ble.w	80031f8 <_vl53l5cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 800333c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8003340:	b2db      	uxtb	r3, r3
 8003342:	3301      	adds	r3, #1
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 800334a:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800334e:	2b03      	cmp	r3, #3
 8003350:	f77f af4e 	ble.w	80031f0 <_vl53l5cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8003354:	f107 0318 	add.w	r3, r7, #24
 8003358:	3320      	adds	r3, #32
 800335a:	2260      	movs	r2, #96	@ 0x60
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f007 fe86 	bl	800b070 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8003364:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8003368:	3340      	adds	r3, #64	@ 0x40
 800336a:	22c0      	movs	r2, #192	@ 0xc0
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f007 fe7e 	bl	800b070 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8003374:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003378:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f203 533c 	addw	r3, r3, #1340	@ 0x53c
 8003382:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8003386:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800338a:	4618      	mov	r0, r3
 800338c:	f007 feb4 	bl	800b0f8 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8003390:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003394:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 800339e:	f107 0118 	add.w	r1, r7, #24
 80033a2:	2280      	movs	r2, #128	@ 0x80
 80033a4:	4618      	mov	r0, r3
 80033a6:	f007 fea7 	bl	800b0f8 <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 80033aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80033ae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b8:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fdcd 	bl	8002f5c <SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 80033c8:	e01b      	b.n	8003402 <_vl53l5cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 80033ca:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80033ce:	f103 0208 	add.w	r2, r3, #8
 80033d2:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80033d6:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 80033da:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 80033de:	6809      	ldr	r1, [r1, #0]
 80033e0:	440a      	add	r2, r1
 80033e2:	f892 1500 	ldrb.w	r1, [r2, #1280]	@ 0x500
 80033e6:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80033ea:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	4413      	add	r3, r2
 80033f2:	460a      	mov	r2, r1
 80033f4:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80033f8:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80033fc:	3301      	adds	r3, #1
 80033fe:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8003402:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8003406:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 800340a:	d3de      	bcc.n	80033ca <_vl53l5cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 800340c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003410:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f503 62dc 	add.w	r2, r3, #1760	@ 0x6e0
 800341a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800341e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003422:	cb03      	ldmia	r3!, {r0, r1}
 8003424:	6010      	str	r0, [r2, #0]
 8003426:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8003428:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800342c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8003436:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8003440:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8003444:	f642 6118 	movw	r1, #11800	@ 0x2e18
 8003448:	f7ff fd14 	bl	8002e74 <WrMulti>
 800344c:	4603      	mov	r3, r0
 800344e:	461a      	mov	r2, r3
 8003450:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8003454:	4313      	orrs	r3, r2
 8003456:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800345a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800345e:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8003462:	2303      	movs	r3, #3
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	23ff      	movs	r3, #255	@ 0xff
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800346e:	2201      	movs	r2, #1
 8003470:	2104      	movs	r1, #4
 8003472:	6800      	ldr	r0, [r0, #0]
 8003474:	f7ff fdb5 	bl	8002fe2 <_vl53l5cx_poll_for_answer>
 8003478:	4603      	mov	r3, r0
 800347a:	461a      	mov	r2, r3
 800347c:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8003480:	4313      	orrs	r3, r2
 8003482:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8003486:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 800348a:	4618      	mov	r0, r3
 800348c:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	0800bcd8 	.word	0x0800bcd8
 8003498:	0800bce0 	.word	0x0800bce0

0800349c <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b0ca      	sub	sp, #296	@ 0x128
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80034a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80034aa:	6018      	str	r0, [r3, #0]
 80034ac:	460a      	mov	r2, r1
 80034ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80034b2:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80034b6:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 80034be:	4a9a      	ldr	r2, [pc, #616]	@ (8003728 <_vl53l5cx_send_xtalk_data+0x28c>)
 80034c0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80034c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034c8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 80034cc:	4a97      	ldr	r2, [pc, #604]	@ (800372c <_vl53l5cx_send_xtalk_data+0x290>)
 80034ce:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80034d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034d6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 80034da:	4b95      	ldr	r3, [pc, #596]	@ (8003730 <_vl53l5cx_send_xtalk_data+0x294>)
 80034dc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 80034e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80034e4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
 80034ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80034f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80034fc:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8003500:	4619      	mov	r1, r3
 8003502:	f007 fdf9 	bl	800b0f8 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 8003506:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800350a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b10      	cmp	r3, #16
 8003512:	f040 80d2 	bne.w	80036ba <_vl53l5cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8003516:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800351a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8003524:	461a      	mov	r2, r3
 8003526:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800352a:	cb03      	ldmia	r3!, {r0, r1}
 800352c:	6010      	str	r0, [r2, #0]
 800352e:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8003530:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003534:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 800353e:	461a      	mov	r2, r3
 8003540:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8003544:	cb03      	ldmia	r3!, {r0, r1}
 8003546:	6010      	str	r0, [r2, #0]
 8003548:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800354a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800354e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003558:	f44f 7142 	mov.w	r1, #776	@ 0x308
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fcfd 	bl	8002f5c <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8003562:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003566:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f203 5134 	addw	r1, r3, #1332	@ 0x534
 8003570:	f107 0308 	add.w	r3, r7, #8
 8003574:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003578:	4618      	mov	r0, r3
 800357a:	f007 fdbd 	bl	800b0f8 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800357e:	2300      	movs	r3, #0
 8003580:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003584:	e05d      	b.n	8003642 <_vl53l5cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8003586:	2300      	movs	r3, #0
 8003588:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800358c:	e04e      	b.n	800362c <_vl53l5cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 800358e:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 8003592:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	005a      	lsls	r2, r3, #1
 800359c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80035a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80035a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 80035a8:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80035ac:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	440b      	add	r3, r1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	1c59      	adds	r1, r3, #1
 80035b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80035bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80035c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80035c4:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 80035c6:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80035ca:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	440b      	add	r3, r1
 80035d2:	3304      	adds	r3, #4
 80035d4:	0059      	lsls	r1, r3, #1
 80035d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80035da:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80035de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80035e2:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 80035e4:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 80035e8:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	440b      	add	r3, r1
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	f103 0109 	add.w	r1, r3, #9
 80035f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80035fa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80035fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003602:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8003604:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8003608:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 800360c:	0092      	lsls	r2, r2, #2
 800360e:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8003610:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8003612:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003616:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800361a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 800361e:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8003622:	b2db      	uxtb	r3, r3
 8003624:	3301      	adds	r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 800362c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8003630:	2b03      	cmp	r3, #3
 8003632:	ddac      	ble.n	800358e <_vl53l5cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8003634:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003638:	b2db      	uxtb	r3, r3
 800363a:	3301      	adds	r3, #1
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003642:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8003646:	2b03      	cmp	r3, #3
 8003648:	dd9d      	ble.n	8003586 <_vl53l5cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 800364a:	f107 0308 	add.w	r3, r7, #8
 800364e:	3340      	adds	r3, #64	@ 0x40
 8003650:	22c0      	movs	r2, #192	@ 0xc0
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f007 fd0b 	bl	800b070 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 800365a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800365e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f203 5334 	addw	r3, r3, #1332	@ 0x534
 8003668:	f107 0108 	add.w	r1, r7, #8
 800366c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003670:	4618      	mov	r0, r3
 8003672:	f007 fd41 	bl	800b0f8 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8003676:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800367a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003684:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fc67 	bl	8002f5c <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 800368e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003692:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 800369c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80036a0:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 80036a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80036a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 80036b0:	2204      	movs	r2, #4
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f007 fcdb 	bl	800b070 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 80036ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80036be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80036c2:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80036c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80036c8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 80036d2:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80036d6:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 80036da:	f7ff fbcb 	bl	8002e74 <WrMulti>
 80036de:	4603      	mov	r3, r0
 80036e0:	461a      	mov	r2, r3
 80036e2:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80036ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80036f0:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 80036f4:	2303      	movs	r3, #3
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	23ff      	movs	r3, #255	@ 0xff
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003700:	2201      	movs	r2, #1
 8003702:	2104      	movs	r1, #4
 8003704:	6800      	ldr	r0, [r0, #0]
 8003706:	f7ff fc6c 	bl	8002fe2 <_vl53l5cx_poll_for_answer>
 800370a:	4603      	mov	r3, r0
 800370c:	461a      	mov	r2, r3
 800370e:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8003712:	4313      	orrs	r3, r2
 8003714:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8003718:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 800371c:	4618      	mov	r0, r3
 800371e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	0800bce8 	.word	0x0800bce8
 800372c:	0800bcf0 	.word	0x0800bcf0
 8003730:	0001fca0 	.word	0x0001fca0

08003734 <vl53l5cx_is_alive>:

uint8_t vl53l5cx_is_alive(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_is_alive)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	73fb      	strb	r3, [r7, #15]
	uint8_t device_id, revision_id;

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fb72 	bl	8002e34 <WrByte>
 8003750:	4603      	mov	r3, r0
 8003752:	461a      	mov	r2, r3
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	4313      	orrs	r3, r2
 8003758:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0, &device_id);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f107 020e 	add.w	r2, r7, #14
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fb4a 	bl	8002dfc <RdByte>
 8003768:	4603      	mov	r3, r0
 800376a:	461a      	mov	r2, r3
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	4313      	orrs	r3, r2
 8003770:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 1, &revision_id);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f107 020d 	add.w	r2, r7, #13
 8003778:	2101      	movs	r1, #1
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fb3e 	bl	8002dfc <RdByte>
 8003780:	4603      	mov	r3, r0
 8003782:	461a      	mov	r2, r3
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	4313      	orrs	r3, r2
 8003788:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2202      	movs	r2, #2
 800378e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fb4e 	bl	8002e34 <WrByte>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	4313      	orrs	r3, r2
 80037a0:	73fb      	strb	r3, [r7, #15]

	if((device_id == (uint8_t)0xF0) && (revision_id == (uint8_t)0x02))
 80037a2:	7bbb      	ldrb	r3, [r7, #14]
 80037a4:	2bf0      	cmp	r3, #240	@ 0xf0
 80037a6:	d106      	bne.n	80037b6 <vl53l5cx_is_alive+0x82>
 80037a8:	7b7b      	ldrb	r3, [r7, #13]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d103      	bne.n	80037b6 <vl53l5cx_is_alive+0x82>
	{
		*p_is_alive = 1;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	e002      	b.n	80037bc <vl53l5cx_is_alive+0x88>
	}
	else
	{
		*p_is_alive = 0;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <vl53l5cx_init>:

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	@ 0x28
 80037cc:	af04      	add	r7, sp, #16
 80037ce:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80037d4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80037d8:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80037da:	2301      	movs	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a80      	ldr	r2, [pc, #512]	@ (80039e4 <vl53l5cx_init+0x21c>)
 80037e2:	60da      	str	r2, [r3, #12]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a80      	ldr	r2, [pc, #512]	@ (80039e8 <vl53l5cx_init+0x220>)
 80037e8:	609a      	str	r2, [r3, #8]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2aac 	strb.w	r2, [r3, #2732]	@ 0xaac

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fb1a 	bl	8002e34 <WrByte>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	4313      	orrs	r3, r2
 8003808:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2204      	movs	r2, #4
 800380e:	2109      	movs	r1, #9
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fb0f 	bl	8002e34 <WrByte>
 8003816:	4603      	mov	r3, r0
 8003818:	461a      	mov	r2, r3
 800381a:	7dfb      	ldrb	r3, [r7, #23]
 800381c:	4313      	orrs	r3, r2
 800381e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2240      	movs	r2, #64	@ 0x40
 8003824:	210f      	movs	r1, #15
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fb04 	bl	8002e34 <WrByte>
 800382c:	4603      	mov	r3, r0
 800382e:	461a      	mov	r2, r3
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	4313      	orrs	r3, r2
 8003834:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2203      	movs	r2, #3
 800383a:	210a      	movs	r1, #10
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff faf9 	bl	8002e34 <WrByte>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	7dfb      	ldrb	r3, [r7, #23]
 8003848:	4313      	orrs	r3, r2
 800384a:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f107 0216 	add.w	r2, r7, #22
 8003852:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff fad0 	bl	8002dfc <RdByte>
 800385c:	4603      	mov	r3, r0
 800385e:	461a      	mov	r2, r3
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	4313      	orrs	r3, r2
 8003864:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	210c      	movs	r1, #12
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fae1 	bl	8002e34 <WrByte>
 8003872:	4603      	mov	r3, r0
 8003874:	461a      	mov	r2, r3
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	4313      	orrs	r3, r2
 800387a:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f240 1101 	movw	r1, #257	@ 0x101
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff fad5 	bl	8002e34 <WrByte>
 800388a:	4603      	mov	r3, r0
 800388c:	461a      	mov	r2, r3
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	4313      	orrs	r3, r2
 8003892:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fac9 	bl	8002e34 <WrByte>
 80038a2:	4603      	mov	r3, r0
 80038a4:	461a      	mov	r2, r3
 80038a6:	7dfb      	ldrb	r3, [r7, #23]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fabd 	bl	8002e34 <WrByte>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f244 0102 	movw	r1, #16386	@ 0x4002
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fab1 	bl	8002e34 <WrByte>
 80038d2:	4603      	mov	r3, r0
 80038d4:	461a      	mov	r2, r3
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	4313      	orrs	r3, r2
 80038da:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f244 0102 	movw	r1, #16386	@ 0x4002
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff faa5 	bl	8002e34 <WrByte>
 80038ea:	4603      	mov	r3, r0
 80038ec:	461a      	mov	r2, r3
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2203      	movs	r2, #3
 80038f8:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fa99 	bl	8002e34 <WrByte>
 8003902:	4603      	mov	r3, r0
 8003904:	461a      	mov	r2, r3
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	4313      	orrs	r3, r2
 800390a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f240 1103 	movw	r1, #259	@ 0x103
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fa8d 	bl	8002e34 <WrByte>
 800391a:	4603      	mov	r3, r0
 800391c:	461a      	mov	r2, r3
 800391e:	7dfb      	ldrb	r3, [r7, #23]
 8003920:	4313      	orrs	r3, r2
 8003922:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	210c      	movs	r1, #12
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fa82 	bl	8002e34 <WrByte>
 8003930:	4603      	mov	r3, r0
 8003932:	461a      	mov	r2, r3
 8003934:	7dfb      	ldrb	r3, [r7, #23]
 8003936:	4313      	orrs	r3, r2
 8003938:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2243      	movs	r2, #67	@ 0x43
 800393e:	210f      	movs	r1, #15
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fa77 	bl	8002e34 <WrByte>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	7dfb      	ldrb	r3, [r7, #23]
 800394c:	4313      	orrs	r3, r2
 800394e:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2101      	movs	r1, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fb37 	bl	8002fc8 <WaitMs>
 800395a:	4603      	mov	r3, r0
 800395c:	461a      	mov	r2, r3
 800395e:	7dfb      	ldrb	r3, [r7, #23]
 8003960:	4313      	orrs	r3, r2
 8003962:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2240      	movs	r2, #64	@ 0x40
 8003968:	210f      	movs	r1, #15
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff fa62 	bl	8002e34 <WrByte>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	4313      	orrs	r3, r2
 8003978:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	210a      	movs	r1, #10
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fa57 	bl	8002e34 <WrByte>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	4313      	orrs	r3, r2
 800398e:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2164      	movs	r1, #100	@ 0x64
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fb17 	bl	8002fc8 <WaitMs>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	7dfb      	ldrb	r3, [r7, #23]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fa41 	bl	8002e34 <WrByte>
 80039b2:	4603      	mov	r3, r0
 80039b4:	461a      	mov	r2, r3
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 80039bc:	2301      	movs	r3, #1
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	23ff      	movs	r3, #255	@ 0xff
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2306      	movs	r3, #6
 80039c6:	2200      	movs	r2, #0
 80039c8:	2101      	movs	r1, #1
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff fb09 	bl	8002fe2 <_vl53l5cx_poll_for_answer>
 80039d0:	4603      	mov	r3, r0
 80039d2:	461a      	mov	r2, r3
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80039da:	7dfb      	ldrb	r3, [r7, #23]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f040 8354 	bne.w	800408a <vl53l5cx_init+0x8c2>
 80039e2:	e003      	b.n	80039ec <vl53l5cx_init+0x224>
 80039e4:	080211ac 	.word	0x080211ac
 80039e8:	08020de0 	.word	0x08020de0
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	210e      	movs	r1, #14
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fa1e 	bl	8002e34 <WrByte>
 80039f8:	4603      	mov	r3, r0
 80039fa:	461a      	mov	r2, r3
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fa12 	bl	8002e34 <WrByte>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	220d      	movs	r2, #13
 8003a1e:	2103      	movs	r1, #3
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fa07 	bl	8002e34 <WrByte>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff f9fb 	bl	8002e34 <WrByte>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	461a      	mov	r2, r3
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8003a48:	2310      	movs	r3, #16
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2321      	movs	r3, #33	@ 0x21
 8003a52:	2200      	movs	r2, #0
 8003a54:	2101      	movs	r1, #1
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff fac3 	bl	8002fe2 <_vl53l5cx_poll_for_answer>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff f9e0 	bl	8002e34 <WrByte>
 8003a74:	4603      	mov	r3, r0
 8003a76:	461a      	mov	r2, r3
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f107 0216 	add.w	r2, r7, #22
 8003a84:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff f9b7 	bl	8002dfc <RdByte>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	210c      	movs	r1, #12
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff f9c8 	bl	8002e34 <WrByte>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff f9bc 	bl	8002e34 <WrByte>
 8003abc:	4603      	mov	r3, r0
 8003abe:	461a      	mov	r2, r3
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f240 1101 	movw	r1, #257	@ 0x101
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff f9b0 	bl	8002e34 <WrByte>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff f9a4 	bl	8002e34 <WrByte>
 8003aec:	4603      	mov	r3, r0
 8003aee:	461a      	mov	r2, r3
 8003af0:	7dfb      	ldrb	r3, [r7, #23]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff f998 	bl	8002e34 <WrByte>
 8003b04:	4603      	mov	r3, r0
 8003b06:	461a      	mov	r2, r3
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f244 0102 	movw	r1, #16386	@ 0x4002
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff f98c 	bl	8002e34 <WrByte>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	461a      	mov	r2, r3
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f244 0102 	movw	r1, #16386	@ 0x4002
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff f980 	bl	8002e34 <WrByte>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461a      	mov	r2, r3
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2203      	movs	r2, #3
 8003b42:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff f974 	bl	8002e34 <WrByte>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	461a      	mov	r2, r3
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f240 1103 	movw	r1, #259	@ 0x103
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff f968 	bl	8002e34 <WrByte>
 8003b64:	4603      	mov	r3, r0
 8003b66:	461a      	mov	r2, r3
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f244 010f 	movw	r1, #16399	@ 0x400f
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff f95c 	bl	8002e34 <WrByte>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2243      	movs	r2, #67	@ 0x43
 8003b8a:	f240 211a 	movw	r1, #538	@ 0x21a
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff f950 	bl	8002e34 <WrByte>
 8003b94:	4603      	mov	r3, r0
 8003b96:	461a      	mov	r2, r3
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	f240 211a 	movw	r1, #538	@ 0x21a
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff f944 	bl	8002e34 <WrByte>
 8003bac:	4603      	mov	r3, r0
 8003bae:	461a      	mov	r2, r3
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f240 211a 	movw	r1, #538	@ 0x21a
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff f938 	bl	8002e34 <WrByte>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f240 211a 	movw	r1, #538	@ 0x21a
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff f92c 	bl	8002e34 <WrByte>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461a      	mov	r2, r3
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f240 2119 	movw	r1, #537	@ 0x219
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff f920 	bl	8002e34 <WrByte>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f240 211b 	movw	r1, #539	@ 0x21b
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff f914 	bl	8002e34 <WrByte>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	461a      	mov	r2, r3
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff f908 	bl	8002e34 <WrByte>
 8003c24:	4603      	mov	r3, r0
 8003c26:	461a      	mov	r2, r3
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f107 0216 	add.w	r2, r7, #22
 8003c34:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff f8df 	bl	8002dfc <RdByte>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	461a      	mov	r2, r3
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	210c      	movs	r1, #12
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff f8f0 	bl	8002e34 <WrByte>
 8003c54:	4603      	mov	r3, r0
 8003c56:	461a      	mov	r2, r3
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff f8e4 	bl	8002e34 <WrByte>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	461a      	mov	r2, r3
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2207      	movs	r2, #7
 8003c7a:	2120      	movs	r1, #32
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff f8d9 	bl	8002e34 <WrByte>
 8003c82:	4603      	mov	r3, r0
 8003c84:	461a      	mov	r2, r3
 8003c86:	7dfb      	ldrb	r3, [r7, #23]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2206      	movs	r2, #6
 8003c90:	2120      	movs	r1, #32
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff f8ce 	bl	8002e34 <WrByte>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2209      	movs	r2, #9
 8003ca6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff f8c2 	bl	8002e34 <WrByte>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cc0:	4ae1      	ldr	r2, [pc, #900]	@ (8004048 <vl53l5cx_init+0x880>)
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	f7ff f8d6 	bl	8002e74 <WrMulti>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	461a      	mov	r2, r3
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	220a      	movs	r2, #10
 8003cd6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff f8aa 	bl	8002e34 <WrByte>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	7dfb      	ldrb	r3, [r7, #23]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cf0:	4ad6      	ldr	r2, [pc, #856]	@ (800404c <vl53l5cx_init+0x884>)
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	f7ff f8be 	bl	8002e74 <WrMulti>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	220b      	movs	r2, #11
 8003d06:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff f892 	bl	8002e34 <WrByte>
 8003d10:	4603      	mov	r3, r0
 8003d12:	461a      	mov	r2, r3
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8003d20:	4acb      	ldr	r2, [pc, #812]	@ (8004050 <vl53l5cx_init+0x888>)
 8003d22:	2100      	movs	r1, #0
 8003d24:	f7ff f8a6 	bl	8002e74 <WrMulti>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff f87a 	bl	8002e34 <WrByte>
 8003d40:	4603      	mov	r3, r0
 8003d42:	461a      	mov	r2, r3
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff f86e 	bl	8002e34 <WrByte>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	220d      	movs	r2, #13
 8003d66:	2103      	movs	r1, #3
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff f863 	bl	8002e34 <WrByte>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	461a      	mov	r2, r3
 8003d72:	7dfb      	ldrb	r3, [r7, #23]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff f857 	bl	8002e34 <WrByte>
 8003d86:	4603      	mov	r3, r0
 8003d88:	461a      	mov	r2, r3
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8003d90:	2310      	movs	r3, #16
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	2310      	movs	r3, #16
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	2321      	movs	r3, #33	@ 0x21
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff f91f 	bl	8002fe2 <_vl53l5cx_poll_for_answer>
 8003da4:	4603      	mov	r3, r0
 8003da6:	461a      	mov	r2, r3
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f040 816c 	bne.w	800408e <vl53l5cx_init+0x8c6>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff f838 	bl	8002e34 <WrByte>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f107 0216 	add.w	r2, r7, #22
 8003dd4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff f80f 	bl	8002dfc <RdByte>
 8003dde:	4603      	mov	r3, r0
 8003de0:	461a      	mov	r2, r3
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	210c      	movs	r1, #12
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff f820 	bl	8002e34 <WrByte>
 8003df4:	4603      	mov	r3, r0
 8003df6:	461a      	mov	r2, r3
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff f814 	bl	8002e34 <WrByte>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	461a      	mov	r2, r3
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff f808 	bl	8002e34 <WrByte>
 8003e24:	4603      	mov	r3, r0
 8003e26:	461a      	mov	r2, r3
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f240 1115 	movw	r1, #277	@ 0x115
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe fffc 	bl	8002e34 <WrByte>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	461a      	mov	r2, r3
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2242      	movs	r2, #66	@ 0x42
 8003e4a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe fff0 	bl	8002e34 <WrByte>
 8003e54:	4603      	mov	r3, r0
 8003e56:	461a      	mov	r2, r3
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f240 1117 	movw	r1, #279	@ 0x117
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe ffe4 	bl	8002e34 <WrByte>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	210b      	movs	r1, #11
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe ffd9 	bl	8002e34 <WrByte>
 8003e82:	4603      	mov	r3, r0
 8003e84:	461a      	mov	r2, r3
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f107 0216 	add.w	r2, r7, #22
 8003e92:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe ffb0 	bl	8002dfc <RdByte>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	210c      	movs	r1, #12
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fe ffc1 	bl	8002e34 <WrByte>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	7dfb      	ldrb	r3, [r7, #23]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	210b      	movs	r1, #11
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe ffb6 	bl	8002e34 <WrByte>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	461a      	mov	r2, r3
 8003ecc:	7dfb      	ldrb	r3, [r7, #23]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff f8d5 	bl	8003082 <_vl53l5cx_poll_for_mcu_boot>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f040 80d4 	bne.w	8004092 <vl53l5cx_init+0x8ca>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe ff9e 	bl	8002e34 <WrByte>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	2328      	movs	r3, #40	@ 0x28
 8003f06:	4a53      	ldr	r2, [pc, #332]	@ (8004054 <vl53l5cx_init+0x88c>)
 8003f08:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8003f0c:	f7fe ffb2 	bl	8002e74 <WrMulti>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461a      	mov	r2, r3
 8003f14:	7dfb      	ldrb	r3, [r7, #23]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	23ff      	movs	r3, #255	@ 0xff
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003f26:	2200      	movs	r2, #0
 8003f28:	2104      	movs	r1, #4
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff f859 	bl	8002fe2 <_vl53l5cx_poll_for_answer>
 8003f30:	4603      	mov	r3, r0
 8003f32:	461a      	mov	r2, r3
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8003f3a:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8003f42:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8003f46:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8003f4a:	f7fe ffcd 	bl	8002ee8 <RdMulti>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	461a      	mov	r2, r3
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f103 0010 	add.w	r0, r3, #16
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f64:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f007 f8c5 	bl	800b0f8 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8003f6e:	2110      	movs	r1, #16
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff f8c7 	bl	8003104 <_vl53l5cx_send_offset_data>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003f86:	4a34      	ldr	r2, [pc, #208]	@ (8004058 <vl53l5cx_init+0x890>)
 8003f88:	4618      	mov	r0, r3
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8003f90:	461a      	mov	r2, r3
 8003f92:	f007 f8b1 	bl	800b0f8 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8003f96:	2110      	movs	r1, #16
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff fa7f 	bl	800349c <_vl53l5cx_send_xtalk_data>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	7dfb      	ldrb	r3, [r7, #23]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 8003fb2:	f642 4134 	movw	r1, #11316	@ 0x2c34
 8003fb6:	f7fe ff5d 	bl	8002e74 <WrMulti>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	23ff      	movs	r3, #255	@ 0xff
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	2104      	movs	r1, #4
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff f804 	bl	8002fe2 <_vl53l5cx_poll_for_answer>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	461a      	mov	r2, r3
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8003fe4:	f107 0110 	add.w	r1, r7, #16
 8003fe8:	2304      	movs	r3, #4
 8003fea:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fe98 	bl	8004d24 <vl53l5cx_dci_write_data>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8003ffe:	f107 010c 	add.w	r1, r7, #12
 8004002:	2304      	movs	r3, #4
 8004004:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fe8b 	bl	8004d24 <vl53l5cx_dci_write_data>
 800400e:	4603      	mov	r3, r0
 8004010:	461a      	mov	r2, r3
 8004012:	7dfb      	ldrb	r3, [r7, #23]
 8004014:	4313      	orrs	r3, r2
 8004016:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 8004018:	2301      	movs	r3, #1
 800401a:	75bb      	strb	r3, [r7, #22]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8004022:	2326      	movs	r3, #38	@ 0x26
 8004024:	9302      	str	r3, [sp, #8]
 8004026:	2301      	movs	r3, #1
 8004028:	9301      	str	r3, [sp, #4]
 800402a:	f107 0316 	add.w	r3, r7, #22
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2328      	movs	r3, #40	@ 0x28
 8004032:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 ff12 	bl	8004e60 <vl53l5cx_dci_replace_data>
 800403c:	4603      	mov	r3, r0
 800403e:	461a      	mov	r2, r3
 8004040:	7dfb      	ldrb	r3, [r7, #23]
 8004042:	4313      	orrs	r3, r2
 8004044:	e00a      	b.n	800405c <vl53l5cx_init+0x894>
 8004046:	bf00      	nop
 8004048:	0800bde0 	.word	0x0800bde0
 800404c:	08013de0 	.word	0x08013de0
 8004050:	0801bde0 	.word	0x0801bde0
 8004054:	080214b4 	.word	0x080214b4
 8004058:	080211ac 	.word	0x080211ac
 800405c:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8004064:	2325      	movs	r3, #37	@ 0x25
 8004066:	9302      	str	r3, [sp, #8]
 8004068:	2301      	movs	r3, #1
 800406a:	9301      	str	r3, [sp, #4]
 800406c:	f107 0316 	add.w	r3, r7, #22
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	2328      	movs	r3, #40	@ 0x28
 8004074:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fef1 	bl	8004e60 <vl53l5cx_dci_replace_data>
 800407e:	4603      	mov	r3, r0
 8004080:	461a      	mov	r2, r3
 8004082:	7dfb      	ldrb	r3, [r7, #23]
 8004084:	4313      	orrs	r3, r2
 8004086:	75fb      	strb	r3, [r7, #23]
 8004088:	e004      	b.n	8004094 <vl53l5cx_init+0x8cc>
		goto exit;
 800408a:	bf00      	nop
 800408c:	e002      	b.n	8004094 <vl53l5cx_init+0x8cc>
		goto exit;
 800408e:	bf00      	nop
 8004090:	e000      	b.n	8004094 <vl53l5cx_init+0x8cc>
		goto exit;
 8004092:	bf00      	nop
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 8004094:	7dfb      	ldrb	r3, [r7, #23]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop

080040a0 <vl53l5cx_set_i2c_address>:

uint8_t vl53l5cx_set_i2c_address(
		VL53L5CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe febb 	bl	8002e34 <WrByte>
 80040be:	4603      	mov	r3, r0
 80040c0:	461a      	mov	r2, r3
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	887b      	ldrh	r3, [r7, #2]
 80040cc:	085b      	lsrs	r3, r3, #1
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	2104      	movs	r1, #4
 80040d6:	f7fe fead 	bl	8002e34 <WrByte>
 80040da:	4603      	mov	r3, r0
 80040dc:	461a      	mov	r2, r3
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	887a      	ldrh	r2, [r7, #2]
 80040e8:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2202      	movs	r2, #2
 80040ee:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fe9e 	bl	8002e34 <WrByte>
 80040f8:	4603      	mov	r3, r0
 80040fa:	461a      	mov	r2, r3
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	4313      	orrs	r3, r2
 8004100:	73fb      	strb	r3, [r7, #15]

	return status;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <vl53l5cx_start_ranging>:
	return status;
}

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 800410c:	b5b0      	push	{r4, r5, r7, lr}
 800410e:	b09c      	sub	sp, #112	@ 0x70
 8004110:	af02      	add	r7, sp, #8
 8004112:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 800411a:	2300      	movs	r3, #0
 800411c:	653b      	str	r3, [r7, #80]	@ 0x50
 800411e:	2300      	movs	r3, #0
 8004120:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8004122:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004126:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8004128:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fbd0 	bl	80048d4 <vl53l5cx_get_resolution>
 8004134:	4603      	mov	r3, r0
 8004136:	461a      	mov	r2, r3
 8004138:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800413c:	4313      	orrs	r3, r2
 800413e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	605a      	str	r2, [r3, #4]
	p_dev->streamcount = 255;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	22ff      	movs	r2, #255	@ 0xff
 800414c:	709a      	strb	r2, [r3, #2]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 800414e:	4baa      	ldr	r3, [pc, #680]	@ (80043f8 <vl53l5cx_start_ranging+0x2ec>)
 8004150:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8004154:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004156:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 800415a:	4ba8      	ldr	r3, [pc, #672]	@ (80043fc <vl53l5cx_start_ranging+0x2f0>)
 800415c:	f107 040c 	add.w	r4, r7, #12
 8004160:	461d      	mov	r5, r3
 8004162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800416a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800416e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8004172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004174:	3308      	adds	r3, #8
 8004176:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8004178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800417a:	3310      	adds	r3, #16
 800417c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 800417e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004180:	3320      	adds	r3, #32
 8004182:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8004184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004186:	3340      	adds	r3, #64	@ 0x40
 8004188:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 800418a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800418c:	3380      	adds	r3, #128	@ 0x80
 800418e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8004190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004192:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004196:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8004198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800419a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800419e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 80041a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 80041a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80041b0:	2300      	movs	r3, #0
 80041b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80041b4:	e073      	b.n	800429e <vl53l5cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 80041b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	3368      	adds	r3, #104	@ 0x68
 80041bc:	443b      	add	r3, r7
 80041be:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d067      	beq.n	8004296 <vl53l5cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 80041c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	3368      	adds	r3, #104	@ 0x68
 80041ce:	443b      	add	r3, r7
 80041d0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 80041d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041d6:	f003 031f 	and.w	r3, r3, #31
 80041da:	fa22 f303 	lsr.w	r3, r2, r3
 80041de:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d057      	beq.n	8004296 <vl53l5cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 80041e6:	f107 020c 	add.w	r2, r7, #12
 80041ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 80041f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d03a      	beq.n	8004276 <vl53l5cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8004200:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b0c      	cmp	r3, #12
 800420c:	d833      	bhi.n	8004276 <vl53l5cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 800420e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004210:	885b      	ldrh	r3, [r3, #2]
 8004212:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 8004216:	4293      	cmp	r3, r2
 8004218:	d910      	bls.n	800423c <vl53l5cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 800421a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800421c:	885b      	ldrh	r3, [r3, #2]
 800421e:	f645 028f 	movw	r2, #22671	@ 0x588f
 8004222:	4293      	cmp	r3, r2
 8004224:	d80a      	bhi.n	800423c <vl53l5cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 8004226:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800422a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800422e:	b299      	uxth	r1, r3
 8004230:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004232:	8813      	ldrh	r3, [r2, #0]
 8004234:	f361 130f 	bfi	r3, r1, #4, #12
 8004238:	8013      	strh	r3, [r2, #0]
 800423a:	e009      	b.n	8004250 <vl53l5cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 800423c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004244:	b299      	uxth	r1, r3
 8004246:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004248:	8813      	ldrh	r3, [r2, #0]
 800424a:	f361 130f 	bfi	r3, r1, #4, #12
 800424e:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004256:	7812      	ldrb	r2, [r2, #0]
 8004258:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	4611      	mov	r1, r2
 8004260:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004262:	8812      	ldrh	r2, [r2, #0]
 8004264:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8004268:	b292      	uxth	r2, r2
 800426a:	fb01 f202 	mul.w	r2, r1, r2
 800426e:	441a      	add	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	605a      	str	r2, [r3, #4]
 8004274:	e009      	b.n	800428a <vl53l5cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800427c:	8812      	ldrh	r2, [r2, #0]
 800427e:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8004282:	b292      	uxth	r2, r2
 8004284:	441a      	add	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	605a      	str	r2, [r3, #4]
		}
		p_dev->data_read_size += (uint32_t)4;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	1d1a      	adds	r2, r3, #4
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	605a      	str	r2, [r3, #4]
 8004294:	e000      	b.n	8004298 <vl53l5cx_start_ranging+0x18c>
			continue;
 8004296:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8004298:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800429a:	3301      	adds	r3, #1
 800429c:	663b      	str	r3, [r7, #96]	@ 0x60
 800429e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042a0:	2b0b      	cmp	r3, #11
 80042a2:	d988      	bls.n	80041b6 <vl53l5cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f103 0218 	add.w	r2, r3, #24
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	605a      	str	r2, [r3, #4]

	status |= vl53l5cx_dci_write_data(p_dev,
 80042b0:	f107 010c 	add.w	r1, r7, #12
 80042b4:	2330      	movs	r3, #48	@ 0x30
 80042b6:	f64d 1280 	movw	r2, #55680	@ 0xd980
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fd32 	bl	8004d24 <vl53l5cx_dci_write_data>
 80042c0:	4603      	mov	r3, r0
 80042c2:	461a      	mov	r2, r3
 80042c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 80042d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042d6:	3301      	adds	r3, #1
 80042d8:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l5cx_dci_write_data(p_dev,
 80042da:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80042de:	2308      	movs	r3, #8
 80042e0:	f64d 1268 	movw	r2, #55656	@ 0xd968
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fd1d 	bl	8004d24 <vl53l5cx_dci_write_data>
 80042ea:	4603      	mov	r3, r0
 80042ec:	461a      	mov	r2, r3
 80042ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 80042f8:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80042fc:	2310      	movs	r3, #16
 80042fe:	f64d 1270 	movw	r2, #55664	@ 0xd970
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fd0e 	bl	8004d24 <vl53l5cx_dci_write_data>
 8004308:	4603      	mov	r3, r0
 800430a:	461a      	mov	r2, r3
 800430c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004310:	4313      	orrs	r3, r2
 8004312:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fd88 	bl	8002e34 <WrByte>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800432c:	4313      	orrs	r3, r2
 800432e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2205      	movs	r2, #5
 8004336:	2109      	movs	r1, #9
 8004338:	4618      	mov	r0, r3
 800433a:	f7fe fd7b 	bl	8002e34 <WrByte>
 800433e:	4603      	mov	r3, r0
 8004340:	461a      	mov	r2, r3
 8004342:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004346:	4313      	orrs	r3, r2
 8004348:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe fd6d 	bl	8002e34 <WrByte>
 800435a:	4603      	mov	r3, r0
 800435c:	461a      	mov	r2, r3
 800435e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004362:	4313      	orrs	r3, r2
 8004364:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800436e:	2304      	movs	r3, #4
 8004370:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8004374:	f7fe fd7e 	bl	8002e74 <WrMulti>
 8004378:	4603      	mov	r3, r0
 800437a:	461a      	mov	r2, r3
 800437c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004380:	4313      	orrs	r3, r2
 8004382:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8004386:	2303      	movs	r3, #3
 8004388:	9301      	str	r3, [sp, #4]
 800438a:	23ff      	movs	r3, #255	@ 0xff
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004392:	2201      	movs	r2, #1
 8004394:	2104      	movs	r1, #4
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fe fe23 	bl	8002fe2 <_vl53l5cx_poll_for_answer>
 800439c:	4603      	mov	r3, r0
 800439e:	461a      	mov	r2, r3
 80043a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
	status |= vl53l5cx_dci_read_data(p_dev,
 80043b0:	230c      	movs	r3, #12
 80043b2:	f245 4240 	movw	r2, #21568	@ 0x5440
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fc2a 	bl	8004c10 <vl53l5cx_dci_read_data>
 80043bc:	4603      	mov	r3, r0
 80043be:	461a      	mov	r2, r3
 80043c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 80043d8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80043dc:	461a      	mov	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d002      	beq.n	80043ec <vl53l5cx_start_ranging+0x2e0>
	{
		status |= VL53L5CX_STATUS_ERROR;
 80043e6:	23ff      	movs	r3, #255	@ 0xff
 80043e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 80043ec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3768      	adds	r7, #104	@ 0x68
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bdb0      	pop	{r4, r5, r7, pc}
 80043f8:	0800bcf8 	.word	0x0800bcf8
 80043fc:	0800bd08 	.word	0x0800bd08

08004400 <vl53l5cx_check_data_ready>:
}

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	73fb      	strb	r3, [r7, #15]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8004416:	2304      	movs	r3, #4
 8004418:	2100      	movs	r1, #0
 800441a:	f7fe fd65 	bl	8002ee8 <RdMulti>
 800441e:	4603      	mov	r3, r0
 8004420:	461a      	mov	r2, r3
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	4313      	orrs	r3, r2
 8004426:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	789b      	ldrb	r3, [r3, #2]
 8004432:	429a      	cmp	r2, r3
 8004434:	d020      	beq.n	8004478 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 800443c:	2bff      	cmp	r3, #255	@ 0xff
 800443e:	d01b      	beq.n	8004478 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 8004446:	2b05      	cmp	r3, #5
 8004448:	d116      	bne.n	8004478 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 8004450:	f003 0305 	and.w	r3, r3, #5
 8004454:	2b05      	cmp	r3, #5
 8004456:	d10f      	bne.n	8004478 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	d008      	beq.n	8004478 <vl53l5cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2201      	movs	r2, #1
 800446a:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	709a      	strb	r2, [r3, #2]
 8004476:	e00e      	b.n	8004496 <vl53l5cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 800447e:	b25b      	sxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	da05      	bge.n	8004490 <vl53l5cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 2502 	ldrb.w	r2, [r3, #1282]	@ 0x502
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	4313      	orrs	r3, r2
 800448e:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8004496:	7bfb      	ldrb	r3, [r7, #15]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= RdMulti(&(p_dev->platform), 0x0,
 80044ae:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= RdMulti(&(p_dev->platform), 0x0,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2100      	movs	r1, #0
 80044bc:	f7fe fd14 	bl	8002ee8 <RdMulti>
 80044c0:	4603      	mov	r3, r0
 80044c2:	461a      	mov	r2, r3
 80044c4:	7ffb      	ldrb	r3, [r7, #31]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	709a      	strb	r2, [r3, #2]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	4619      	mov	r1, r3
 80044e2:	4610      	mov	r0, r2
 80044e4:	f7fe fd3a 	bl	8002f5c <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 80044e8:	2310      	movs	r3, #16
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	e10e      	b.n	800470c <vl53l5cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	4413      	add	r3, r2
 80044f8:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d915      	bls.n	8004534 <vl53l5cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d80e      	bhi.n	8004534 <vl53l5cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800452a:	b29b      	uxth	r3, r3
 800452c:	fb02 f303 	mul.w	r3, r2, r3
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	e005      	b.n	8004540 <vl53l5cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800453c:	b29b      	uxth	r3, r3
 800453e:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	885b      	ldrh	r3, [r3, #2]
 8004544:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8004548:	4293      	cmp	r3, r2
 800454a:	f000 80bb 	beq.w	80046c4 <vl53l5cx_get_ranging_data+0x224>
 800454e:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8004552:	4293      	cmp	r3, r2
 8004554:	f300 80d2 	bgt.w	80046fc <vl53l5cx_get_ranging_data+0x25c>
 8004558:	f24e 0244 	movw	r2, #57412	@ 0xe044
 800455c:	4293      	cmp	r3, r2
 800455e:	f000 80a3 	beq.w	80046a8 <vl53l5cx_get_ranging_data+0x208>
 8004562:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8004566:	4293      	cmp	r3, r2
 8004568:	f300 80c8 	bgt.w	80046fc <vl53l5cx_get_ranging_data+0x25c>
 800456c:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8004570:	4293      	cmp	r3, r2
 8004572:	f000 808b 	beq.w	800468c <vl53l5cx_get_ranging_data+0x1ec>
 8004576:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 800457a:	4293      	cmp	r3, r2
 800457c:	f300 80be 	bgt.w	80046fc <vl53l5cx_get_ranging_data+0x25c>
 8004580:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8004584:	4293      	cmp	r3, r2
 8004586:	d073      	beq.n	8004670 <vl53l5cx_get_ranging_data+0x1d0>
 8004588:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 800458c:	4293      	cmp	r3, r2
 800458e:	f300 80b5 	bgt.w	80046fc <vl53l5cx_get_ranging_data+0x25c>
 8004592:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8004596:	4293      	cmp	r3, r2
 8004598:	d05c      	beq.n	8004654 <vl53l5cx_get_ranging_data+0x1b4>
 800459a:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 800459e:	4293      	cmp	r3, r2
 80045a0:	f300 80ac 	bgt.w	80046fc <vl53l5cx_get_ranging_data+0x25c>
 80045a4:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d045      	beq.n	8004638 <vl53l5cx_get_ranging_data+0x198>
 80045ac:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 80045b0:	4293      	cmp	r3, r2
 80045b2:	f300 80a3 	bgt.w	80046fc <vl53l5cx_get_ranging_data+0x25c>
 80045b6:	f64d 0258 	movw	r2, #55384	@ 0xd858
 80045ba:	4293      	cmp	r3, r2
 80045bc:	f000 8090 	beq.w	80046e0 <vl53l5cx_get_ranging_data+0x240>
 80045c0:	f64d 0258 	movw	r2, #55384	@ 0xd858
 80045c4:	4293      	cmp	r3, r2
 80045c6:	f300 8099 	bgt.w	80046fc <vl53l5cx_get_ranging_data+0x25c>
 80045ca:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d024      	beq.n	800461c <vl53l5cx_get_ranging_data+0x17c>
 80045d2:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 80045d6:	4293      	cmp	r3, r2
 80045d8:	f300 8090 	bgt.w	80046fc <vl53l5cx_get_ranging_data+0x25c>
 80045dc:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d004      	beq.n	80045ee <vl53l5cx_get_ranging_data+0x14e>
 80045e4:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00a      	beq.n	8004602 <vl53l5cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80045ec:	e086      	b.n	80046fc <vl53l5cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	330c      	adds	r3, #12
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 80045fa:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	701a      	strb	r2, [r3, #0]
				break;
 8004600:	e07d      	b.n	80046fe <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	3304      	adds	r3, #4
 800460a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4619      	mov	r1, r3
 8004616:	f006 fd6f 	bl	800b0f8 <memcpy>
				break;
 800461a:	e070      	b.n	80046fe <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	3304      	adds	r3, #4
 8004626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4619      	mov	r1, r3
 8004632:	f006 fd61 	bl	800b0f8 <memcpy>
				break;
 8004636:	e062      	b.n	80046fe <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	3304      	adds	r3, #4
 8004642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4619      	mov	r1, r3
 800464e:	f006 fd53 	bl	800b0f8 <memcpy>
				break;
 8004652:	e054      	b.n	80046fe <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	3304      	adds	r3, #4
 800465e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4619      	mov	r1, r3
 800466a:	f006 fd45 	bl	800b0f8 <memcpy>
				break;
 800466e:	e046      	b.n	80046fe <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	3304      	adds	r3, #4
 800467a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4619      	mov	r1, r3
 8004686:	f006 fd37 	bl	800b0f8 <memcpy>
				break;
 800468a:	e038      	b.n	80046fe <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	3304      	adds	r3, #4
 8004696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4619      	mov	r1, r3
 80046a2:	f006 fd29 	bl	800b0f8 <memcpy>
				break;
 80046a6:	e02a      	b.n	80046fe <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	3304      	adds	r3, #4
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4619      	mov	r1, r3
 80046be:	f006 fd1b 	bl	800b0f8 <memcpy>
				break;
 80046c2:	e01c      	b.n	80046fe <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	3304      	adds	r3, #4
 80046ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4619      	mov	r1, r3
 80046da:	f006 fd0d 	bl	800b0f8 <memcpy>
				break;
 80046de:	e00e      	b.n	80046fe <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	3304      	adds	r3, #4
 80046ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4619      	mov	r1, r3
 80046f6:	f006 fcff 	bl	800b0f8 <memcpy>
				break;
 80046fa:	e000      	b.n	80046fe <vl53l5cx_get_ranging_data+0x25e>
				break;
 80046fc:	bf00      	nop
		}
		i += msize;
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4413      	add	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	3304      	adds	r3, #4
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	429a      	cmp	r2, r3
 8004714:	f4ff aeeb 	bcc.w	80044ee <vl53l5cx_get_ranging_data+0x4e>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	e00d      	b.n	800473a <vl53l5cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	0ada      	lsrs	r2, r3, #11
 800472a:	6839      	ldr	r1, [r7, #0]
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	3301      	adds	r3, #1
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b3f      	cmp	r3, #63	@ 0x3f
 800473e:	d9ee      	bls.n	800471e <vl53l5cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8004740:	2300      	movs	r3, #0
 8004742:	61bb      	str	r3, [r7, #24]
 8004744:	e056      	b.n	80047f4 <vl53l5cx_get_ranging_data+0x354>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	4413      	add	r3, r2
 8004752:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	da00      	bge.n	800475c <vl53l5cx_get_ranging_data+0x2bc>
 800475a:	3303      	adds	r3, #3
 800475c:	109b      	asrs	r3, r3, #2
 800475e:	b219      	sxth	r1, r3
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	4413      	add	r3, r2
 800476c:	460a      	mov	r2, r1
 800476e:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	4413      	add	r3, r2
 800477c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	da07      	bge.n	8004794 <vl53l5cx_get_ranging_data+0x2f4>
		{
			p_results->distance_mm[i] = 0;
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	4413      	add	r3, r2
 8004790:	2200      	movs	r2, #0
 8004792:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	4413      	add	r3, r2
 800479a:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	b2d9      	uxtb	r1, r3
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	4413      	add	r3, r2
 80047aa:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 80047ae:	460a      	mov	r2, r1
 80047b0:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	4413      	add	r3, r2
 80047be:	889b      	ldrh	r3, [r3, #4]
 80047c0:	09db      	lsrs	r3, r3, #7
 80047c2:	b299      	uxth	r1, r3
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	4413      	add	r3, r2
 80047d0:	460a      	mov	r2, r1
 80047d2:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	3390      	adds	r3, #144	@ 0x90
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	0ada      	lsrs	r2, r3, #11
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	3390      	adds	r3, #144	@ 0x90
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	605a      	str	r2, [r3, #4]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	3301      	adds	r3, #1
 80047f2:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80047f8:	d9a5      	bls.n	8004746 <vl53l5cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80047fa:	2300      	movs	r3, #0
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	e01b      	b.n	8004838 <vl53l5cx_get_ranging_data+0x398>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	4413      	add	r3, r2
 8004806:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d110      	bne.n	8004832 <vl53l5cx_get_ranging_data+0x392>
			for(j = 0; j < (uint32_t)
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	e00a      	b.n	800482c <vl53l5cx_get_ranging_data+0x38c>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	4413      	add	r3, r2
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	4413      	add	r3, r2
 8004820:	22ff      	movs	r2, #255	@ 0xff
 8004822:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	3301      	adds	r3, #1
 800482a:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f1      	beq.n	8004816 <vl53l5cx_get_ranging_data+0x376>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	3301      	adds	r3, #1
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	2b3f      	cmp	r3, #63	@ 0x3f
 800483c:	d9e0      	bls.n	8004800 <vl53l5cx_get_ranging_data+0x360>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 800483e:	2300      	movs	r3, #0
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e014      	b.n	800486e <vl53l5cx_get_ranging_data+0x3ce>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	4a1f      	ldr	r2, [pc, #124]	@ (80048d0 <vl53l5cx_get_ranging_data+0x430>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	0bda      	lsrs	r2, r3, #15
 800485a:	6839      	ldr	r1, [r7, #0]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	3301      	adds	r3, #1
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b1f      	cmp	r3, #31
 8004872:	d9e7      	bls.n	8004844 <vl53l5cx_get_ranging_data+0x3a4>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3508 	ldrb.w	r3, [r3, #1288]	@ 0x508
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3509 	ldrb.w	r3, [r3, #1289]	@ 0x509
 8004884:	461a      	mov	r2, r3
 8004886:	89fb      	ldrh	r3, [r7, #14]
 8004888:	4313      	orrs	r3, r2
 800488a:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8004890:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	4413      	add	r3, r2
 8004896:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)3])) & 0xFFU;
 80048a2:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	4413      	add	r3, r2
 80048a8:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 80048ac:	461a      	mov	r2, r3
 80048ae:	89bb      	ldrh	r3, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 80048b4:	89fa      	ldrh	r2, [r7, #14]
 80048b6:	89bb      	ldrh	r3, [r7, #12]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d003      	beq.n	80048c4 <vl53l5cx_get_ranging_data+0x424>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 80048bc:	7ffb      	ldrb	r3, [r7, #31]
 80048be:	f043 0302 	orr.w	r3, r3, #2
 80048c2:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 80048c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3720      	adds	r7, #32
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	80008001 	.word	0x80008001

080048d4 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80048e8:	2308      	movs	r3, #8
 80048ea:	f245 4250 	movw	r2, #21584	@ 0x5450
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f98e 	bl	8004c10 <vl53l5cx_dci_read_data>
 80048f4:	4603      	mov	r3, r0
 80048f6:	461a      	mov	r2, r3
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 800490a:	fb12 f303 	smulbb	r3, r2, r3
 800490e:	b2da      	uxtb	r2, r3
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	701a      	strb	r2, [r3, #0]

	return status;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	460b      	mov	r3, r1
 8004928:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	2b10      	cmp	r3, #16
 8004932:	d002      	beq.n	800493a <vl53l5cx_set_resolution+0x1c>
 8004934:	2b40      	cmp	r3, #64	@ 0x40
 8004936:	d055      	beq.n	80049e4 <vl53l5cx_set_resolution+0xc6>
 8004938:	e0a9      	b.n	8004a8e <vl53l5cx_set_resolution+0x170>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 8004940:	2310      	movs	r3, #16
 8004942:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f962 	bl	8004c10 <vl53l5cx_dci_read_data>
 800494c:	4603      	mov	r3, r0
 800494e:	461a      	mov	r2, r3
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	4313      	orrs	r3, r2
 8004954:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2240      	movs	r2, #64	@ 0x40
 800495a:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x06] = 64;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2240      	movs	r2, #64	@ 0x40
 8004962:	f883 2506 	strb.w	r2, [r3, #1286]	@ 0x506
			p_dev->temp_buffer[0x09] = 4;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2204      	movs	r2, #4
 800496a:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 8004974:	2310      	movs	r3, #16
 8004976:	f64a 5238 	movw	r2, #44344	@ 0xad38
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f9d2 	bl	8004d24 <vl53l5cx_dci_write_data>
 8004980:	4603      	mov	r3, r0
 8004982:	461a      	mov	r2, r3
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	4313      	orrs	r3, r2
 8004988:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 8004990:	2308      	movs	r3, #8
 8004992:	f245 4250 	movw	r2, #21584	@ 0x5450
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f93a 	bl	8004c10 <vl53l5cx_dci_read_data>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2204      	movs	r2, #4
 80049aa:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
			p_dev->temp_buffer[0x01] = 4;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2204      	movs	r2, #4
 80049b2:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x04] = 8;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2208      	movs	r2, #8
 80049ba:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x05] = 8;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2208      	movs	r2, #8
 80049c2:	f883 2505 	strb.w	r2, [r3, #1285]	@ 0x505
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 80049cc:	2308      	movs	r3, #8
 80049ce:	f245 4250 	movw	r2, #21584	@ 0x5450
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f9a6 	bl	8004d24 <vl53l5cx_dci_write_data>
 80049d8:	4603      	mov	r3, r0
 80049da:	461a      	mov	r2, r3
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	4313      	orrs	r3, r2
 80049e0:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 80049e2:	e057      	b.n	8004a94 <vl53l5cx_set_resolution+0x176>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 80049ea:	2310      	movs	r3, #16
 80049ec:	f64a 5238 	movw	r2, #44344	@ 0xad38
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f90d 	bl	8004c10 <vl53l5cx_dci_read_data>
 80049f6:	4603      	mov	r3, r0
 80049f8:	461a      	mov	r2, r3
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2210      	movs	r2, #16
 8004a04:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x06] = 16;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	f883 2506 	strb.w	r2, [r3, #1286]	@ 0x506
			p_dev->temp_buffer[0x09] = 1;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 8004a1e:	2310      	movs	r3, #16
 8004a20:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f97d 	bl	8004d24 <vl53l5cx_dci_write_data>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	f245 4250 	movw	r2, #21584	@ 0x5450
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f8e5 	bl	8004c10 <vl53l5cx_dci_read_data>
 8004a46:	4603      	mov	r3, r0
 8004a48:	461a      	mov	r2, r3
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2208      	movs	r2, #8
 8004a54:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
			p_dev->temp_buffer[0x01] = 8;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x04] = 4;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2204      	movs	r2, #4
 8004a64:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x05] = 4;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2204      	movs	r2, #4
 8004a6c:	f883 2505 	strb.w	r2, [r3, #1285]	@ 0x505
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 8004a76:	2308      	movs	r3, #8
 8004a78:	f245 4250 	movw	r2, #21584	@ 0x5450
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f951 	bl	8004d24 <vl53l5cx_dci_write_data>
 8004a82:	4603      	mov	r3, r0
 8004a84:	461a      	mov	r2, r3
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 8004a8c:	e002      	b.n	8004a94 <vl53l5cx_set_resolution+0x176>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8004a8e:	237f      	movs	r3, #127	@ 0x7f
 8004a90:	73fb      	strb	r3, [r7, #15]
			break;
 8004a92:	bf00      	nop
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7fe fb33 	bl	8003104 <_vl53l5cx_send_offset_data>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7fe fcf5 	bl	800349c <_vl53l5cx_send_xtalk_data>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	73fb      	strb	r3, [r7, #15]

	return status;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b088      	sub	sp, #32
 8004aca:	af04      	add	r7, sp, #16
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8004adc:	2301      	movs	r3, #1
 8004ade:	9302      	str	r3, [sp, #8]
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	1cfb      	adds	r3, r7, #3
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	2304      	movs	r3, #4
 8004aea:	f245 4258 	movw	r2, #21592	@ 0x5458
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f9b6 	bl	8004e60 <vl53l5cx_dci_replace_data>
 8004af4:	4603      	mov	r3, r0
 8004af6:	461a      	mov	r2, r3
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <vl53l5cx_set_target_order>:
}

uint8_t vl53l5cx_set_target_order(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				target_order)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af04      	add	r7, sp, #16
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	73fb      	strb	r3, [r7, #15]

	if((target_order == (uint8_t)VL53L5CX_TARGET_ORDER_CLOSEST)
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d002      	beq.n	8004b24 <vl53l5cx_set_target_order+0x1c>
		|| (target_order == (uint8_t)VL53L5CX_TARGET_ORDER_STRONGEST))
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d114      	bne.n	8004b4e <vl53l5cx_set_target_order+0x46>
	{
		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	9302      	str	r3, [sp, #8]
 8004b2e:	2301      	movs	r3, #1
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	1cfb      	adds	r3, r7, #3
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	2304      	movs	r3, #4
 8004b38:	f64a 6264 	movw	r2, #44644	@ 0xae64
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f98f 	bl	8004e60 <vl53l5cx_dci_replace_data>
 8004b42:	4603      	mov	r3, r0
 8004b44:	461a      	mov	r2, r3
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_TARGET_ORDER, 4,
                                (uint8_t*)&target_order, 1, 0x0);
 8004b4c:	e003      	b.n	8004b56 <vl53l5cx_set_target_order+0x4e>
	}else
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8004b54:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <vl53l5cx_set_ranging_mode>:
}

uint8_t vl53l5cx_set_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f845 	bl	8004c10 <vl53l5cx_dci_read_data>
 8004b86:	4603      	mov	r3, r0
 8004b88:	461a      	mov	r2, r3
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d002      	beq.n	8004b9c <vl53l5cx_set_ranging_mode+0x3c>
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d00b      	beq.n	8004bb2 <vl53l5cx_set_ranging_mode+0x52>
 8004b9a:	e015      	b.n	8004bc8 <vl53l5cx_set_ranging_mode+0x68>
	{
		case VL53L5CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x03] = 0x3;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	f883 2503 	strb.w	r2, [r3, #1283]	@ 0x503
			single_range = 0x00;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60bb      	str	r3, [r7, #8]
			break;
 8004bb0:	e00d      	b.n	8004bce <vl53l5cx_set_ranging_mode+0x6e>

		case VL53L5CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x03] = 0x2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 2503 	strb.w	r2, [r3, #1283]	@ 0x503
			single_range = 0x01;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	60bb      	str	r3, [r7, #8]
			break;
 8004bc6:	e002      	b.n	8004bce <vl53l5cx_set_ranging_mode+0x6e>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8004bc8:	237f      	movs	r3, #127	@ 0x7f
 8004bca:	73fb      	strb	r3, [r7, #15]
			break;
 8004bcc:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f8a2 	bl	8004d24 <vl53l5cx_dci_write_data>
 8004be0:	4603      	mov	r3, r0
 8004be2:	461a      	mov	r2, r3
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8004bea:	f107 0108 	add.w	r1, r7, #8
 8004bee:	2304      	movs	r3, #4
 8004bf0:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f895 	bl	8004d24 <vl53l5cx_dci_write_data>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SINGLE_RANGE, 
                        (uint16_t)sizeof(single_range));

	return status;
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08c      	sub	sp, #48	@ 0x30
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8004c24:	887b      	ldrh	r3, [r7, #2]
 8004c26:	330c      	adds	r3, #12
 8004c28:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8004c2a:	4a3d      	ldr	r2, [pc, #244]	@ (8004d20 <vl53l5cx_dci_read_data+0x110>)
 8004c2c:	f107 0314 	add.w	r3, r7, #20
 8004c30:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8004c36:	887b      	ldrh	r3, [r7, #2]
 8004c38:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8004c3c:	d903      	bls.n	8004c46 <vl53l5cx_dci_read_data+0x36>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8004c3e:	23ff      	movs	r3, #255	@ 0xff
 8004c40:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8004c44:	e065      	b.n	8004d12 <vl53l5cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	0a1b      	lsrs	r3, r3, #8
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8004c54:	887b      	ldrh	r3, [r7, #2]
 8004c56:	111b      	asrs	r3, r3, #4
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8004c5c:	887b      	ldrh	r3, [r7, #2]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f107 0214 	add.w	r2, r7, #20
 8004c6c:	230c      	movs	r3, #12
 8004c6e:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 8004c72:	f7fe f8ff 	bl	8002e74 <WrMulti>
 8004c76:	4603      	mov	r3, r0
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8004c84:	2303      	movs	r3, #3
 8004c86:	9301      	str	r3, [sp, #4]
 8004c88:	23ff      	movs	r3, #255	@ 0xff
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004c90:	2201      	movs	r2, #1
 8004c92:	2104      	movs	r1, #4
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7fe f9a4 	bl	8002fe2 <_vl53l5cx_poll_for_answer>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8004ca8:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8004cb6:	f7fe f917 	bl	8002ee8 <RdMulti>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8004cce:	887b      	ldrh	r3, [r7, #2]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	f7fe f940 	bl	8002f5c <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8004cdc:	2300      	movs	r3, #0
 8004cde:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004ce0:	e011      	b.n	8004d06 <vl53l5cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8004ce2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004ce6:	1d1a      	adds	r2, r3, #4
 8004ce8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	440b      	add	r3, r1
 8004cf0:	68f9      	ldr	r1, [r7, #12]
 8004cf2:	440a      	add	r2, r1
 8004cf4:	f892 2500 	ldrb.w	r2, [r2, #1280]	@ 0x500
 8004cf8:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8004cfa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3301      	adds	r3, #1
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004d06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d0a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	dbe7      	blt.n	8004ce2 <vl53l5cx_dci_read_data+0xd2>
		}
	}

	return status;
 8004d12:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3728      	adds	r7, #40	@ 0x28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	0800bd38 	.word	0x0800bd38

08004d24 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08c      	sub	sp, #48	@ 0x30
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	753b      	strb	r3, [r7, #20]
 8004d40:	2300      	movs	r3, #0
 8004d42:	757b      	strb	r3, [r7, #21]
 8004d44:	2300      	movs	r3, #0
 8004d46:	75bb      	strb	r3, [r7, #22]
 8004d48:	230f      	movs	r3, #15
 8004d4a:	75fb      	strb	r3, [r7, #23]
 8004d4c:	2305      	movs	r3, #5
 8004d4e:	763b      	strb	r3, [r7, #24]
 8004d50:	2301      	movs	r3, #1
 8004d52:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8004d54:	887b      	ldrh	r3, [r7, #2]
 8004d56:	3308      	adds	r3, #8
 8004d58:	121b      	asrs	r3, r3, #8
 8004d5a:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8004d5c:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8004d5e:	887b      	ldrh	r3, [r7, #2]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	3308      	adds	r3, #8
 8004d64:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8004d66:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 8004d68:	887b      	ldrh	r3, [r7, #2]
 8004d6a:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 8004d6e:	3334      	adds	r3, #52	@ 0x34
 8004d70:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8004d72:	887b      	ldrh	r3, [r7, #2]
 8004d74:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8004d78:	d903      	bls.n	8004d82 <vl53l5cx_dci_write_data+0x5e>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 8004d7a:	23ff      	movs	r3, #255	@ 0xff
 8004d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004d80:	e068      	b.n	8004e54 <vl53l5cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8004d90:	887b      	ldrh	r3, [r7, #2]
 8004d92:	111b      	asrs	r3, r3, #4
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8004d98:	887b      	ldrh	r3, [r7, #2]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8004da2:	887b      	ldrh	r3, [r7, #2]
 8004da4:	4619      	mov	r1, r3
 8004da6:	68b8      	ldr	r0, [r7, #8]
 8004da8:	f7fe f8d8 	bl	8002f5c <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8004dac:	887b      	ldrh	r3, [r7, #2]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004db4:	e012      	b.n	8004ddc <vl53l5cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8004db6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	441a      	add	r2, r3
 8004dbe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	7811      	ldrb	r1, [r2, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4413      	add	r3, r2
 8004dca:	460a      	mov	r2, r1
 8004dcc:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8004dd0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004ddc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	dae8      	bge.n	8004db6 <vl53l5cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8004dee:	887b      	ldrh	r3, [r7, #2]
 8004df0:	3304      	adds	r3, #4
 8004df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f107 0314 	add.w	r3, r7, #20
 8004e00:	cb03      	ldmia	r3!, {r0, r1}
 8004e02:	6010      	str	r0, [r2, #0]
 8004e04:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8004e06:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8004e0e:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8004e10:	330c      	adds	r3, #12
 8004e12:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8004e14:	f7fe f82e 	bl	8002e74 <WrMulti>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8004e26:	2303      	movs	r3, #3
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	23ff      	movs	r3, #255	@ 0xff
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004e32:	2201      	movs	r2, #1
 8004e34:	2104      	movs	r1, #4
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7fe f8d3 	bl	8002fe2 <_vl53l5cx_poll_for_answer>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8004e4a:	887b      	ldrh	r3, [r7, #2]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	68b8      	ldr	r0, [r7, #8]
 8004e50:	f7fe f884 	bl	8002f5c <SwapBuffer>
	}

	return status;
 8004e54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3728      	adds	r7, #40	@ 0x28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 8004e72:	887b      	ldrh	r3, [r7, #2]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f7ff fec9 	bl	8004c10 <vl53l5cx_dci_read_data>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	461a      	mov	r2, r3
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8004e88:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e90:	6a39      	ldr	r1, [r7, #32]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f006 f930 	bl	800b0f8 <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8004e98:	887b      	ldrh	r3, [r7, #2]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7ff ff40 	bl	8004d24 <vl53l5cx_dci_write_data>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	7dfb      	ldrb	r3, [r7, #23]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	75fb      	strb	r3, [r7, #23]

	return status;
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <BSP_W25Qx_Init>:

 /**********************************************************************************
  * 函数功能: 模块初始化
  */
uint8_t BSP_W25Qx_Init(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
	BSP_W25Qx_Reset();
 8004ebc:	f000 f806 	bl	8004ecc <BSP_W25Qx_Reset>
	return BSP_W25Qx_GetStatus();
 8004ec0:	f000 f826 	bl	8004f10 <BSP_W25Qx_GetStatus>
 8004ec4:	4603      	mov	r3, r0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <BSP_W25Qx_Reset>:


static void	BSP_W25Qx_Reset(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
	uint8_t cmd[2] = {RESET_ENABLE_CMD,RESET_MEMORY_CMD};
 8004ed2:	f649 1366 	movw	r3, #39270	@ 0x9966
 8004ed6:	80bb      	strh	r3, [r7, #4]

	W25Qx_Enable();
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004ede:	480a      	ldr	r0, [pc, #40]	@ (8004f08 <BSP_W25Qx_Reset+0x3c>)
 8004ee0:	f000 fe5a 	bl	8005b98 <HAL_GPIO_WritePin>
	/* Send the reset command */
	HAL_SPI_Transmit(&hspi2, cmd, 2, W25Qx_TIMEOUT_VALUE);
 8004ee4:	1d39      	adds	r1, r7, #4
 8004ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004eea:	2202      	movs	r2, #2
 8004eec:	4807      	ldr	r0, [pc, #28]	@ (8004f0c <BSP_W25Qx_Reset+0x40>)
 8004eee:	f000 ff0e 	bl	8005d0e <HAL_SPI_Transmit>
	W25Qx_Disable();
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004ef8:	4803      	ldr	r0, [pc, #12]	@ (8004f08 <BSP_W25Qx_Reset+0x3c>)
 8004efa:	f000 fe4d 	bl	8005b98 <HAL_GPIO_WritePin>

}
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	48000400 	.word	0x48000400
 8004f0c:	20001a34 	.word	0x20001a34

08004f10 <BSP_W25Qx_GetStatus>:

 /**********************************************************************************
  * 函数功能: 获取设备状态
  */
static uint8_t BSP_W25Qx_GetStatus(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
	uint8_t cmd[] = {READ_STATUS_REG1_CMD};
 8004f16:	2305      	movs	r3, #5
 8004f18:	713b      	strb	r3, [r7, #4]
	uint8_t status;

	W25Qx_Enable();
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f20:	4811      	ldr	r0, [pc, #68]	@ (8004f68 <BSP_W25Qx_GetStatus+0x58>)
 8004f22:	f000 fe39 	bl	8005b98 <HAL_GPIO_WritePin>
	/* Send the read status command */
	HAL_SPI_Transmit(&hspi2, cmd, 1, W25Qx_TIMEOUT_VALUE);
 8004f26:	1d39      	adds	r1, r7, #4
 8004f28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	480f      	ldr	r0, [pc, #60]	@ (8004f6c <BSP_W25Qx_GetStatus+0x5c>)
 8004f30:	f000 feed 	bl	8005d0e <HAL_SPI_Transmit>
	/* Reception of the data */
	HAL_SPI_Receive(&hspi2,&status, 1, W25Qx_TIMEOUT_VALUE);
 8004f34:	1cf9      	adds	r1, r7, #3
 8004f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	480b      	ldr	r0, [pc, #44]	@ (8004f6c <BSP_W25Qx_GetStatus+0x5c>)
 8004f3e:	f001 f85b 	bl	8005ff8 <HAL_SPI_Receive>
	W25Qx_Disable();
 8004f42:	2201      	movs	r2, #1
 8004f44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f48:	4807      	ldr	r0, [pc, #28]	@ (8004f68 <BSP_W25Qx_GetStatus+0x58>)
 8004f4a:	f000 fe25 	bl	8005b98 <HAL_GPIO_WritePin>

	/* Check the value of the register */
  if((status & W25Q128FV_FSR_BUSY) != 0)
 8004f4e:	78fb      	ldrb	r3, [r7, #3]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <BSP_W25Qx_GetStatus+0x4c>
  {
    return W25Qx_BUSY;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e000      	b.n	8004f5e <BSP_W25Qx_GetStatus+0x4e>
  }
	else
	{
		return W25Qx_OK;
 8004f5c:	2300      	movs	r3, #0
	}
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	48000400 	.word	0x48000400
 8004f6c:	20001a34 	.word	0x20001a34

08004f70 <BSP_W25Qx_WriteEnable>:

 /**********************************************************************************
  * 函数功能: 写使能
  */
uint8_t BSP_W25Qx_WriteEnable(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
	uint8_t cmd[] = {WRITE_ENABLE_CMD};
 8004f76:	2306      	movs	r3, #6
 8004f78:	703b      	strb	r3, [r7, #0]
	uint32_t tickstart = HAL_GetTick();
 8004f7a:	f000 f9cd 	bl	8005318 <HAL_GetTick>
 8004f7e:	6078      	str	r0, [r7, #4]

	/*Select the FLASH: Chip Select low */
	W25Qx_Enable();
 8004f80:	2200      	movs	r2, #0
 8004f82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f86:	4812      	ldr	r0, [pc, #72]	@ (8004fd0 <BSP_W25Qx_WriteEnable+0x60>)
 8004f88:	f000 fe06 	bl	8005b98 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 1, W25Qx_TIMEOUT_VALUE);
 8004f8c:	4639      	mov	r1, r7
 8004f8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f92:	2201      	movs	r2, #1
 8004f94:	480f      	ldr	r0, [pc, #60]	@ (8004fd4 <BSP_W25Qx_WriteEnable+0x64>)
 8004f96:	f000 feba 	bl	8005d0e <HAL_SPI_Transmit>
	/*Deselect the FLASH: Chip Select high */
	W25Qx_Disable();
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004fa0:	480b      	ldr	r0, [pc, #44]	@ (8004fd0 <BSP_W25Qx_WriteEnable+0x60>)
 8004fa2:	f000 fdf9 	bl	8005b98 <HAL_GPIO_WritePin>

	/* Wait the end of Flash writing */
	while(BSP_W25Qx_GetStatus() == W25Qx_BUSY);
 8004fa6:	bf00      	nop
 8004fa8:	f7ff ffb2 	bl	8004f10 <BSP_W25Qx_GetStatus>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d0fa      	beq.n	8004fa8 <BSP_W25Qx_WriteEnable+0x38>
	{
		/* Check for the Timeout */
    if((HAL_GetTick() - tickstart) > W25Qx_TIMEOUT_VALUE)
 8004fb2:	f000 f9b1 	bl	8005318 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004fc0:	d901      	bls.n	8004fc6 <BSP_W25Qx_WriteEnable+0x56>
    {
			return W25Qx_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e000      	b.n	8004fc8 <BSP_W25Qx_WriteEnable+0x58>
    }
	}

	return W25Qx_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	48000400 	.word	0x48000400
 8004fd4:	20001a34 	.word	0x20001a34

08004fd8 <BSP_W25Qx_Read_ID>:

 /**********************************************************************************
  * 函数功能: 获取设备ID
  */
void BSP_W25Qx_Read_ID(uint8_t *ID)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = {READ_ID_CMD,0x00,0x00,0x00};
 8004fe0:	2390      	movs	r3, #144	@ 0x90
 8004fe2:	60fb      	str	r3, [r7, #12]

	W25Qx_Enable();
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004fea:	480e      	ldr	r0, [pc, #56]	@ (8005024 <BSP_W25Qx_Read_ID+0x4c>)
 8004fec:	f000 fdd4 	bl	8005b98 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25Qx_TIMEOUT_VALUE);
 8004ff0:	f107 010c 	add.w	r1, r7, #12
 8004ff4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	480b      	ldr	r0, [pc, #44]	@ (8005028 <BSP_W25Qx_Read_ID+0x50>)
 8004ffc:	f000 fe87 	bl	8005d0e <HAL_SPI_Transmit>
	/* Reception of the data */
	HAL_SPI_Receive(&hspi2,ID, 2, W25Qx_TIMEOUT_VALUE);
 8005000:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005004:	2202      	movs	r2, #2
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4807      	ldr	r0, [pc, #28]	@ (8005028 <BSP_W25Qx_Read_ID+0x50>)
 800500a:	f000 fff5 	bl	8005ff8 <HAL_SPI_Receive>
	W25Qx_Disable();
 800500e:	2201      	movs	r2, #1
 8005010:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005014:	4803      	ldr	r0, [pc, #12]	@ (8005024 <BSP_W25Qx_Read_ID+0x4c>)
 8005016:	f000 fdbf 	bl	8005b98 <HAL_GPIO_WritePin>

}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	48000400 	.word	0x48000400
 8005028:	20001a34 	.word	0x20001a34

0800502c <BSP_W25Qx_Read>:
 /**********************************************************************************
  * 函数功能: 读数据
  * 输入参数: 缓存数组指针、读地址、字节数
  */
uint8_t BSP_W25Qx_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
	uint8_t cmd[4];

	/* Configure the command */
	cmd[0] = READ_CMD;
 8005038:	2303      	movs	r3, #3
 800503a:	753b      	strb	r3, [r7, #20]
	cmd[1] = (uint8_t)(ReadAddr >> 16);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	0c1b      	lsrs	r3, r3, #16
 8005040:	b2db      	uxtb	r3, r3
 8005042:	757b      	strb	r3, [r7, #21]
	cmd[2] = (uint8_t)(ReadAddr >> 8);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	b2db      	uxtb	r3, r3
 800504a:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t)(ReadAddr);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	75fb      	strb	r3, [r7, #23]

	W25Qx_Enable();
 8005052:	2200      	movs	r2, #0
 8005054:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005058:	4811      	ldr	r0, [pc, #68]	@ (80050a0 <BSP_W25Qx_Read+0x74>)
 800505a:	f000 fd9d 	bl	8005b98 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25Qx_TIMEOUT_VALUE);
 800505e:	f107 0114 	add.w	r1, r7, #20
 8005062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005066:	2204      	movs	r2, #4
 8005068:	480e      	ldr	r0, [pc, #56]	@ (80050a4 <BSP_W25Qx_Read+0x78>)
 800506a:	f000 fe50 	bl	8005d0e <HAL_SPI_Transmit>
	/* Reception of the data */
	if (HAL_SPI_Receive(&hspi2, pData,Size,W25Qx_TIMEOUT_VALUE) != HAL_OK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	b29a      	uxth	r2, r3
 8005072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005076:	68f9      	ldr	r1, [r7, #12]
 8005078:	480a      	ldr	r0, [pc, #40]	@ (80050a4 <BSP_W25Qx_Read+0x78>)
 800507a:	f000 ffbd 	bl	8005ff8 <HAL_SPI_Receive>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <BSP_W25Qx_Read+0x5c>
  {
    return W25Qx_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e006      	b.n	8005096 <BSP_W25Qx_Read+0x6a>
  }
	W25Qx_Disable();
 8005088:	2201      	movs	r2, #1
 800508a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800508e:	4804      	ldr	r0, [pc, #16]	@ (80050a0 <BSP_W25Qx_Read+0x74>)
 8005090:	f000 fd82 	bl	8005b98 <HAL_GPIO_WritePin>
	return W25Qx_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	48000400 	.word	0x48000400
 80050a4:	20001a34 	.word	0x20001a34

080050a8 <BSP_W25Qx_Write>:
 /**********************************************************************************
  * 函数功能: 写数据
  * 输入参数: 缓存数组指针、写地址、字节数
  */
uint8_t BSP_W25Qx_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08a      	sub	sp, #40	@ 0x28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
	uint8_t cmd[4];
	uint32_t end_addr, current_size, current_addr;
	uint32_t tickstart = HAL_GetTick();
 80050b4:	f000 f930 	bl	8005318 <HAL_GetTick>
 80050b8:	61f8      	str	r0, [r7, #28]

	/* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	623b      	str	r3, [r7, #32]

  while (current_addr <= WriteAddr)
 80050be:	e003      	b.n	80050c8 <BSP_W25Qx_Write+0x20>
  {
    current_addr += W25Q128FV_PAGE_SIZE;
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80050c6:	623b      	str	r3, [r7, #32]
  while (current_addr <= WriteAddr)
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d9f7      	bls.n	80050c0 <BSP_W25Qx_Write+0x18>
  }
  current_size = current_addr - WriteAddr;
 80050d0:	6a3a      	ldr	r2, [r7, #32]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80050d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d901      	bls.n	80050e4 <BSP_W25Qx_Write+0x3c>
  {
    current_size = Size;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	623b      	str	r3, [r7, #32]
  end_addr = WriteAddr + Size;
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]

  /* Perform the write page by page */
  do
  {
		/* Configure the command */
		cmd[0] = PAGE_PROG_CMD;
 80050f0:	2302      	movs	r3, #2
 80050f2:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(current_addr >> 16);
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	0c1b      	lsrs	r3, r3, #16
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)(current_addr >> 8);
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	0a1b      	lsrs	r3, r3, #8
 8005100:	b2db      	uxtb	r3, r3
 8005102:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)(current_addr);
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	75fb      	strb	r3, [r7, #23]

		/* Enable write operations */
		BSP_W25Qx_WriteEnable();
 800510a:	f7ff ff31 	bl	8004f70 <BSP_W25Qx_WriteEnable>

		W25Qx_Enable();
 800510e:	2200      	movs	r2, #0
 8005110:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005114:	4828      	ldr	r0, [pc, #160]	@ (80051b8 <BSP_W25Qx_Write+0x110>)
 8005116:	f000 fd3f 	bl	8005b98 <HAL_GPIO_WritePin>
    /* Send the command */
    if (HAL_SPI_Transmit(&hspi2,cmd, 4, W25Qx_TIMEOUT_VALUE) != HAL_OK)
 800511a:	f107 0114 	add.w	r1, r7, #20
 800511e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005122:	2204      	movs	r2, #4
 8005124:	4825      	ldr	r0, [pc, #148]	@ (80051bc <BSP_W25Qx_Write+0x114>)
 8005126:	f000 fdf2 	bl	8005d0e <HAL_SPI_Transmit>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <BSP_W25Qx_Write+0x8c>
    {
      return W25Qx_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e03c      	b.n	80051ae <BSP_W25Qx_Write+0x106>
    }

    /* Transmission of the data */
    if (HAL_SPI_Transmit(&hspi2, pData,current_size, W25Qx_TIMEOUT_VALUE) != HAL_OK)
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	b29a      	uxth	r2, r3
 8005138:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800513c:	68f9      	ldr	r1, [r7, #12]
 800513e:	481f      	ldr	r0, [pc, #124]	@ (80051bc <BSP_W25Qx_Write+0x114>)
 8005140:	f000 fde5 	bl	8005d0e <HAL_SPI_Transmit>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <BSP_W25Qx_Write+0xa6>
    {
      return W25Qx_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e02f      	b.n	80051ae <BSP_W25Qx_Write+0x106>
    }
			W25Qx_Disable();
 800514e:	2201      	movs	r2, #1
 8005150:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005154:	4818      	ldr	r0, [pc, #96]	@ (80051b8 <BSP_W25Qx_Write+0x110>)
 8005156:	f000 fd1f 	bl	8005b98 <HAL_GPIO_WritePin>
    	/* Wait the end of Flash writing */
		while(BSP_W25Qx_GetStatus() == W25Qx_BUSY);
 800515a:	bf00      	nop
 800515c:	f7ff fed8 	bl	8004f10 <BSP_W25Qx_GetStatus>
 8005160:	4603      	mov	r3, r0
 8005162:	2b02      	cmp	r3, #2
 8005164:	d0fa      	beq.n	800515c <BSP_W25Qx_Write+0xb4>
		{
			/* Check for the Timeout */
			if((HAL_GetTick() - tickstart) > W25Qx_TIMEOUT_VALUE)
 8005166:	f000 f8d7 	bl	8005318 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005174:	d901      	bls.n	800517a <BSP_W25Qx_Write+0xd2>
			{
				return W25Qx_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e019      	b.n	80051ae <BSP_W25Qx_Write+0x106>
			}
		}

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800517a:	6a3a      	ldr	r2, [r7, #32]
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	4413      	add	r3, r2
 8005180:	623b      	str	r3, [r7, #32]
    pData += current_size;
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	4413      	add	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + W25Q128FV_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25Q128FV_PAGE_SIZE;
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	429a      	cmp	r2, r3
 8005194:	d203      	bcs.n	800519e <BSP_W25Qx_Write+0xf6>
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	e001      	b.n	80051a2 <BSP_W25Qx_Write+0xfa>
 800519e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051a2:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (current_addr < end_addr);
 80051a4:	6a3a      	ldr	r2, [r7, #32]
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d3a1      	bcc.n	80050f0 <BSP_W25Qx_Write+0x48>


	return W25Qx_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3728      	adds	r7, #40	@ 0x28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	48000400 	.word	0x48000400
 80051bc:	20001a34 	.word	0x20001a34

080051c0 <BSP_W25Qx_Erase_Block>:
 /**********************************************************************************
  * 函数功能: 扇区擦除
  * 输入参数: 地址
  */
uint8_t BSP_W25Qx_Erase_Block(uint32_t Address)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint32_t tickstart = HAL_GetTick();
 80051c8:	f000 f8a6 	bl	8005318 <HAL_GetTick>
 80051cc:	60f8      	str	r0, [r7, #12]
	cmd[0] = SECTOR_ERASE_CMD;
 80051ce:	2320      	movs	r3, #32
 80051d0:	723b      	strb	r3, [r7, #8]
	cmd[1] = (uint8_t)(Address >> 16);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	727b      	strb	r3, [r7, #9]
	cmd[2] = (uint8_t)(Address >> 8);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	0a1b      	lsrs	r3, r3, #8
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(Address);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	72fb      	strb	r3, [r7, #11]

	/* Enable write operations */
	BSP_W25Qx_WriteEnable();
 80051e8:	f7ff fec2 	bl	8004f70 <BSP_W25Qx_WriteEnable>

	/*Select the FLASH: Chip Select low */
	W25Qx_Enable();
 80051ec:	2200      	movs	r2, #0
 80051ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80051f2:	4813      	ldr	r0, [pc, #76]	@ (8005240 <BSP_W25Qx_Erase_Block+0x80>)
 80051f4:	f000 fcd0 	bl	8005b98 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25Qx_TIMEOUT_VALUE);
 80051f8:	f107 0108 	add.w	r1, r7, #8
 80051fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005200:	2204      	movs	r2, #4
 8005202:	4810      	ldr	r0, [pc, #64]	@ (8005244 <BSP_W25Qx_Erase_Block+0x84>)
 8005204:	f000 fd83 	bl	8005d0e <HAL_SPI_Transmit>
	/*Deselect the FLASH: Chip Select high */
	W25Qx_Disable();
 8005208:	2201      	movs	r2, #1
 800520a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800520e:	480c      	ldr	r0, [pc, #48]	@ (8005240 <BSP_W25Qx_Erase_Block+0x80>)
 8005210:	f000 fcc2 	bl	8005b98 <HAL_GPIO_WritePin>

	/* Wait the end of Flash writing */
	while(BSP_W25Qx_GetStatus() == W25Qx_BUSY);
 8005214:	bf00      	nop
 8005216:	f7ff fe7b 	bl	8004f10 <BSP_W25Qx_GetStatus>
 800521a:	4603      	mov	r3, r0
 800521c:	2b02      	cmp	r3, #2
 800521e:	d0fa      	beq.n	8005216 <BSP_W25Qx_Erase_Block+0x56>
	{
		/* Check for the Timeout */
    if((HAL_GetTick() - tickstart) > W25Q128FV_SECTOR_ERASE_MAX_TIME)
 8005220:	f000 f87a 	bl	8005318 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <BSP_W25Qx_Erase_Block+0x76>
    {
			return W25Qx_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e000      	b.n	8005238 <BSP_W25Qx_Erase_Block+0x78>
    }
	}
	return W25Qx_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	48000400 	.word	0x48000400
 8005244:	20001a34 	.word	0x20001a34

08005248 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005252:	2003      	movs	r0, #3
 8005254:	f000 f93c 	bl	80054d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005258:	200f      	movs	r0, #15
 800525a:	f000 f80d 	bl	8005278 <HAL_InitTick>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	71fb      	strb	r3, [r7, #7]
 8005268:	e001      	b.n	800526e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800526a:	f7fc fcc3 	bl	8001bf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800526e:	79fb      	ldrb	r3, [r7, #7]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005284:	4b17      	ldr	r3, [pc, #92]	@ (80052e4 <HAL_InitTick+0x6c>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d023      	beq.n	80052d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800528c:	4b16      	ldr	r3, [pc, #88]	@ (80052e8 <HAL_InitTick+0x70>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4b14      	ldr	r3, [pc, #80]	@ (80052e4 <HAL_InitTick+0x6c>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	4619      	mov	r1, r3
 8005296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800529a:	fbb3 f3f1 	udiv	r3, r3, r1
 800529e:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f949 	bl	800553a <HAL_SYSTICK_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10f      	bne.n	80052ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b0f      	cmp	r3, #15
 80052b2:	d809      	bhi.n	80052c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052b4:	2200      	movs	r2, #0
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	f000 f913 	bl	80054e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052c0:	4a0a      	ldr	r2, [pc, #40]	@ (80052ec <HAL_InitTick+0x74>)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	e007      	b.n	80052d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	73fb      	strb	r3, [r7, #15]
 80052cc:	e004      	b.n	80052d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
 80052d2:	e001      	b.n	80052d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20000008 	.word	0x20000008
 80052e8:	20000000 	.word	0x20000000
 80052ec:	20000004 	.word	0x20000004

080052f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80052f4:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <HAL_IncTick+0x20>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	4b06      	ldr	r3, [pc, #24]	@ (8005314 <HAL_IncTick+0x24>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4413      	add	r3, r2
 8005300:	4a04      	ldr	r2, [pc, #16]	@ (8005314 <HAL_IncTick+0x24>)
 8005302:	6013      	str	r3, [r2, #0]
}
 8005304:	bf00      	nop
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000008 	.word	0x20000008
 8005314:	20001b2c 	.word	0x20001b2c

08005318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return uwTick;
 800531c:	4b03      	ldr	r3, [pc, #12]	@ (800532c <HAL_GetTick+0x14>)
 800531e:	681b      	ldr	r3, [r3, #0]
}
 8005320:	4618      	mov	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20001b2c 	.word	0x20001b2c

08005330 <__NVIC_SetPriorityGrouping>:
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005340:	4b0c      	ldr	r3, [pc, #48]	@ (8005374 <__NVIC_SetPriorityGrouping+0x44>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800534c:	4013      	ands	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800535c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005362:	4a04      	ldr	r2, [pc, #16]	@ (8005374 <__NVIC_SetPriorityGrouping+0x44>)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	60d3      	str	r3, [r2, #12]
}
 8005368:	bf00      	nop
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	e000ed00 	.word	0xe000ed00

08005378 <__NVIC_GetPriorityGrouping>:
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800537c:	4b04      	ldr	r3, [pc, #16]	@ (8005390 <__NVIC_GetPriorityGrouping+0x18>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	0a1b      	lsrs	r3, r3, #8
 8005382:	f003 0307 	and.w	r3, r3, #7
}
 8005386:	4618      	mov	r0, r3
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	e000ed00 	.word	0xe000ed00

08005394 <__NVIC_EnableIRQ>:
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800539e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	db0b      	blt.n	80053be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	f003 021f 	and.w	r2, r3, #31
 80053ac:	4907      	ldr	r1, [pc, #28]	@ (80053cc <__NVIC_EnableIRQ+0x38>)
 80053ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b2:	095b      	lsrs	r3, r3, #5
 80053b4:	2001      	movs	r0, #1
 80053b6:	fa00 f202 	lsl.w	r2, r0, r2
 80053ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	e000e100 	.word	0xe000e100

080053d0 <__NVIC_SetPriority>:
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	4603      	mov	r3, r0
 80053d8:	6039      	str	r1, [r7, #0]
 80053da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	db0a      	blt.n	80053fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	490c      	ldr	r1, [pc, #48]	@ (800541c <__NVIC_SetPriority+0x4c>)
 80053ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ee:	0112      	lsls	r2, r2, #4
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	440b      	add	r3, r1
 80053f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80053f8:	e00a      	b.n	8005410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	4908      	ldr	r1, [pc, #32]	@ (8005420 <__NVIC_SetPriority+0x50>)
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	3b04      	subs	r3, #4
 8005408:	0112      	lsls	r2, r2, #4
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	440b      	add	r3, r1
 800540e:	761a      	strb	r2, [r3, #24]
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	e000e100 	.word	0xe000e100
 8005420:	e000ed00 	.word	0xe000ed00

08005424 <NVIC_EncodePriority>:
{
 8005424:	b480      	push	{r7}
 8005426:	b089      	sub	sp, #36	@ 0x24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f1c3 0307 	rsb	r3, r3, #7
 800543e:	2b04      	cmp	r3, #4
 8005440:	bf28      	it	cs
 8005442:	2304      	movcs	r3, #4
 8005444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	3304      	adds	r3, #4
 800544a:	2b06      	cmp	r3, #6
 800544c:	d902      	bls.n	8005454 <NVIC_EncodePriority+0x30>
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	3b03      	subs	r3, #3
 8005452:	e000      	b.n	8005456 <NVIC_EncodePriority+0x32>
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005458:	f04f 32ff 	mov.w	r2, #4294967295
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43da      	mvns	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	401a      	ands	r2, r3
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800546c:	f04f 31ff 	mov.w	r1, #4294967295
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	fa01 f303 	lsl.w	r3, r1, r3
 8005476:	43d9      	mvns	r1, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800547c:	4313      	orrs	r3, r2
}
 800547e:	4618      	mov	r0, r3
 8005480:	3724      	adds	r7, #36	@ 0x24
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3b01      	subs	r3, #1
 8005498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800549c:	d301      	bcc.n	80054a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800549e:	2301      	movs	r3, #1
 80054a0:	e00f      	b.n	80054c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054a2:	4a0a      	ldr	r2, [pc, #40]	@ (80054cc <SysTick_Config+0x40>)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054aa:	210f      	movs	r1, #15
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295
 80054b0:	f7ff ff8e 	bl	80053d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054b4:	4b05      	ldr	r3, [pc, #20]	@ (80054cc <SysTick_Config+0x40>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054ba:	4b04      	ldr	r3, [pc, #16]	@ (80054cc <SysTick_Config+0x40>)
 80054bc:	2207      	movs	r2, #7
 80054be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	e000e010 	.word	0xe000e010

080054d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff ff29 	bl	8005330 <__NVIC_SetPriorityGrouping>
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b086      	sub	sp, #24
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	4603      	mov	r3, r0
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80054f4:	2300      	movs	r3, #0
 80054f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054f8:	f7ff ff3e 	bl	8005378 <__NVIC_GetPriorityGrouping>
 80054fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	6978      	ldr	r0, [r7, #20]
 8005504:	f7ff ff8e 	bl	8005424 <NVIC_EncodePriority>
 8005508:	4602      	mov	r2, r0
 800550a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800550e:	4611      	mov	r1, r2
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff ff5d 	bl	80053d0 <__NVIC_SetPriority>
}
 8005516:	bf00      	nop
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	4603      	mov	r3, r0
 8005526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff ff31 	bl	8005394 <__NVIC_EnableIRQ>
}
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b082      	sub	sp, #8
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff ffa2 	bl	800548c <SysTick_Config>
 8005548:	4603      	mov	r3, r0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e098      	b.n	8005698 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	4b4d      	ldr	r3, [pc, #308]	@ (80056a4 <HAL_DMA_Init+0x150>)
 800556e:	429a      	cmp	r2, r3
 8005570:	d80f      	bhi.n	8005592 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	4b4b      	ldr	r3, [pc, #300]	@ (80056a8 <HAL_DMA_Init+0x154>)
 800557a:	4413      	add	r3, r2
 800557c:	4a4b      	ldr	r2, [pc, #300]	@ (80056ac <HAL_DMA_Init+0x158>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	091b      	lsrs	r3, r3, #4
 8005584:	009a      	lsls	r2, r3, #2
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a48      	ldr	r2, [pc, #288]	@ (80056b0 <HAL_DMA_Init+0x15c>)
 800558e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005590:	e00e      	b.n	80055b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	4b46      	ldr	r3, [pc, #280]	@ (80056b4 <HAL_DMA_Init+0x160>)
 800559a:	4413      	add	r3, r2
 800559c:	4a43      	ldr	r2, [pc, #268]	@ (80056ac <HAL_DMA_Init+0x158>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	009a      	lsls	r2, r3, #2
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a42      	ldr	r2, [pc, #264]	@ (80056b8 <HAL_DMA_Init+0x164>)
 80055ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80055c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80055d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800560a:	d039      	beq.n	8005680 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005610:	4a27      	ldr	r2, [pc, #156]	@ (80056b0 <HAL_DMA_Init+0x15c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d11a      	bne.n	800564c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005616:	4b29      	ldr	r3, [pc, #164]	@ (80056bc <HAL_DMA_Init+0x168>)
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	f003 031c 	and.w	r3, r3, #28
 8005622:	210f      	movs	r1, #15
 8005624:	fa01 f303 	lsl.w	r3, r1, r3
 8005628:	43db      	mvns	r3, r3
 800562a:	4924      	ldr	r1, [pc, #144]	@ (80056bc <HAL_DMA_Init+0x168>)
 800562c:	4013      	ands	r3, r2
 800562e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005630:	4b22      	ldr	r3, [pc, #136]	@ (80056bc <HAL_DMA_Init+0x168>)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6859      	ldr	r1, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563c:	f003 031c 	and.w	r3, r3, #28
 8005640:	fa01 f303 	lsl.w	r3, r1, r3
 8005644:	491d      	ldr	r1, [pc, #116]	@ (80056bc <HAL_DMA_Init+0x168>)
 8005646:	4313      	orrs	r3, r2
 8005648:	600b      	str	r3, [r1, #0]
 800564a:	e019      	b.n	8005680 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800564c:	4b1c      	ldr	r3, [pc, #112]	@ (80056c0 <HAL_DMA_Init+0x16c>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005654:	f003 031c 	and.w	r3, r3, #28
 8005658:	210f      	movs	r1, #15
 800565a:	fa01 f303 	lsl.w	r3, r1, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	4917      	ldr	r1, [pc, #92]	@ (80056c0 <HAL_DMA_Init+0x16c>)
 8005662:	4013      	ands	r3, r2
 8005664:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005666:	4b16      	ldr	r3, [pc, #88]	@ (80056c0 <HAL_DMA_Init+0x16c>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6859      	ldr	r1, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005672:	f003 031c 	and.w	r3, r3, #28
 8005676:	fa01 f303 	lsl.w	r3, r1, r3
 800567a:	4911      	ldr	r1, [pc, #68]	@ (80056c0 <HAL_DMA_Init+0x16c>)
 800567c:	4313      	orrs	r3, r2
 800567e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	40020407 	.word	0x40020407
 80056a8:	bffdfff8 	.word	0xbffdfff8
 80056ac:	cccccccd 	.word	0xcccccccd
 80056b0:	40020000 	.word	0x40020000
 80056b4:	bffdfbf8 	.word	0xbffdfbf8
 80056b8:	40020400 	.word	0x40020400
 80056bc:	400200a8 	.word	0x400200a8
 80056c0:	400204a8 	.word	0x400204a8

080056c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d005      	beq.n	80056e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2204      	movs	r2, #4
 80056e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
 80056e6:	e029      	b.n	800573c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 020e 	bic.w	r2, r2, #14
 80056f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0201 	bic.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570c:	f003 021c 	and.w	r2, r3, #28
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005714:	2101      	movs	r1, #1
 8005716:	fa01 f202 	lsl.w	r2, r1, r2
 800571a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	4798      	blx	r3
    }
  }
  return status;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005762:	f003 031c 	and.w	r3, r3, #28
 8005766:	2204      	movs	r2, #4
 8005768:	409a      	lsls	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4013      	ands	r3, r2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d026      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x7a>
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d021      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0320 	and.w	r3, r3, #32
 8005786:	2b00      	cmp	r3, #0
 8005788:	d107      	bne.n	800579a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0204 	bic.w	r2, r2, #4
 8005798:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579e:	f003 021c 	and.w	r2, r3, #28
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a6:	2104      	movs	r1, #4
 80057a8:	fa01 f202 	lsl.w	r2, r1, r2
 80057ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d071      	beq.n	800589a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80057be:	e06c      	b.n	800589a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c4:	f003 031c 	and.w	r3, r3, #28
 80057c8:	2202      	movs	r2, #2
 80057ca:	409a      	lsls	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d02e      	beq.n	8005832 <HAL_DMA_IRQHandler+0xec>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d029      	beq.n	8005832 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 020a 	bic.w	r2, r2, #10
 80057fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005808:	f003 021c 	and.w	r2, r3, #28
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005810:	2102      	movs	r1, #2
 8005812:	fa01 f202 	lsl.w	r2, r1, r2
 8005816:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	2b00      	cmp	r3, #0
 8005826:	d038      	beq.n	800589a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005830:	e033      	b.n	800589a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	f003 031c 	and.w	r3, r3, #28
 800583a:	2208      	movs	r2, #8
 800583c:	409a      	lsls	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4013      	ands	r3, r2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d02a      	beq.n	800589c <HAL_DMA_IRQHandler+0x156>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b00      	cmp	r3, #0
 800584e:	d025      	beq.n	800589c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 020e 	bic.w	r2, r2, #14
 800585e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005864:	f003 021c 	and.w	r2, r3, #28
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586c:	2101      	movs	r1, #1
 800586e:	fa01 f202 	lsl.w	r2, r1, r2
 8005872:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588e:	2b00      	cmp	r3, #0
 8005890:	d004      	beq.n	800589c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800589a:	bf00      	nop
 800589c:	bf00      	nop
}
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058b2:	e154      	b.n	8005b5e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	2101      	movs	r1, #1
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	fa01 f303 	lsl.w	r3, r1, r3
 80058c0:	4013      	ands	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 8146 	beq.w	8005b58 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d005      	beq.n	80058e4 <HAL_GPIO_Init+0x40>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d130      	bne.n	8005946 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	2203      	movs	r2, #3
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	43db      	mvns	r3, r3
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4013      	ands	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800591a:	2201      	movs	r2, #1
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4013      	ands	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	091b      	lsrs	r3, r3, #4
 8005930:	f003 0201 	and.w	r2, r3, #1
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	2b03      	cmp	r3, #3
 8005950:	d017      	beq.n	8005982 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	2203      	movs	r2, #3
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43db      	mvns	r3, r3
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4013      	ands	r3, r2
 8005968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d123      	bne.n	80059d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	08da      	lsrs	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3208      	adds	r2, #8
 8005996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	220f      	movs	r2, #15
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	43db      	mvns	r3, r3
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4013      	ands	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	fa02 f303 	lsl.w	r3, r2, r3
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	08da      	lsrs	r2, r3, #3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3208      	adds	r2, #8
 80059d0:	6939      	ldr	r1, [r7, #16]
 80059d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	2203      	movs	r2, #3
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43db      	mvns	r3, r3
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4013      	ands	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f003 0203 	and.w	r2, r3, #3
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 80a0 	beq.w	8005b58 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a18:	4b58      	ldr	r3, [pc, #352]	@ (8005b7c <HAL_GPIO_Init+0x2d8>)
 8005a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a1c:	4a57      	ldr	r2, [pc, #348]	@ (8005b7c <HAL_GPIO_Init+0x2d8>)
 8005a1e:	f043 0301 	orr.w	r3, r3, #1
 8005a22:	6613      	str	r3, [r2, #96]	@ 0x60
 8005a24:	4b55      	ldr	r3, [pc, #340]	@ (8005b7c <HAL_GPIO_Init+0x2d8>)
 8005a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	60bb      	str	r3, [r7, #8]
 8005a2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005a30:	4a53      	ldr	r2, [pc, #332]	@ (8005b80 <HAL_GPIO_Init+0x2dc>)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	089b      	lsrs	r3, r3, #2
 8005a36:	3302      	adds	r3, #2
 8005a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	220f      	movs	r2, #15
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4013      	ands	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005a5a:	d019      	beq.n	8005a90 <HAL_GPIO_Init+0x1ec>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a49      	ldr	r2, [pc, #292]	@ (8005b84 <HAL_GPIO_Init+0x2e0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d013      	beq.n	8005a8c <HAL_GPIO_Init+0x1e8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a48      	ldr	r2, [pc, #288]	@ (8005b88 <HAL_GPIO_Init+0x2e4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00d      	beq.n	8005a88 <HAL_GPIO_Init+0x1e4>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a47      	ldr	r2, [pc, #284]	@ (8005b8c <HAL_GPIO_Init+0x2e8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d007      	beq.n	8005a84 <HAL_GPIO_Init+0x1e0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a46      	ldr	r2, [pc, #280]	@ (8005b90 <HAL_GPIO_Init+0x2ec>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d101      	bne.n	8005a80 <HAL_GPIO_Init+0x1dc>
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	e008      	b.n	8005a92 <HAL_GPIO_Init+0x1ee>
 8005a80:	2307      	movs	r3, #7
 8005a82:	e006      	b.n	8005a92 <HAL_GPIO_Init+0x1ee>
 8005a84:	2303      	movs	r3, #3
 8005a86:	e004      	b.n	8005a92 <HAL_GPIO_Init+0x1ee>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	e002      	b.n	8005a92 <HAL_GPIO_Init+0x1ee>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <HAL_GPIO_Init+0x1ee>
 8005a90:	2300      	movs	r3, #0
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	f002 0203 	and.w	r2, r2, #3
 8005a98:	0092      	lsls	r2, r2, #2
 8005a9a:	4093      	lsls	r3, r2
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005aa2:	4937      	ldr	r1, [pc, #220]	@ (8005b80 <HAL_GPIO_Init+0x2dc>)
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	089b      	lsrs	r3, r3, #2
 8005aa8:	3302      	adds	r3, #2
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ab0:	4b38      	ldr	r3, [pc, #224]	@ (8005b94 <HAL_GPIO_Init+0x2f0>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4013      	ands	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ad4:	4a2f      	ldr	r2, [pc, #188]	@ (8005b94 <HAL_GPIO_Init+0x2f0>)
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005ada:	4b2e      	ldr	r3, [pc, #184]	@ (8005b94 <HAL_GPIO_Init+0x2f0>)
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005afe:	4a25      	ldr	r2, [pc, #148]	@ (8005b94 <HAL_GPIO_Init+0x2f0>)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005b04:	4b23      	ldr	r3, [pc, #140]	@ (8005b94 <HAL_GPIO_Init+0x2f0>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4013      	ands	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b28:	4a1a      	ldr	r2, [pc, #104]	@ (8005b94 <HAL_GPIO_Init+0x2f0>)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005b2e:	4b19      	ldr	r3, [pc, #100]	@ (8005b94 <HAL_GPIO_Init+0x2f0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	43db      	mvns	r3, r3
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005b52:	4a10      	ldr	r2, [pc, #64]	@ (8005b94 <HAL_GPIO_Init+0x2f0>)
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f47f aea3 	bne.w	80058b4 <HAL_GPIO_Init+0x10>
  }
}
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
 8005b72:	371c      	adds	r7, #28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	40010000 	.word	0x40010000
 8005b84:	48000400 	.word	0x48000400
 8005b88:	48000800 	.word	0x48000800
 8005b8c:	48000c00 	.word	0x48000c00
 8005b90:	48001000 	.word	0x48001000
 8005b94:	40010400 	.word	0x40010400

08005b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	807b      	strh	r3, [r7, #2]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ba8:	787b      	ldrb	r3, [r7, #1]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bae:	887a      	ldrh	r2, [r7, #2]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005bb4:	e002      	b.n	8005bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005bb6:	887a      	ldrh	r2, [r7, #2]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e095      	b.n	8005d06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d108      	bne.n	8005bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bea:	d009      	beq.n	8005c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	61da      	str	r2, [r3, #28]
 8005bf2:	e005      	b.n	8005c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fb ff12 	bl	8001a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c40:	d902      	bls.n	8005c48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	e002      	b.n	8005c4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005c56:	d007      	beq.n	8005c68 <HAL_SPI_Init+0xa0>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c60:	d002      	beq.n	8005c68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005caa:	ea42 0103 	orr.w	r1, r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	0c1b      	lsrs	r3, r3, #16
 8005cc4:	f003 0204 	and.w	r2, r3, #4
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005ce4:	ea42 0103 	orr.w	r1, r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b088      	sub	sp, #32
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_SPI_Transmit+0x22>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e15f      	b.n	8005ff0 <HAL_SPI_Transmit+0x2e2>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d38:	f7ff faee 	bl	8005318 <HAL_GetTick>
 8005d3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d002      	beq.n	8005d54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d52:	e148      	b.n	8005fe6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <HAL_SPI_Transmit+0x52>
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d64:	e13f      	b.n	8005fe6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2203      	movs	r2, #3
 8005d6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	88fa      	ldrh	r2, [r7, #6]
 8005d7e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	88fa      	ldrh	r2, [r7, #6]
 8005d84:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005db0:	d10f      	bne.n	8005dd2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ddc:	2b40      	cmp	r3, #64	@ 0x40
 8005dde:	d007      	beq.n	8005df0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005df8:	d94f      	bls.n	8005e9a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_SPI_Transmit+0xfa>
 8005e02:	8afb      	ldrh	r3, [r7, #22]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d142      	bne.n	8005e8e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0c:	881a      	ldrh	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e18:	1c9a      	adds	r2, r3, #2
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3b01      	subs	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e2c:	e02f      	b.n	8005e8e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d112      	bne.n	8005e62 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e40:	881a      	ldrh	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4c:	1c9a      	adds	r2, r3, #2
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e60:	e015      	b.n	8005e8e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e62:	f7ff fa59 	bl	8005318 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d803      	bhi.n	8005e7a <HAL_SPI_Transmit+0x16c>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e78:	d102      	bne.n	8005e80 <HAL_SPI_Transmit+0x172>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005e8c:	e0ab      	b.n	8005fe6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1ca      	bne.n	8005e2e <HAL_SPI_Transmit+0x120>
 8005e98:	e080      	b.n	8005f9c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <HAL_SPI_Transmit+0x19a>
 8005ea2:	8afb      	ldrh	r3, [r7, #22]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d174      	bne.n	8005f92 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d912      	bls.n	8005ed8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb6:	881a      	ldrh	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec2:	1c9a      	adds	r2, r3, #2
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b02      	subs	r3, #2
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ed6:	e05c      	b.n	8005f92 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	330c      	adds	r3, #12
 8005ee2:	7812      	ldrb	r2, [r2, #0]
 8005ee4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005efe:	e048      	b.n	8005f92 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d12b      	bne.n	8005f66 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d912      	bls.n	8005f3e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1c:	881a      	ldrh	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f28:	1c9a      	adds	r2, r3, #2
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b02      	subs	r3, #2
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f3c:	e029      	b.n	8005f92 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	7812      	ldrb	r2, [r2, #0]
 8005f4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f64:	e015      	b.n	8005f92 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f66:	f7ff f9d7 	bl	8005318 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d803      	bhi.n	8005f7e <HAL_SPI_Transmit+0x270>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7c:	d102      	bne.n	8005f84 <HAL_SPI_Transmit+0x276>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d106      	bne.n	8005f92 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005f90:	e029      	b.n	8005fe6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1b1      	bne.n	8005f00 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 fe0d 	bl	8006bc0 <SPI_EndRxTxTransaction>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	613b      	str	r3, [r7, #16]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	613b      	str	r3, [r7, #16]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	e003      	b.n	8005fe6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005fee:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3720      	adds	r7, #32
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b01      	cmp	r3, #1
 8006016:	d002      	beq.n	800601e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006018:	2302      	movs	r3, #2
 800601a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800601c:	e11a      	b.n	8006254 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006026:	d112      	bne.n	800604e <HAL_SPI_Receive+0x56>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10e      	bne.n	800604e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2204      	movs	r2, #4
 8006034:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006038:	88fa      	ldrh	r2, [r7, #6]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	4613      	mov	r3, r2
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f90e 	bl	8006266 <HAL_SPI_TransmitReceive>
 800604a:	4603      	mov	r3, r0
 800604c:	e107      	b.n	800625e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_SPI_Receive+0x64>
 8006058:	2302      	movs	r3, #2
 800605a:	e100      	b.n	800625e <HAL_SPI_Receive+0x266>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006064:	f7ff f958 	bl	8005318 <HAL_GetTick>
 8006068:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <HAL_SPI_Receive+0x7e>
 8006070:	88fb      	ldrh	r3, [r7, #6]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d102      	bne.n	800607c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	75fb      	strb	r3, [r7, #23]
    goto error;
 800607a:	e0eb      	b.n	8006254 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2204      	movs	r2, #4
 8006080:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	88fa      	ldrh	r2, [r7, #6]
 8006094:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060c6:	d908      	bls.n	80060da <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060d6:	605a      	str	r2, [r3, #4]
 80060d8:	e007      	b.n	80060ea <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80060e8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060f2:	d10f      	bne.n	8006114 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006102:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006112:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611e:	2b40      	cmp	r3, #64	@ 0x40
 8006120:	d007      	beq.n	8006132 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006130:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800613a:	d86f      	bhi.n	800621c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800613c:	e034      	b.n	80061a8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b01      	cmp	r3, #1
 800614a:	d117      	bne.n	800617c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f103 020c 	add.w	r2, r3, #12
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006158:	7812      	ldrb	r2, [r2, #0]
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800617a:	e015      	b.n	80061a8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800617c:	f7ff f8cc 	bl	8005318 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d803      	bhi.n	8006194 <HAL_SPI_Receive+0x19c>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006192:	d102      	bne.n	800619a <HAL_SPI_Receive+0x1a2>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d106      	bne.n	80061a8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80061a6:	e055      	b.n	8006254 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1c4      	bne.n	800613e <HAL_SPI_Receive+0x146>
 80061b4:	e038      	b.n	8006228 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d115      	bne.n	80061f0 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ce:	b292      	uxth	r2, r2
 80061d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	1c9a      	adds	r2, r3, #2
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80061ee:	e015      	b.n	800621c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061f0:	f7ff f892 	bl	8005318 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d803      	bhi.n	8006208 <HAL_SPI_Receive+0x210>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006206:	d102      	bne.n	800620e <HAL_SPI_Receive+0x216>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800621a:	e01b      	b.n	8006254 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1c6      	bne.n	80061b6 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fc6f 	bl	8006b10 <SPI_EndRxTransaction>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	75fb      	strb	r3, [r7, #23]
 800624a:	e003      	b.n	8006254 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800625c:	7dfb      	ldrb	r3, [r7, #23]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b08a      	sub	sp, #40	@ 0x28
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	607a      	str	r2, [r7, #4]
 8006272:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006274:	2301      	movs	r3, #1
 8006276:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_SPI_TransmitReceive+0x26>
 8006288:	2302      	movs	r3, #2
 800628a:	e20a      	b.n	80066a2 <HAL_SPI_TransmitReceive+0x43c>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006294:	f7ff f840 	bl	8005318 <HAL_GetTick>
 8006298:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062a0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80062a8:	887b      	ldrh	r3, [r7, #2]
 80062aa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80062ac:	887b      	ldrh	r3, [r7, #2]
 80062ae:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062b0:	7efb      	ldrb	r3, [r7, #27]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d00e      	beq.n	80062d4 <HAL_SPI_TransmitReceive+0x6e>
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062bc:	d106      	bne.n	80062cc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <HAL_SPI_TransmitReceive+0x66>
 80062c6:	7efb      	ldrb	r3, [r7, #27]
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d003      	beq.n	80062d4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80062cc:	2302      	movs	r3, #2
 80062ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80062d2:	e1e0      	b.n	8006696 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <HAL_SPI_TransmitReceive+0x80>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <HAL_SPI_TransmitReceive+0x80>
 80062e0:	887b      	ldrh	r3, [r7, #2]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d103      	bne.n	80062ee <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80062ec:	e1d3      	b.n	8006696 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d003      	beq.n	8006302 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2205      	movs	r2, #5
 80062fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	887a      	ldrh	r2, [r7, #2]
 8006312:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	887a      	ldrh	r2, [r7, #2]
 800631a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	887a      	ldrh	r2, [r7, #2]
 8006328:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	887a      	ldrh	r2, [r7, #2]
 800632e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006344:	d802      	bhi.n	800634c <HAL_SPI_TransmitReceive+0xe6>
 8006346:	8a3b      	ldrh	r3, [r7, #16]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d908      	bls.n	800635e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800635a:	605a      	str	r2, [r3, #4]
 800635c:	e007      	b.n	800636e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800636c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006378:	2b40      	cmp	r3, #64	@ 0x40
 800637a:	d007      	beq.n	800638c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800638a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006394:	f240 8081 	bls.w	800649a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_SPI_TransmitReceive+0x140>
 80063a0:	8a7b      	ldrh	r3, [r7, #18]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d16d      	bne.n	8006482 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063aa:	881a      	ldrh	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b6:	1c9a      	adds	r2, r3, #2
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ca:	e05a      	b.n	8006482 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d11b      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x1ac>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063de:	b29b      	uxth	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d016      	beq.n	8006412 <HAL_SPI_TransmitReceive+0x1ac>
 80063e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d113      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ee:	881a      	ldrh	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fa:	1c9a      	adds	r2, r3, #2
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b01      	cmp	r3, #1
 800641e:	d11c      	bne.n	800645a <HAL_SPI_TransmitReceive+0x1f4>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d016      	beq.n	800645a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006436:	b292      	uxth	r2, r2
 8006438:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643e:	1c9a      	adds	r2, r3, #2
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006456:	2301      	movs	r3, #1
 8006458:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800645a:	f7fe ff5d 	bl	8005318 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006466:	429a      	cmp	r2, r3
 8006468:	d80b      	bhi.n	8006482 <HAL_SPI_TransmitReceive+0x21c>
 800646a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d007      	beq.n	8006482 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006480:	e109      	b.n	8006696 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d19f      	bne.n	80063cc <HAL_SPI_TransmitReceive+0x166>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d199      	bne.n	80063cc <HAL_SPI_TransmitReceive+0x166>
 8006498:	e0e3      	b.n	8006662 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_SPI_TransmitReceive+0x244>
 80064a2:	8a7b      	ldrh	r3, [r7, #18]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	f040 80cf 	bne.w	8006648 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d912      	bls.n	80064da <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b8:	881a      	ldrh	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c4:	1c9a      	adds	r2, r3, #2
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b02      	subs	r3, #2
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064d8:	e0b6      	b.n	8006648 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	330c      	adds	r3, #12
 80064e4:	7812      	ldrb	r2, [r2, #0]
 80064e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006500:	e0a2      	b.n	8006648 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b02      	cmp	r3, #2
 800650e:	d134      	bne.n	800657a <HAL_SPI_TransmitReceive+0x314>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d02f      	beq.n	800657a <HAL_SPI_TransmitReceive+0x314>
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	2b01      	cmp	r3, #1
 800651e:	d12c      	bne.n	800657a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b01      	cmp	r3, #1
 8006528:	d912      	bls.n	8006550 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652e:	881a      	ldrh	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653a:	1c9a      	adds	r2, r3, #2
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b02      	subs	r3, #2
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800654e:	e012      	b.n	8006576 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	7812      	ldrb	r2, [r2, #0]
 800655c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b01      	cmp	r3, #1
 8006586:	d148      	bne.n	800661a <HAL_SPI_TransmitReceive+0x3b4>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800658e:	b29b      	uxth	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d042      	beq.n	800661a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b01      	cmp	r3, #1
 800659e:	d923      	bls.n	80065e8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065aa:	b292      	uxth	r2, r2
 80065ac:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b2:	1c9a      	adds	r2, r3, #2
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3b02      	subs	r3, #2
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d81f      	bhi.n	8006616 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80065e4:	605a      	str	r2, [r3, #4]
 80065e6:	e016      	b.n	8006616 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f103 020c 	add.w	r2, r3, #12
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f4:	7812      	ldrb	r2, [r2, #0]
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800660a:	b29b      	uxth	r3, r3
 800660c:	3b01      	subs	r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006616:	2301      	movs	r3, #1
 8006618:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800661a:	f7fe fe7d 	bl	8005318 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006626:	429a      	cmp	r2, r3
 8006628:	d803      	bhi.n	8006632 <HAL_SPI_TransmitReceive+0x3cc>
 800662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d102      	bne.n	8006638 <HAL_SPI_TransmitReceive+0x3d2>
 8006632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006634:	2b00      	cmp	r3, #0
 8006636:	d107      	bne.n	8006648 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006646:	e026      	b.n	8006696 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	f47f af57 	bne.w	8006502 <HAL_SPI_TransmitReceive+0x29c>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	f47f af50 	bne.w	8006502 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 faaa 	bl	8006bc0 <SPI_EndRxTxTransaction>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d005      	beq.n	800667e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2220      	movs	r2, #32
 800667c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800668c:	e003      	b.n	8006696 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800669e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3728      	adds	r7, #40	@ 0x28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10e      	bne.n	80066ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d009      	beq.n	80066ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d004      	beq.n	80066ec <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
    return;
 80066ea:	e0ce      	b.n	800688a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d009      	beq.n	800670a <HAL_SPI_IRQHandler+0x5e>
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	4798      	blx	r3
    return;
 8006708:	e0bf      	b.n	800688a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10a      	bne.n	800672a <HAL_SPI_IRQHandler+0x7e>
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800671a:	2b00      	cmp	r3, #0
 800671c:	d105      	bne.n	800672a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 80b0 	beq.w	800688a <HAL_SPI_IRQHandler+0x1de>
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 80aa 	beq.w	800688a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800673c:	2b00      	cmp	r3, #0
 800673e:	d023      	beq.n	8006788 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b03      	cmp	r3, #3
 800674a:	d011      	beq.n	8006770 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006750:	f043 0204 	orr.w	r2, r3, #4
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	e00b      	b.n	8006788 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006770:	2300      	movs	r3, #0
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	693b      	ldr	r3, [r7, #16]
        return;
 8006786:	e080      	b.n	800688a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	f003 0320 	and.w	r3, r3, #32
 800678e:	2b00      	cmp	r3, #0
 8006790:	d014      	beq.n	80067bc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006796:	f043 0201 	orr.w	r2, r3, #1
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00c      	beq.n	80067e0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ca:	f043 0208 	orr.w	r2, r3, #8
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80067d2:	2300      	movs	r3, #0
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	60bb      	str	r3, [r7, #8]
 80067de:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d04f      	beq.n	8006888 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067f6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <HAL_SPI_IRQHandler+0x168>
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d034      	beq.n	800687e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 0203 	bic.w	r2, r2, #3
 8006822:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006828:	2b00      	cmp	r3, #0
 800682a:	d011      	beq.n	8006850 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006830:	4a17      	ldr	r2, [pc, #92]	@ (8006890 <HAL_SPI_IRQHandler+0x1e4>)
 8006832:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe ff43 	bl	80056c4 <HAL_DMA_Abort_IT>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006848:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006854:	2b00      	cmp	r3, #0
 8006856:	d016      	beq.n	8006886 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800685c:	4a0c      	ldr	r2, [pc, #48]	@ (8006890 <HAL_SPI_IRQHandler+0x1e4>)
 800685e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe ff2d 	bl	80056c4 <HAL_DMA_Abort_IT>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006874:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800687c:	e003      	b.n	8006886 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f808 	bl	8006894 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006884:	e000      	b.n	8006888 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006886:	bf00      	nop
    return;
 8006888:	bf00      	nop
  }
}
 800688a:	3720      	adds	r7, #32
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	080068a9 	.word	0x080068a9

08006894 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f7ff ffe5 	bl	8006894 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	4613      	mov	r3, r2
 80068e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068e4:	f7fe fd18 	bl	8005318 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ec:	1a9b      	subs	r3, r3, r2
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	4413      	add	r3, r2
 80068f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068f4:	f7fe fd10 	bl	8005318 <HAL_GetTick>
 80068f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068fa:	4b39      	ldr	r3, [pc, #228]	@ (80069e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	015b      	lsls	r3, r3, #5
 8006900:	0d1b      	lsrs	r3, r3, #20
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	fb02 f303 	mul.w	r3, r2, r3
 8006908:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800690a:	e054      	b.n	80069b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d050      	beq.n	80069b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006914:	f7fe fd00 	bl	8005318 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	429a      	cmp	r2, r3
 8006922:	d902      	bls.n	800692a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d13d      	bne.n	80069a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006938:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006942:	d111      	bne.n	8006968 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800694c:	d004      	beq.n	8006958 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006956:	d107      	bne.n	8006968 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006966:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006970:	d10f      	bne.n	8006992 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006990:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e017      	b.n	80069d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4013      	ands	r3, r2
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	bf0c      	ite	eq
 80069c6:	2301      	moveq	r3, #1
 80069c8:	2300      	movne	r3, #0
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	461a      	mov	r2, r3
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d19b      	bne.n	800690c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3720      	adds	r7, #32
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20000000 	.word	0x20000000

080069e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08a      	sub	sp, #40	@ 0x28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80069f6:	f7fe fc8f 	bl	8005318 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fe:	1a9b      	subs	r3, r3, r2
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	4413      	add	r3, r2
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006a06:	f7fe fc87 	bl	8005318 <HAL_GetTick>
 8006a0a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006a14:	4b3d      	ldr	r3, [pc, #244]	@ (8006b0c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	00da      	lsls	r2, r3, #3
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	0d1b      	lsrs	r3, r3, #20
 8006a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a26:	fb02 f303 	mul.w	r3, r2, r3
 8006a2a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006a2c:	e060      	b.n	8006af0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006a34:	d107      	bne.n	8006a46 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d104      	bne.n	8006a46 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006a44:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4c:	d050      	beq.n	8006af0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a4e:	f7fe fc63 	bl	8005318 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d902      	bls.n	8006a64 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d13d      	bne.n	8006ae0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006a72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a7c:	d111      	bne.n	8006aa2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a86:	d004      	beq.n	8006a92 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a90:	d107      	bne.n	8006aa2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aa0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006aaa:	d10f      	bne.n	8006acc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006aca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e010      	b.n	8006b02 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	4013      	ands	r3, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d196      	bne.n	8006a2e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3728      	adds	r7, #40	@ 0x28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000000 	.word	0x20000000

08006b10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b24:	d111      	bne.n	8006b4a <SPI_EndRxTransaction+0x3a>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b2e:	d004      	beq.n	8006b3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b38:	d107      	bne.n	8006b4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b48:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2200      	movs	r2, #0
 8006b52:	2180      	movs	r1, #128	@ 0x80
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f7ff febd 	bl	80068d4 <SPI_WaitFlagStateUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b64:	f043 0220 	orr.w	r2, r3, #32
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e023      	b.n	8006bb8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b78:	d11d      	bne.n	8006bb6 <SPI_EndRxTransaction+0xa6>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b82:	d004      	beq.n	8006b8e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b8c:	d113      	bne.n	8006bb6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff ff22 	bl	80069e4 <SPI_WaitFifoStateUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d007      	beq.n	8006bb6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006baa:	f043 0220 	orr.w	r2, r3, #32
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e000      	b.n	8006bb8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7ff ff03 	bl	80069e4 <SPI_WaitFifoStateUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d007      	beq.n	8006bf4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006be8:	f043 0220 	orr.w	r2, r3, #32
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e027      	b.n	8006c44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2180      	movs	r1, #128	@ 0x80
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fe68 	bl	80068d4 <SPI_WaitFlagStateUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d007      	beq.n	8006c1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c0e:	f043 0220 	orr.w	r2, r3, #32
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e014      	b.n	8006c44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff fedc 	bl	80069e4 <SPI_WaitFifoStateUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c36:	f043 0220 	orr.w	r2, r3, #32
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e000      	b.n	8006c44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <LL_GPIO_SetPinMode>:
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b08b      	sub	sp, #44	@ 0x2c
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	fa93 f3a3 	rbit	r3, r3
 8006c66:	613b      	str	r3, [r7, #16]
  return result;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006c72:	2320      	movs	r3, #32
 8006c74:	e003      	b.n	8006c7e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	fab3 f383 	clz	r3, r3
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	2103      	movs	r1, #3
 8006c82:	fa01 f303 	lsl.w	r3, r1, r3
 8006c86:	43db      	mvns	r3, r3
 8006c88:	401a      	ands	r2, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	fa93 f3a3 	rbit	r3, r3
 8006c94:	61fb      	str	r3, [r7, #28]
  return result;
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006ca0:	2320      	movs	r3, #32
 8006ca2:	e003      	b.n	8006cac <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca6:	fab3 f383 	clz	r3, r3
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	601a      	str	r2, [r3, #0]
}
 8006cba:	bf00      	nop
 8006cbc:	372c      	adds	r7, #44	@ 0x2c
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <LL_GPIO_SetPinOutputType>:
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b085      	sub	sp, #20
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	401a      	ands	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	fb01 f303 	mul.w	r3, r1, r3
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	605a      	str	r2, [r3, #4]
}
 8006cea:	bf00      	nop
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <LL_GPIO_SetPinSpeed>:
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b08b      	sub	sp, #44	@ 0x2c
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	689a      	ldr	r2, [r3, #8]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	fa93 f3a3 	rbit	r3, r3
 8006d10:	613b      	str	r3, [r7, #16]
  return result;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006d1c:	2320      	movs	r3, #32
 8006d1e:	e003      	b.n	8006d28 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	fab3 f383 	clz	r3, r3
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	2103      	movs	r1, #3
 8006d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d30:	43db      	mvns	r3, r3
 8006d32:	401a      	ands	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	fa93 f3a3 	rbit	r3, r3
 8006d3e:	61fb      	str	r3, [r7, #28]
  return result;
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006d4a:	2320      	movs	r3, #32
 8006d4c:	e003      	b.n	8006d56 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	fab3 f383 	clz	r3, r3
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	609a      	str	r2, [r3, #8]
}
 8006d64:	bf00      	nop
 8006d66:	372c      	adds	r7, #44	@ 0x2c
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <LL_GPIO_SetPinPull>:
{
 8006d70:	b480      	push	{r7}
 8006d72:	b08b      	sub	sp, #44	@ 0x2c
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	fa93 f3a3 	rbit	r3, r3
 8006d8a:	613b      	str	r3, [r7, #16]
  return result;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006d96:	2320      	movs	r3, #32
 8006d98:	e003      	b.n	8006da2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	fab3 f383 	clz	r3, r3
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	2103      	movs	r1, #3
 8006da6:	fa01 f303 	lsl.w	r3, r1, r3
 8006daa:	43db      	mvns	r3, r3
 8006dac:	401a      	ands	r2, r3
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	fa93 f3a3 	rbit	r3, r3
 8006db8:	61fb      	str	r3, [r7, #28]
  return result;
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006dc4:	2320      	movs	r3, #32
 8006dc6:	e003      	b.n	8006dd0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dca:	fab3 f383 	clz	r3, r3
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	6879      	ldr	r1, [r7, #4]
 8006dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	60da      	str	r2, [r3, #12]
}
 8006dde:	bf00      	nop
 8006de0:	372c      	adds	r7, #44	@ 0x2c
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <LL_GPIO_SetAFPin_0_7>:
{
 8006dea:	b480      	push	{r7}
 8006dec:	b08b      	sub	sp, #44	@ 0x2c
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a1a      	ldr	r2, [r3, #32]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	fa93 f3a3 	rbit	r3, r3
 8006e04:	613b      	str	r3, [r7, #16]
  return result;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006e10:	2320      	movs	r3, #32
 8006e12:	e003      	b.n	8006e1c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	fab3 f383 	clz	r3, r3
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	210f      	movs	r1, #15
 8006e20:	fa01 f303 	lsl.w	r3, r1, r3
 8006e24:	43db      	mvns	r3, r3
 8006e26:	401a      	ands	r2, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	fa93 f3a3 	rbit	r3, r3
 8006e32:	61fb      	str	r3, [r7, #28]
  return result;
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006e3e:	2320      	movs	r3, #32
 8006e40:	e003      	b.n	8006e4a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e44:	fab3 f383 	clz	r3, r3
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e52:	431a      	orrs	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	621a      	str	r2, [r3, #32]
}
 8006e58:	bf00      	nop
 8006e5a:	372c      	adds	r7, #44	@ 0x2c
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <LL_GPIO_SetAFPin_8_15>:
{
 8006e64:	b480      	push	{r7}
 8006e66:	b08b      	sub	sp, #44	@ 0x2c
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	0a1b      	lsrs	r3, r3, #8
 8006e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	fa93 f3a3 	rbit	r3, r3
 8006e80:	613b      	str	r3, [r7, #16]
  return result;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006e8c:	2320      	movs	r3, #32
 8006e8e:	e003      	b.n	8006e98 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	fab3 f383 	clz	r3, r3
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	210f      	movs	r1, #15
 8006e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea0:	43db      	mvns	r3, r3
 8006ea2:	401a      	ands	r2, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	0a1b      	lsrs	r3, r3, #8
 8006ea8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	fa93 f3a3 	rbit	r3, r3
 8006eb0:	61fb      	str	r3, [r7, #28]
  return result;
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006ebc:	2320      	movs	r3, #32
 8006ebe:	e003      	b.n	8006ec8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	fab3 f383 	clz	r3, r3
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006ed6:	bf00      	nop
 8006ed8:	372c      	adds	r7, #44	@ 0x2c
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b088      	sub	sp, #32
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	fa93 f3a3 	rbit	r3, r3
 8006ef8:	60fb      	str	r3, [r7, #12]
  return result;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <LL_GPIO_Init+0x26>
    return 32U;
 8006f04:	2320      	movs	r3, #32
 8006f06:	e003      	b.n	8006f10 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	fab3 f383 	clz	r3, r3
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006f12:	e048      	b.n	8006fa6 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	2101      	movs	r1, #1
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f20:	4013      	ands	r3, r2
 8006f22:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d03a      	beq.n	8006fa0 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d003      	beq.n	8006f3a <LL_GPIO_Init+0x58>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d10e      	bne.n	8006f58 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	69b9      	ldr	r1, [r7, #24]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff fed7 	bl	8006cf6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	6819      	ldr	r1, [r3, #0]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	461a      	mov	r2, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff feb7 	bl	8006cc6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	69b9      	ldr	r1, [r7, #24]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7ff ff05 	bl	8006d70 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d111      	bne.n	8006f92 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2bff      	cmp	r3, #255	@ 0xff
 8006f72:	d807      	bhi.n	8006f84 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	69b9      	ldr	r1, [r7, #24]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7ff ff34 	bl	8006dea <LL_GPIO_SetAFPin_0_7>
 8006f82:	e006      	b.n	8006f92 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	69b9      	ldr	r1, [r7, #24]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff ff69 	bl	8006e64 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	461a      	mov	r2, r3
 8006f98:	69b9      	ldr	r1, [r7, #24]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff fe56 	bl	8006c4c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1af      	bne.n	8006f14 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3720      	adds	r7, #32
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <LL_I2C_Enable>:
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b083      	sub	sp, #12
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f043 0201 	orr.w	r2, r3, #1
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	601a      	str	r2, [r3, #0]
}
 8006fd2:	bf00      	nop
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <LL_I2C_Disable>:
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f023 0201 	bic.w	r2, r3, #1
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	601a      	str	r2, [r3, #0]
}
 8006ff2:	bf00      	nop
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <LL_I2C_ConfigFilters>:
{
 8006ffe:	b480      	push	{r7}
 8007000:	b085      	sub	sp, #20
 8007002:	af00      	add	r7, sp, #0
 8007004:	60f8      	str	r0, [r7, #12]
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	0219      	lsls	r1, r3, #8
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	430b      	orrs	r3, r1
 800701a:	431a      	orrs	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	601a      	str	r2, [r3, #0]
}
 8007020:	bf00      	nop
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <LL_I2C_SetOwnAddress1>:
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007040:	f023 0307 	bic.w	r3, r3, #7
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	430a      	orrs	r2, r1
 800704a:	431a      	orrs	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	609a      	str	r2, [r3, #8]
}
 8007050:	bf00      	nop
 8007052:	3714      	adds	r7, #20
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <LL_I2C_EnableOwnAddress1>:
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	609a      	str	r2, [r3, #8]
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <LL_I2C_DisableOwnAddress1>:
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	609a      	str	r2, [r3, #8]
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <LL_I2C_SetTiming>:
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	611a      	str	r2, [r3, #16]
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <LL_I2C_SetMode>:
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	431a      	orrs	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
}
 80070d2:	bf00      	nop
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <LL_I2C_AcknowledgeNextData>:
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	605a      	str	r2, [r3, #4]
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff ff65 	bl	8006fde <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	6899      	ldr	r1, [r3, #8]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	461a      	mov	r2, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff ff6d 	bl	8006ffe <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff ffb6 	bl	800709c <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff ff44 	bl	8006fbe <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff ffa0 	bl	800707c <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	6919      	ldr	r1, [r3, #16]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	461a      	mov	r2, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff ff70 	bl	800702c <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7ff ff81 	bl	800705c <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff ffa9 	bl	80070b8 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff ffb6 	bl	80070de <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <LL_RCC_HSI_IsReady>:
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8007180:	4b07      	ldr	r3, [pc, #28]	@ (80071a0 <LL_RCC_HSI_IsReady+0x24>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800718c:	d101      	bne.n	8007192 <LL_RCC_HSI_IsReady+0x16>
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <LL_RCC_HSI_IsReady+0x18>
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40021000 	.word	0x40021000

080071a4 <LL_RCC_LSE_IsReady>:
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80071a8:	4b07      	ldr	r3, [pc, #28]	@ (80071c8 <LL_RCC_LSE_IsReady+0x24>)
 80071aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d101      	bne.n	80071ba <LL_RCC_LSE_IsReady+0x16>
 80071b6:	2301      	movs	r3, #1
 80071b8:	e000      	b.n	80071bc <LL_RCC_LSE_IsReady+0x18>
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40021000 	.word	0x40021000

080071cc <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80071d0:	4b06      	ldr	r3, [pc, #24]	@ (80071ec <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0308 	and.w	r3, r3, #8
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d101      	bne.n	80071e0 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	40021000 	.word	0x40021000

080071f0 <LL_RCC_MSI_GetRange>:
{
 80071f0:	b480      	push	{r7}
 80071f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80071f4:	4b04      	ldr	r3, [pc, #16]	@ (8007208 <LL_RCC_MSI_GetRange+0x18>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40021000 	.word	0x40021000

0800720c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007210:	4b04      	ldr	r3, [pc, #16]	@ (8007224 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8007212:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007216:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 800721a:	4618      	mov	r0, r3
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	40021000 	.word	0x40021000

08007228 <LL_RCC_GetSysClkSource>:
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800722c:	4b04      	ldr	r3, [pc, #16]	@ (8007240 <LL_RCC_GetSysClkSource+0x18>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 030c 	and.w	r3, r3, #12
}
 8007234:	4618      	mov	r0, r3
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40021000 	.word	0x40021000

08007244 <LL_RCC_GetAHBPrescaler>:
{
 8007244:	b480      	push	{r7}
 8007246:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007248:	4b04      	ldr	r3, [pc, #16]	@ (800725c <LL_RCC_GetAHBPrescaler+0x18>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8007250:	4618      	mov	r0, r3
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40021000 	.word	0x40021000

08007260 <LL_RCC_GetAPB1Prescaler>:
{
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007264:	4b04      	ldr	r3, [pc, #16]	@ (8007278 <LL_RCC_GetAPB1Prescaler+0x18>)
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800726c:	4618      	mov	r0, r3
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40021000 	.word	0x40021000

0800727c <LL_RCC_GetAPB2Prescaler>:
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007280:	4b04      	ldr	r3, [pc, #16]	@ (8007294 <LL_RCC_GetAPB2Prescaler+0x18>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8007288:	4618      	mov	r0, r3
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	40021000 	.word	0x40021000

08007298 <LL_RCC_GetUSARTClockSource>:
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80072a0:	4b06      	ldr	r3, [pc, #24]	@ (80072bc <LL_RCC_GetUSARTClockSource+0x24>)
 80072a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	401a      	ands	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	041b      	lsls	r3, r3, #16
 80072ae:	4313      	orrs	r3, r2
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	40021000 	.word	0x40021000

080072c0 <LL_RCC_PLL_GetMainSource>:
{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80072c4:	4b04      	ldr	r3, [pc, #16]	@ (80072d8 <LL_RCC_PLL_GetMainSource+0x18>)
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f003 0303 	and.w	r3, r3, #3
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	40021000 	.word	0x40021000

080072dc <LL_RCC_PLL_GetN>:
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80072e0:	4b04      	ldr	r3, [pc, #16]	@ (80072f4 <LL_RCC_PLL_GetN+0x18>)
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	0a1b      	lsrs	r3, r3, #8
 80072e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	40021000 	.word	0x40021000

080072f8 <LL_RCC_PLL_GetR>:
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80072fc:	4b04      	ldr	r3, [pc, #16]	@ (8007310 <LL_RCC_PLL_GetR+0x18>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8007304:	4618      	mov	r0, r3
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	40021000 	.word	0x40021000

08007314 <LL_RCC_PLL_GetDivider>:
{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007318:	4b04      	ldr	r3, [pc, #16]	@ (800732c <LL_RCC_PLL_GetDivider+0x18>)
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8007320:	4618      	mov	r0, r3
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	40021000 	.word	0x40021000

08007330 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b03      	cmp	r3, #3
 8007340:	d137      	bne.n	80073b2 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff ffa8 	bl	8007298 <LL_RCC_GetUSARTClockSource>
 8007348:	4603      	mov	r3, r0
 800734a:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800734e:	2b03      	cmp	r3, #3
 8007350:	f200 80b3 	bhi.w	80074ba <LL_RCC_GetUSARTClockFreq+0x18a>
 8007354:	a201      	add	r2, pc, #4	@ (adr r2, 800735c <LL_RCC_GetUSARTClockFreq+0x2c>)
 8007356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735a:	bf00      	nop
 800735c:	0800739b 	.word	0x0800739b
 8007360:	0800736d 	.word	0x0800736d
 8007364:	08007375 	.word	0x08007375
 8007368:	08007387 	.word	0x08007387
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800736c:	f000 f8c2 	bl	80074f4 <RCC_GetSystemClockFreq>
 8007370:	60f8      	str	r0, [r7, #12]
        break;
 8007372:	e0b3      	b.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8007374:	f7ff ff02 	bl	800717c <LL_RCC_HSI_IsReady>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 809f 	beq.w	80074be <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8007380:	4b59      	ldr	r3, [pc, #356]	@ (80074e8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8007382:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007384:	e09b      	b.n	80074be <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8007386:	f7ff ff0d 	bl	80071a4 <LL_RCC_LSE_IsReady>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8098 	beq.w	80074c2 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8007392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007396:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007398:	e093      	b.n	80074c2 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800739a:	f000 f8ab 	bl	80074f4 <RCC_GetSystemClockFreq>
 800739e:	4603      	mov	r3, r0
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 f937 	bl	8007614 <RCC_GetHCLKClockFreq>
 80073a6:	4603      	mov	r3, r0
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 f95d 	bl	8007668 <RCC_GetPCLK2ClockFreq>
 80073ae:	60f8      	str	r0, [r7, #12]
        break;
 80073b0:	e094      	b.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b0c      	cmp	r3, #12
 80073b6:	d146      	bne.n	8007446 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff ff6d 	bl	8007298 <LL_RCC_GetUSARTClockSource>
 80073be:	4603      	mov	r3, r0
 80073c0:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80073c4:	2b0c      	cmp	r3, #12
 80073c6:	d87e      	bhi.n	80074c6 <LL_RCC_GetUSARTClockFreq+0x196>
 80073c8:	a201      	add	r2, pc, #4	@ (adr r2, 80073d0 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80073ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ce:	bf00      	nop
 80073d0:	0800742f 	.word	0x0800742f
 80073d4:	080074c7 	.word	0x080074c7
 80073d8:	080074c7 	.word	0x080074c7
 80073dc:	080074c7 	.word	0x080074c7
 80073e0:	08007405 	.word	0x08007405
 80073e4:	080074c7 	.word	0x080074c7
 80073e8:	080074c7 	.word	0x080074c7
 80073ec:	080074c7 	.word	0x080074c7
 80073f0:	0800740d 	.word	0x0800740d
 80073f4:	080074c7 	.word	0x080074c7
 80073f8:	080074c7 	.word	0x080074c7
 80073fc:	080074c7 	.word	0x080074c7
 8007400:	0800741d 	.word	0x0800741d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8007404:	f000 f876 	bl	80074f4 <RCC_GetSystemClockFreq>
 8007408:	60f8      	str	r0, [r7, #12]
        break;
 800740a:	e067      	b.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800740c:	f7ff feb6 	bl	800717c <LL_RCC_HSI_IsReady>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d059      	beq.n	80074ca <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8007416:	4b34      	ldr	r3, [pc, #208]	@ (80074e8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8007418:	60fb      	str	r3, [r7, #12]
        }
        break;
 800741a:	e056      	b.n	80074ca <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800741c:	f7ff fec2 	bl	80071a4 <LL_RCC_LSE_IsReady>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d053      	beq.n	80074ce <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8007426:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800742a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800742c:	e04f      	b.n	80074ce <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800742e:	f000 f861 	bl	80074f4 <RCC_GetSystemClockFreq>
 8007432:	4603      	mov	r3, r0
 8007434:	4618      	mov	r0, r3
 8007436:	f000 f8ed 	bl	8007614 <RCC_GetHCLKClockFreq>
 800743a:	4603      	mov	r3, r0
 800743c:	4618      	mov	r0, r3
 800743e:	f000 f8ff 	bl	8007640 <RCC_GetPCLK1ClockFreq>
 8007442:	60f8      	str	r0, [r7, #12]
        break;
 8007444:	e04a      	b.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b30      	cmp	r3, #48	@ 0x30
 800744a:	d147      	bne.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff ff23 	bl	8007298 <LL_RCC_GetUSARTClockSource>
 8007452:	4603      	mov	r3, r0
 8007454:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8007458:	d01a      	beq.n	8007490 <LL_RCC_GetUSARTClockFreq+0x160>
 800745a:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800745e:	d838      	bhi.n	80074d2 <LL_RCC_GetUSARTClockFreq+0x1a2>
 8007460:	4a22      	ldr	r2, [pc, #136]	@ (80074ec <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00c      	beq.n	8007480 <LL_RCC_GetUSARTClockFreq+0x150>
 8007466:	4a21      	ldr	r2, [pc, #132]	@ (80074ec <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d832      	bhi.n	80074d2 <LL_RCC_GetUSARTClockFreq+0x1a2>
 800746c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007470:	d017      	beq.n	80074a2 <LL_RCC_GetUSARTClockFreq+0x172>
 8007472:	4a1f      	ldr	r2, [pc, #124]	@ (80074f0 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d12c      	bne.n	80074d2 <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8007478:	f000 f83c 	bl	80074f4 <RCC_GetSystemClockFreq>
 800747c:	60f8      	str	r0, [r7, #12]
          break;
 800747e:	e02d      	b.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8007480:	f7ff fe7c 	bl	800717c <LL_RCC_HSI_IsReady>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d025      	beq.n	80074d6 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 800748a:	4b17      	ldr	r3, [pc, #92]	@ (80074e8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800748c:	60fb      	str	r3, [r7, #12]
          }
          break;
 800748e:	e022      	b.n	80074d6 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8007490:	f7ff fe88 	bl	80071a4 <LL_RCC_LSE_IsReady>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d01f      	beq.n	80074da <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 800749a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800749e:	60fb      	str	r3, [r7, #12]
          }
          break;
 80074a0:	e01b      	b.n	80074da <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80074a2:	f000 f827 	bl	80074f4 <RCC_GetSystemClockFreq>
 80074a6:	4603      	mov	r3, r0
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 f8b3 	bl	8007614 <RCC_GetHCLKClockFreq>
 80074ae:	4603      	mov	r3, r0
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 f8c5 	bl	8007640 <RCC_GetPCLK1ClockFreq>
 80074b6:	60f8      	str	r0, [r7, #12]
          break;
 80074b8:	e010      	b.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80074ba:	bf00      	nop
 80074bc:	e00e      	b.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80074be:	bf00      	nop
 80074c0:	e00c      	b.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80074c2:	bf00      	nop
 80074c4:	e00a      	b.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80074c6:	bf00      	nop
 80074c8:	e008      	b.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80074ca:	bf00      	nop
 80074cc:	e006      	b.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80074ce:	bf00      	nop
 80074d0:	e004      	b.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 80074d2:	bf00      	nop
 80074d4:	e002      	b.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 80074d6:	bf00      	nop
 80074d8:	e000      	b.n	80074dc <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 80074da:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80074dc:	68fb      	ldr	r3, [r7, #12]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	00f42400 	.word	0x00f42400
 80074ec:	00300020 	.word	0x00300020
 80074f0:	00300010 	.word	0x00300010

080074f4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80074fa:	f7ff fe95 	bl	8007228 <LL_RCC_GetSysClkSource>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b0c      	cmp	r3, #12
 8007502:	d851      	bhi.n	80075a8 <RCC_GetSystemClockFreq+0xb4>
 8007504:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <RCC_GetSystemClockFreq+0x18>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	08007541 	.word	0x08007541
 8007510:	080075a9 	.word	0x080075a9
 8007514:	080075a9 	.word	0x080075a9
 8007518:	080075a9 	.word	0x080075a9
 800751c:	08007595 	.word	0x08007595
 8007520:	080075a9 	.word	0x080075a9
 8007524:	080075a9 	.word	0x080075a9
 8007528:	080075a9 	.word	0x080075a9
 800752c:	0800759b 	.word	0x0800759b
 8007530:	080075a9 	.word	0x080075a9
 8007534:	080075a9 	.word	0x080075a9
 8007538:	080075a9 	.word	0x080075a9
 800753c:	080075a1 	.word	0x080075a1
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007540:	f7ff fe44 	bl	80071cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d111      	bne.n	800756e <RCC_GetSystemClockFreq+0x7a>
 800754a:	f7ff fe3f 	bl	80071cc <LL_RCC_MSI_IsEnabledRangeSelect>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d004      	beq.n	800755e <RCC_GetSystemClockFreq+0x6a>
 8007554:	f7ff fe4c 	bl	80071f0 <LL_RCC_MSI_GetRange>
 8007558:	4603      	mov	r3, r0
 800755a:	0a1b      	lsrs	r3, r3, #8
 800755c:	e003      	b.n	8007566 <RCC_GetSystemClockFreq+0x72>
 800755e:	f7ff fe55 	bl	800720c <LL_RCC_MSI_GetRangeAfterStandby>
 8007562:	4603      	mov	r3, r0
 8007564:	0a1b      	lsrs	r3, r3, #8
 8007566:	4a28      	ldr	r2, [pc, #160]	@ (8007608 <RCC_GetSystemClockFreq+0x114>)
 8007568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800756c:	e010      	b.n	8007590 <RCC_GetSystemClockFreq+0x9c>
 800756e:	f7ff fe2d 	bl	80071cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d004      	beq.n	8007582 <RCC_GetSystemClockFreq+0x8e>
 8007578:	f7ff fe3a 	bl	80071f0 <LL_RCC_MSI_GetRange>
 800757c:	4603      	mov	r3, r0
 800757e:	091b      	lsrs	r3, r3, #4
 8007580:	e003      	b.n	800758a <RCC_GetSystemClockFreq+0x96>
 8007582:	f7ff fe43 	bl	800720c <LL_RCC_MSI_GetRangeAfterStandby>
 8007586:	4603      	mov	r3, r0
 8007588:	091b      	lsrs	r3, r3, #4
 800758a:	4a1f      	ldr	r2, [pc, #124]	@ (8007608 <RCC_GetSystemClockFreq+0x114>)
 800758c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007590:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007592:	e033      	b.n	80075fc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8007594:	4b1d      	ldr	r3, [pc, #116]	@ (800760c <RCC_GetSystemClockFreq+0x118>)
 8007596:	607b      	str	r3, [r7, #4]
      break;
 8007598:	e030      	b.n	80075fc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800759a:	4b1d      	ldr	r3, [pc, #116]	@ (8007610 <RCC_GetSystemClockFreq+0x11c>)
 800759c:	607b      	str	r3, [r7, #4]
      break;
 800759e:	e02d      	b.n	80075fc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80075a0:	f000 f876 	bl	8007690 <RCC_PLL_GetFreqDomain_SYS>
 80075a4:	6078      	str	r0, [r7, #4]
      break;
 80075a6:	e029      	b.n	80075fc <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80075a8:	f7ff fe10 	bl	80071cc <LL_RCC_MSI_IsEnabledRangeSelect>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d111      	bne.n	80075d6 <RCC_GetSystemClockFreq+0xe2>
 80075b2:	f7ff fe0b 	bl	80071cc <LL_RCC_MSI_IsEnabledRangeSelect>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d004      	beq.n	80075c6 <RCC_GetSystemClockFreq+0xd2>
 80075bc:	f7ff fe18 	bl	80071f0 <LL_RCC_MSI_GetRange>
 80075c0:	4603      	mov	r3, r0
 80075c2:	0a1b      	lsrs	r3, r3, #8
 80075c4:	e003      	b.n	80075ce <RCC_GetSystemClockFreq+0xda>
 80075c6:	f7ff fe21 	bl	800720c <LL_RCC_MSI_GetRangeAfterStandby>
 80075ca:	4603      	mov	r3, r0
 80075cc:	0a1b      	lsrs	r3, r3, #8
 80075ce:	4a0e      	ldr	r2, [pc, #56]	@ (8007608 <RCC_GetSystemClockFreq+0x114>)
 80075d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075d4:	e010      	b.n	80075f8 <RCC_GetSystemClockFreq+0x104>
 80075d6:	f7ff fdf9 	bl	80071cc <LL_RCC_MSI_IsEnabledRangeSelect>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d004      	beq.n	80075ea <RCC_GetSystemClockFreq+0xf6>
 80075e0:	f7ff fe06 	bl	80071f0 <LL_RCC_MSI_GetRange>
 80075e4:	4603      	mov	r3, r0
 80075e6:	091b      	lsrs	r3, r3, #4
 80075e8:	e003      	b.n	80075f2 <RCC_GetSystemClockFreq+0xfe>
 80075ea:	f7ff fe0f 	bl	800720c <LL_RCC_MSI_GetRangeAfterStandby>
 80075ee:	4603      	mov	r3, r0
 80075f0:	091b      	lsrs	r3, r3, #4
 80075f2:	4a05      	ldr	r2, [pc, #20]	@ (8007608 <RCC_GetSystemClockFreq+0x114>)
 80075f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075f8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80075fa:	bf00      	nop
  }

  return frequency;
 80075fc:	687b      	ldr	r3, [r7, #4]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	0800bda0 	.word	0x0800bda0
 800760c:	00f42400 	.word	0x00f42400
 8007610:	007a1200 	.word	0x007a1200

08007614 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800761c:	f7ff fe12 	bl	8007244 <LL_RCC_GetAHBPrescaler>
 8007620:	4603      	mov	r3, r0
 8007622:	091b      	lsrs	r3, r3, #4
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	4a04      	ldr	r2, [pc, #16]	@ (800763c <RCC_GetHCLKClockFreq+0x28>)
 800762a:	5cd3      	ldrb	r3, [r2, r3]
 800762c:	461a      	mov	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	40d3      	lsrs	r3, r2
}
 8007632:	4618      	mov	r0, r3
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	0800bd88 	.word	0x0800bd88

08007640 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007648:	f7ff fe0a 	bl	8007260 <LL_RCC_GetAPB1Prescaler>
 800764c:	4603      	mov	r3, r0
 800764e:	0a1b      	lsrs	r3, r3, #8
 8007650:	4a04      	ldr	r2, [pc, #16]	@ (8007664 <RCC_GetPCLK1ClockFreq+0x24>)
 8007652:	5cd3      	ldrb	r3, [r2, r3]
 8007654:	461a      	mov	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	40d3      	lsrs	r3, r2
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	0800bd98 	.word	0x0800bd98

08007668 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007670:	f7ff fe04 	bl	800727c <LL_RCC_GetAPB2Prescaler>
 8007674:	4603      	mov	r3, r0
 8007676:	0adb      	lsrs	r3, r3, #11
 8007678:	4a04      	ldr	r2, [pc, #16]	@ (800768c <RCC_GetPCLK2ClockFreq+0x24>)
 800767a:	5cd3      	ldrb	r3, [r2, r3]
 800767c:	461a      	mov	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	40d3      	lsrs	r3, r2
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	0800bd98 	.word	0x0800bd98

08007690 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8007690:	b590      	push	{r4, r7, lr}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007696:	f7ff fe13 	bl	80072c0 <LL_RCC_PLL_GetMainSource>
 800769a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d036      	beq.n	8007710 <RCC_PLL_GetFreqDomain_SYS+0x80>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d836      	bhi.n	8007716 <RCC_PLL_GetFreqDomain_SYS+0x86>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d003      	beq.n	80076b6 <RCC_PLL_GetFreqDomain_SYS+0x26>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d02a      	beq.n	800770a <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80076b4:	e02f      	b.n	8007716 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80076b6:	f7ff fd89 	bl	80071cc <LL_RCC_MSI_IsEnabledRangeSelect>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d111      	bne.n	80076e4 <RCC_PLL_GetFreqDomain_SYS+0x54>
 80076c0:	f7ff fd84 	bl	80071cc <LL_RCC_MSI_IsEnabledRangeSelect>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d004      	beq.n	80076d4 <RCC_PLL_GetFreqDomain_SYS+0x44>
 80076ca:	f7ff fd91 	bl	80071f0 <LL_RCC_MSI_GetRange>
 80076ce:	4603      	mov	r3, r0
 80076d0:	0a1b      	lsrs	r3, r3, #8
 80076d2:	e003      	b.n	80076dc <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80076d4:	f7ff fd9a 	bl	800720c <LL_RCC_MSI_GetRangeAfterStandby>
 80076d8:	4603      	mov	r3, r0
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	4a2f      	ldr	r2, [pc, #188]	@ (800779c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80076de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076e2:	e010      	b.n	8007706 <RCC_PLL_GetFreqDomain_SYS+0x76>
 80076e4:	f7ff fd72 	bl	80071cc <LL_RCC_MSI_IsEnabledRangeSelect>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d004      	beq.n	80076f8 <RCC_PLL_GetFreqDomain_SYS+0x68>
 80076ee:	f7ff fd7f 	bl	80071f0 <LL_RCC_MSI_GetRange>
 80076f2:	4603      	mov	r3, r0
 80076f4:	091b      	lsrs	r3, r3, #4
 80076f6:	e003      	b.n	8007700 <RCC_PLL_GetFreqDomain_SYS+0x70>
 80076f8:	f7ff fd88 	bl	800720c <LL_RCC_MSI_GetRangeAfterStandby>
 80076fc:	4603      	mov	r3, r0
 80076fe:	091b      	lsrs	r3, r3, #4
 8007700:	4a26      	ldr	r2, [pc, #152]	@ (800779c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8007702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007706:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007708:	e02f      	b.n	800776a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800770a:	4b25      	ldr	r3, [pc, #148]	@ (80077a0 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 800770c:	607b      	str	r3, [r7, #4]
      break;
 800770e:	e02c      	b.n	800776a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007710:	4b24      	ldr	r3, [pc, #144]	@ (80077a4 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8007712:	607b      	str	r3, [r7, #4]
      break;
 8007714:	e029      	b.n	800776a <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007716:	f7ff fd59 	bl	80071cc <LL_RCC_MSI_IsEnabledRangeSelect>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d111      	bne.n	8007744 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8007720:	f7ff fd54 	bl	80071cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d004      	beq.n	8007734 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 800772a:	f7ff fd61 	bl	80071f0 <LL_RCC_MSI_GetRange>
 800772e:	4603      	mov	r3, r0
 8007730:	0a1b      	lsrs	r3, r3, #8
 8007732:	e003      	b.n	800773c <RCC_PLL_GetFreqDomain_SYS+0xac>
 8007734:	f7ff fd6a 	bl	800720c <LL_RCC_MSI_GetRangeAfterStandby>
 8007738:	4603      	mov	r3, r0
 800773a:	0a1b      	lsrs	r3, r3, #8
 800773c:	4a17      	ldr	r2, [pc, #92]	@ (800779c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800773e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007742:	e010      	b.n	8007766 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8007744:	f7ff fd42 	bl	80071cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d004      	beq.n	8007758 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800774e:	f7ff fd4f 	bl	80071f0 <LL_RCC_MSI_GetRange>
 8007752:	4603      	mov	r3, r0
 8007754:	091b      	lsrs	r3, r3, #4
 8007756:	e003      	b.n	8007760 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8007758:	f7ff fd58 	bl	800720c <LL_RCC_MSI_GetRangeAfterStandby>
 800775c:	4603      	mov	r3, r0
 800775e:	091b      	lsrs	r3, r3, #4
 8007760:	4a0e      	ldr	r2, [pc, #56]	@ (800779c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8007762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007766:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8007768:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800776a:	f7ff fdd3 	bl	8007314 <LL_RCC_PLL_GetDivider>
 800776e:	4603      	mov	r3, r0
 8007770:	091b      	lsrs	r3, r3, #4
 8007772:	3301      	adds	r3, #1
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	fbb2 f4f3 	udiv	r4, r2, r3
 800777a:	f7ff fdaf 	bl	80072dc <LL_RCC_PLL_GetN>
 800777e:	4603      	mov	r3, r0
 8007780:	fb03 f404 	mul.w	r4, r3, r4
 8007784:	f7ff fdb8 	bl	80072f8 <LL_RCC_PLL_GetR>
 8007788:	4603      	mov	r3, r0
 800778a:	0e5b      	lsrs	r3, r3, #25
 800778c:	3301      	adds	r3, #1
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	bd90      	pop	{r4, r7, pc}
 800779c:	0800bda0 	.word	0x0800bda0
 80077a0:	00f42400 	.word	0x00f42400
 80077a4:	007a1200 	.word	0x007a1200

080077a8 <LL_USART_IsEnabled>:
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <LL_USART_IsEnabled+0x18>
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <LL_USART_IsEnabled+0x1a>
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <LL_USART_SetStopBitsLength>:
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	605a      	str	r2, [r3, #4]
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <LL_USART_SetHWFlowCtrl>:
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	431a      	orrs	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	609a      	str	r2, [r3, #8]
}
 800780e:	bf00      	nop
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <LL_USART_SetBaudRate>:
{
 800781a:	b480      	push	{r7}
 800781c:	b087      	sub	sp, #28
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800782e:	d11a      	bne.n	8007866 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	005a      	lsls	r2, r3, #1
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	085b      	lsrs	r3, r3, #1
 8007838:	441a      	add	r2, r3
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007840:	b29b      	uxth	r3, r3
 8007842:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800784a:	4013      	ands	r3, r2
 800784c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	085b      	lsrs	r3, r3, #1
 8007852:	b29b      	uxth	r3, r3
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4313      	orrs	r3, r2
 800785c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	60da      	str	r2, [r3, #12]
}
 8007864:	e00a      	b.n	800787c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	085a      	lsrs	r2, r3, #1
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	441a      	add	r2, r3
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	fbb2 f3f3 	udiv	r3, r2, r3
 8007874:	b29b      	uxth	r3, r3
 8007876:	461a      	mov	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	60da      	str	r2, [r3, #12]
}
 800787c:	bf00      	nop
 800787e:	371c      	adds	r7, #28
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007896:	2300      	movs	r3, #0
 8007898:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7ff ff84 	bl	80077a8 <LL_USART_IsEnabled>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d148      	bne.n	8007938 <LL_USART_Init+0xb0>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	4b26      	ldr	r3, [pc, #152]	@ (8007944 <LL_USART_Init+0xbc>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	6851      	ldr	r1, [r2, #4]
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	68d2      	ldr	r2, [r2, #12]
 80078b6:	4311      	orrs	r1, r2
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	6912      	ldr	r2, [r2, #16]
 80078bc:	4311      	orrs	r1, r2
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	6992      	ldr	r2, [r2, #24]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	431a      	orrs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff ff7c 	bl	80077ce <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff ff89 	bl	80077f4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a18      	ldr	r2, [pc, #96]	@ (8007948 <LL_USART_Init+0xc0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d104      	bne.n	80078f4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80078ea:	2003      	movs	r0, #3
 80078ec:	f7ff fd20 	bl	8007330 <LL_RCC_GetUSARTClockFreq>
 80078f0:	60b8      	str	r0, [r7, #8]
 80078f2:	e010      	b.n	8007916 <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a15      	ldr	r2, [pc, #84]	@ (800794c <LL_USART_Init+0xc4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d104      	bne.n	8007906 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80078fc:	200c      	movs	r0, #12
 80078fe:	f7ff fd17 	bl	8007330 <LL_RCC_GetUSARTClockFreq>
 8007902:	60b8      	str	r0, [r7, #8]
 8007904:	e007      	b.n	8007916 <LL_USART_Init+0x8e>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a11      	ldr	r2, [pc, #68]	@ (8007950 <LL_USART_Init+0xc8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d103      	bne.n	8007916 <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800790e:	2030      	movs	r0, #48	@ 0x30
 8007910:	f7ff fd0e 	bl	8007330 <LL_RCC_GetUSARTClockFreq>
 8007914:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00d      	beq.n	8007938 <LL_USART_Init+0xb0>
        && (USART_InitStruct->BaudRate != 0U))
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d009      	beq.n	8007938 <LL_USART_Init+0xb0>
    {
      status = SUCCESS;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8007930:	68b9      	ldr	r1, [r7, #8]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff ff71 	bl	800781a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007938:	7bfb      	ldrb	r3, [r7, #15]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	efff69f3 	.word	0xefff69f3
 8007948:	40013800 	.word	0x40013800
 800794c:	40004400 	.word	0x40004400
 8007950:	40004800 	.word	0x40004800

08007954 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800795c:	4b10      	ldr	r3, [pc, #64]	@ (80079a0 <LL_mDelay+0x4c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8007966:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796e:	d00c      	beq.n	800798a <LL_mDelay+0x36>
  {
    tmpDelay++;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3301      	adds	r3, #1
 8007974:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8007976:	e008      	b.n	800798a <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8007978:	4b09      	ldr	r3, [pc, #36]	@ (80079a0 <LL_mDelay+0x4c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <LL_mDelay+0x36>
    {
      tmpDelay--;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3b01      	subs	r3, #1
 8007988:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1f3      	bne.n	8007978 <LL_mDelay+0x24>
    }
  }
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	e000e010 	.word	0xe000e010

080079a4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80079ac:	4a04      	ldr	r2, [pc, #16]	@ (80079c0 <LL_SetSystemCoreClock+0x1c>)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6013      	str	r3, [r2, #0]
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	20000000 	.word	0x20000000

080079c4 <__NVIC_SetPriority>:
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	4603      	mov	r3, r0
 80079cc:	6039      	str	r1, [r7, #0]
 80079ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	db0a      	blt.n	80079ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	490c      	ldr	r1, [pc, #48]	@ (8007a10 <__NVIC_SetPriority+0x4c>)
 80079de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e2:	0112      	lsls	r2, r2, #4
 80079e4:	b2d2      	uxtb	r2, r2
 80079e6:	440b      	add	r3, r1
 80079e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80079ec:	e00a      	b.n	8007a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	4908      	ldr	r1, [pc, #32]	@ (8007a14 <__NVIC_SetPriority+0x50>)
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	f003 030f 	and.w	r3, r3, #15
 80079fa:	3b04      	subs	r3, #4
 80079fc:	0112      	lsls	r2, r2, #4
 80079fe:	b2d2      	uxtb	r2, r2
 8007a00:	440b      	add	r3, r1
 8007a02:	761a      	strb	r2, [r3, #24]
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	e000e100 	.word	0xe000e100
 8007a14:	e000ed00 	.word	0xe000ed00

08007a18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	f06f 0004 	mvn.w	r0, #4
 8007a22:	f7ff ffcf 	bl	80079c4 <__NVIC_SetPriority>
#endif
}
 8007a26:	bf00      	nop
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a32:	f3ef 8305 	mrs	r3, IPSR
 8007a36:	603b      	str	r3, [r7, #0]
  return(result);
 8007a38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007a3e:	f06f 0305 	mvn.w	r3, #5
 8007a42:	607b      	str	r3, [r7, #4]
 8007a44:	e00c      	b.n	8007a60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a46:	4b0a      	ldr	r3, [pc, #40]	@ (8007a70 <osKernelInitialize+0x44>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d105      	bne.n	8007a5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007a4e:	4b08      	ldr	r3, [pc, #32]	@ (8007a70 <osKernelInitialize+0x44>)
 8007a50:	2201      	movs	r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	607b      	str	r3, [r7, #4]
 8007a58:	e002      	b.n	8007a60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a60:	687b      	ldr	r3, [r7, #4]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	20001b30 	.word	0x20001b30

08007a74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a7a:	f3ef 8305 	mrs	r3, IPSR
 8007a7e:	603b      	str	r3, [r7, #0]
  return(result);
 8007a80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007a86:	f06f 0305 	mvn.w	r3, #5
 8007a8a:	607b      	str	r3, [r7, #4]
 8007a8c:	e010      	b.n	8007ab0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007abc <osKernelStart+0x48>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d109      	bne.n	8007aaa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a96:	f7ff ffbf 	bl	8007a18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a9a:	4b08      	ldr	r3, [pc, #32]	@ (8007abc <osKernelStart+0x48>)
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007aa0:	f001 f87a 	bl	8008b98 <vTaskStartScheduler>
      stat = osOK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	607b      	str	r3, [r7, #4]
 8007aa8:	e002      	b.n	8007ab0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8007aae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ab0:	687b      	ldr	r3, [r7, #4]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20001b30 	.word	0x20001b30

08007ac0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08e      	sub	sp, #56	@ 0x38
 8007ac4:	af04      	add	r7, sp, #16
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007acc:	2300      	movs	r3, #0
 8007ace:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ad0:	f3ef 8305 	mrs	r3, IPSR
 8007ad4:	617b      	str	r3, [r7, #20]
  return(result);
 8007ad6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d17e      	bne.n	8007bda <osThreadNew+0x11a>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d07b      	beq.n	8007bda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007ae2:	2380      	movs	r3, #128	@ 0x80
 8007ae4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007ae6:	2318      	movs	r3, #24
 8007ae8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007aee:	f04f 33ff 	mov.w	r3, #4294967295
 8007af2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d045      	beq.n	8007b86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <osThreadNew+0x48>
        name = attr->name;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d008      	beq.n	8007b2e <osThreadNew+0x6e>
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	2b38      	cmp	r3, #56	@ 0x38
 8007b20:	d805      	bhi.n	8007b2e <osThreadNew+0x6e>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <osThreadNew+0x72>
        return (NULL);
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e054      	b.n	8007bdc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	089b      	lsrs	r3, r3, #2
 8007b40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00e      	beq.n	8007b68 <osThreadNew+0xa8>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007b50:	d90a      	bls.n	8007b68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d006      	beq.n	8007b68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <osThreadNew+0xa8>
        mem = 1;
 8007b62:	2301      	movs	r3, #1
 8007b64:	61bb      	str	r3, [r7, #24]
 8007b66:	e010      	b.n	8007b8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10c      	bne.n	8007b8a <osThreadNew+0xca>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d108      	bne.n	8007b8a <osThreadNew+0xca>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d104      	bne.n	8007b8a <osThreadNew+0xca>
          mem = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	61bb      	str	r3, [r7, #24]
 8007b84:	e001      	b.n	8007b8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007b86:	2300      	movs	r3, #0
 8007b88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d110      	bne.n	8007bb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b98:	9202      	str	r2, [sp, #8]
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	6a3a      	ldr	r2, [r7, #32]
 8007ba4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 fe1a 	bl	80087e0 <xTaskCreateStatic>
 8007bac:	4603      	mov	r3, r0
 8007bae:	613b      	str	r3, [r7, #16]
 8007bb0:	e013      	b.n	8007bda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d110      	bne.n	8007bda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	f107 0310 	add.w	r3, r7, #16
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 fe68 	bl	80088a0 <xTaskCreate>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d001      	beq.n	8007bda <osThreadNew+0x11a>
            hTask = NULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007bda:	693b      	ldr	r3, [r7, #16]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3728      	adds	r7, #40	@ 0x28
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bec:	f3ef 8305 	mrs	r3, IPSR
 8007bf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <osDelay+0x1c>
    stat = osErrorISR;
 8007bf8:	f06f 0305 	mvn.w	r3, #5
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	e007      	b.n	8007c10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 ff8e 	bl	8008b2c <vTaskDelay>
    }
  }

  return (stat);
 8007c10:	68fb      	ldr	r3, [r7, #12]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4a07      	ldr	r2, [pc, #28]	@ (8007c48 <vApplicationGetIdleTaskMemory+0x2c>)
 8007c2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	4a06      	ldr	r2, [pc, #24]	@ (8007c4c <vApplicationGetIdleTaskMemory+0x30>)
 8007c32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2280      	movs	r2, #128	@ 0x80
 8007c38:	601a      	str	r2, [r3, #0]
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	20001b34 	.word	0x20001b34
 8007c4c:	20001b90 	.word	0x20001b90

08007c50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4a07      	ldr	r2, [pc, #28]	@ (8007c7c <vApplicationGetTimerTaskMemory+0x2c>)
 8007c60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	4a06      	ldr	r2, [pc, #24]	@ (8007c80 <vApplicationGetTimerTaskMemory+0x30>)
 8007c66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c6e:	601a      	str	r2, [r3, #0]
}
 8007c70:	bf00      	nop
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	20001d90 	.word	0x20001d90
 8007c80:	20001dec 	.word	0x20001dec

08007c84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f103 0208 	add.w	r2, r3, #8
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f103 0208 	add.w	r2, r3, #8
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f103 0208 	add.w	r2, r3, #8
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	601a      	str	r2, [r3, #0]
}
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3c:	d103      	bne.n	8007d46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e00c      	b.n	8007d60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3308      	adds	r3, #8
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	e002      	b.n	8007d54 <vListInsert+0x2e>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d2f6      	bcs.n	8007d4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	601a      	str	r2, [r3, #0]
}
 8007d8c:	bf00      	nop
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6892      	ldr	r2, [r2, #8]
 8007dae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6852      	ldr	r2, [r2, #4]
 8007db8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d103      	bne.n	8007dcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	1e5a      	subs	r2, r3, #1
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10b      	bne.n	8007e18 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e12:	bf00      	nop
 8007e14:	bf00      	nop
 8007e16:	e7fd      	b.n	8007e14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e18:	f002 f876 	bl	8009f08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e24:	68f9      	ldr	r1, [r7, #12]
 8007e26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007e28:	fb01 f303 	mul.w	r3, r1, r3
 8007e2c:	441a      	add	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	68f9      	ldr	r1, [r7, #12]
 8007e4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007e4e:	fb01 f303 	mul.w	r3, r1, r3
 8007e52:	441a      	add	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	22ff      	movs	r2, #255	@ 0xff
 8007e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	22ff      	movs	r2, #255	@ 0xff
 8007e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d114      	bne.n	8007e98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d01a      	beq.n	8007eac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	3310      	adds	r3, #16
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f001 f91a 	bl	80090b4 <xTaskRemoveFromEventList>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d012      	beq.n	8007eac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e86:	4b0d      	ldr	r3, [pc, #52]	@ (8007ebc <xQueueGenericReset+0xd0>)
 8007e88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	e009      	b.n	8007eac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3310      	adds	r3, #16
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff fef1 	bl	8007c84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3324      	adds	r3, #36	@ 0x24
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7ff feec 	bl	8007c84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007eac:	f002 f85e 	bl	8009f6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007eb0:	2301      	movs	r3, #1
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	e000ed04 	.word	0xe000ed04

08007ec0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08e      	sub	sp, #56	@ 0x38
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d10b      	bne.n	8007eec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	e7fd      	b.n	8007ee8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10b      	bne.n	8007f0a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop
 8007f08:	e7fd      	b.n	8007f06 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <xQueueGenericCreateStatic+0x56>
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <xQueueGenericCreateStatic+0x5a>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <xQueueGenericCreateStatic+0x5c>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10b      	bne.n	8007f38 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	623b      	str	r3, [r7, #32]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d102      	bne.n	8007f44 <xQueueGenericCreateStatic+0x84>
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <xQueueGenericCreateStatic+0x88>
 8007f44:	2301      	movs	r3, #1
 8007f46:	e000      	b.n	8007f4a <xQueueGenericCreateStatic+0x8a>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10b      	bne.n	8007f66 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	61fb      	str	r3, [r7, #28]
}
 8007f60:	bf00      	nop
 8007f62:	bf00      	nop
 8007f64:	e7fd      	b.n	8007f62 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f66:	2350      	movs	r3, #80	@ 0x50
 8007f68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b50      	cmp	r3, #80	@ 0x50
 8007f6e:	d00b      	beq.n	8007f88 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	61bb      	str	r3, [r7, #24]
}
 8007f82:	bf00      	nop
 8007f84:	bf00      	nop
 8007f86:	e7fd      	b.n	8007f84 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00d      	beq.n	8007fb0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f9c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	68b9      	ldr	r1, [r7, #8]
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 f805 	bl	8007fba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3730      	adds	r7, #48	@ 0x30
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	607a      	str	r2, [r7, #4]
 8007fc6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d103      	bne.n	8007fd6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e002      	b.n	8007fdc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fe8:	2101      	movs	r1, #1
 8007fea:	69b8      	ldr	r0, [r7, #24]
 8007fec:	f7ff fefe 	bl	8007dec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	78fa      	ldrb	r2, [r7, #3]
 8007ff4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ff8:	bf00      	nop
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08e      	sub	sp, #56	@ 0x38
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
 800800c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800800e:	2300      	movs	r3, #0
 8008010:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10b      	bne.n	8008034 <xQueueGenericSend+0x34>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800802e:	bf00      	nop
 8008030:	bf00      	nop
 8008032:	e7fd      	b.n	8008030 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d103      	bne.n	8008042 <xQueueGenericSend+0x42>
 800803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <xQueueGenericSend+0x46>
 8008042:	2301      	movs	r3, #1
 8008044:	e000      	b.n	8008048 <xQueueGenericSend+0x48>
 8008046:	2300      	movs	r3, #0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10b      	bne.n	8008064 <xQueueGenericSend+0x64>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800805e:	bf00      	nop
 8008060:	bf00      	nop
 8008062:	e7fd      	b.n	8008060 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2b02      	cmp	r3, #2
 8008068:	d103      	bne.n	8008072 <xQueueGenericSend+0x72>
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800806e:	2b01      	cmp	r3, #1
 8008070:	d101      	bne.n	8008076 <xQueueGenericSend+0x76>
 8008072:	2301      	movs	r3, #1
 8008074:	e000      	b.n	8008078 <xQueueGenericSend+0x78>
 8008076:	2300      	movs	r3, #0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10b      	bne.n	8008094 <xQueueGenericSend+0x94>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	623b      	str	r3, [r7, #32]
}
 800808e:	bf00      	nop
 8008090:	bf00      	nop
 8008092:	e7fd      	b.n	8008090 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008094:	f001 f9ce 	bl	8009434 <xTaskGetSchedulerState>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d102      	bne.n	80080a4 <xQueueGenericSend+0xa4>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <xQueueGenericSend+0xa8>
 80080a4:	2301      	movs	r3, #1
 80080a6:	e000      	b.n	80080aa <xQueueGenericSend+0xaa>
 80080a8:	2300      	movs	r3, #0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10b      	bne.n	80080c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	61fb      	str	r3, [r7, #28]
}
 80080c0:	bf00      	nop
 80080c2:	bf00      	nop
 80080c4:	e7fd      	b.n	80080c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080c6:	f001 ff1f 	bl	8009f08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d302      	bcc.n	80080dc <xQueueGenericSend+0xdc>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d129      	bne.n	8008130 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	68b9      	ldr	r1, [r7, #8]
 80080e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080e2:	f000 fa0f 	bl	8008504 <prvCopyDataToQueue>
 80080e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d010      	beq.n	8008112 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f2:	3324      	adds	r3, #36	@ 0x24
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 ffdd 	bl	80090b4 <xTaskRemoveFromEventList>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d013      	beq.n	8008128 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008100:	4b3f      	ldr	r3, [pc, #252]	@ (8008200 <xQueueGenericSend+0x200>)
 8008102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008106:	601a      	str	r2, [r3, #0]
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	e00a      	b.n	8008128 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d007      	beq.n	8008128 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008118:	4b39      	ldr	r3, [pc, #228]	@ (8008200 <xQueueGenericSend+0x200>)
 800811a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008128:	f001 ff20 	bl	8009f6c <vPortExitCritical>
				return pdPASS;
 800812c:	2301      	movs	r3, #1
 800812e:	e063      	b.n	80081f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d103      	bne.n	800813e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008136:	f001 ff19 	bl	8009f6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800813a:	2300      	movs	r3, #0
 800813c:	e05c      	b.n	80081f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800813e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008140:	2b00      	cmp	r3, #0
 8008142:	d106      	bne.n	8008152 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008144:	f107 0314 	add.w	r3, r7, #20
 8008148:	4618      	mov	r0, r3
 800814a:	f001 f817 	bl	800917c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800814e:	2301      	movs	r3, #1
 8008150:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008152:	f001 ff0b 	bl	8009f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008156:	f000 fd87 	bl	8008c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800815a:	f001 fed5 	bl	8009f08 <vPortEnterCritical>
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008164:	b25b      	sxtb	r3, r3
 8008166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816a:	d103      	bne.n	8008174 <xQueueGenericSend+0x174>
 800816c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008176:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800817a:	b25b      	sxtb	r3, r3
 800817c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008180:	d103      	bne.n	800818a <xQueueGenericSend+0x18a>
 8008182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800818a:	f001 feef 	bl	8009f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800818e:	1d3a      	adds	r2, r7, #4
 8008190:	f107 0314 	add.w	r3, r7, #20
 8008194:	4611      	mov	r1, r2
 8008196:	4618      	mov	r0, r3
 8008198:	f001 f806 	bl	80091a8 <xTaskCheckForTimeOut>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d124      	bne.n	80081ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081a4:	f000 faa6 	bl	80086f4 <prvIsQueueFull>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d018      	beq.n	80081e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b0:	3310      	adds	r3, #16
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	4611      	mov	r1, r2
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 ff2a 	bl	8009010 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081be:	f000 fa31 	bl	8008624 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081c2:	f000 fd5f 	bl	8008c84 <xTaskResumeAll>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f47f af7c 	bne.w	80080c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80081ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008200 <xQueueGenericSend+0x200>)
 80081d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	e772      	b.n	80080c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081e2:	f000 fa1f 	bl	8008624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081e6:	f000 fd4d 	bl	8008c84 <xTaskResumeAll>
 80081ea:	e76c      	b.n	80080c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081ee:	f000 fa19 	bl	8008624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081f2:	f000 fd47 	bl	8008c84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3738      	adds	r7, #56	@ 0x38
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	e000ed04 	.word	0xe000ed04

08008204 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b090      	sub	sp, #64	@ 0x40
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10b      	bne.n	8008234 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800822e:	bf00      	nop
 8008230:	bf00      	nop
 8008232:	e7fd      	b.n	8008230 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d103      	bne.n	8008242 <xQueueGenericSendFromISR+0x3e>
 800823a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <xQueueGenericSendFromISR+0x42>
 8008242:	2301      	movs	r3, #1
 8008244:	e000      	b.n	8008248 <xQueueGenericSendFromISR+0x44>
 8008246:	2300      	movs	r3, #0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10b      	bne.n	8008264 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800825e:	bf00      	nop
 8008260:	bf00      	nop
 8008262:	e7fd      	b.n	8008260 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	2b02      	cmp	r3, #2
 8008268:	d103      	bne.n	8008272 <xQueueGenericSendFromISR+0x6e>
 800826a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800826e:	2b01      	cmp	r3, #1
 8008270:	d101      	bne.n	8008276 <xQueueGenericSendFromISR+0x72>
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <xQueueGenericSendFromISR+0x74>
 8008276:	2300      	movs	r3, #0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10b      	bne.n	8008294 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	623b      	str	r3, [r7, #32]
}
 800828e:	bf00      	nop
 8008290:	bf00      	nop
 8008292:	e7fd      	b.n	8008290 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008294:	f001 ff18 	bl	800a0c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008298:	f3ef 8211 	mrs	r2, BASEPRI
 800829c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	61fa      	str	r2, [r7, #28]
 80082ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082bc:	429a      	cmp	r2, r3
 80082be:	d302      	bcc.n	80082c6 <xQueueGenericSendFromISR+0xc2>
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d12f      	bne.n	8008326 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	68b9      	ldr	r1, [r7, #8]
 80082da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80082dc:	f000 f912 	bl	8008504 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80082e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e8:	d112      	bne.n	8008310 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d016      	beq.n	8008320 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f4:	3324      	adds	r3, #36	@ 0x24
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fedc 	bl	80090b4 <xTaskRemoveFromEventList>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00e      	beq.n	8008320 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00b      	beq.n	8008320 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	e007      	b.n	8008320 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008310:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008314:	3301      	adds	r3, #1
 8008316:	b2db      	uxtb	r3, r3
 8008318:	b25a      	sxtb	r2, r3
 800831a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008320:	2301      	movs	r3, #1
 8008322:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008324:	e001      	b.n	800832a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008326:	2300      	movs	r3, #0
 8008328:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800832a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008334:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008338:	4618      	mov	r0, r3
 800833a:	3740      	adds	r7, #64	@ 0x40
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08c      	sub	sp, #48	@ 0x30
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800834c:	2300      	movs	r3, #0
 800834e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10b      	bne.n	8008372 <xQueueReceive+0x32>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	623b      	str	r3, [r7, #32]
}
 800836c:	bf00      	nop
 800836e:	bf00      	nop
 8008370:	e7fd      	b.n	800836e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d103      	bne.n	8008380 <xQueueReceive+0x40>
 8008378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <xQueueReceive+0x44>
 8008380:	2301      	movs	r3, #1
 8008382:	e000      	b.n	8008386 <xQueueReceive+0x46>
 8008384:	2300      	movs	r3, #0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10b      	bne.n	80083a2 <xQueueReceive+0x62>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	61fb      	str	r3, [r7, #28]
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	e7fd      	b.n	800839e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083a2:	f001 f847 	bl	8009434 <xTaskGetSchedulerState>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d102      	bne.n	80083b2 <xQueueReceive+0x72>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <xQueueReceive+0x76>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <xQueueReceive+0x78>
 80083b6:	2300      	movs	r3, #0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10b      	bne.n	80083d4 <xQueueReceive+0x94>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	61bb      	str	r3, [r7, #24]
}
 80083ce:	bf00      	nop
 80083d0:	bf00      	nop
 80083d2:	e7fd      	b.n	80083d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083d4:	f001 fd98 	bl	8009f08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d01f      	beq.n	8008424 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083e4:	68b9      	ldr	r1, [r7, #8]
 80083e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083e8:	f000 f8f6 	bl	80085d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ee:	1e5a      	subs	r2, r3, #1
 80083f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00f      	beq.n	800841c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083fe:	3310      	adds	r3, #16
 8008400:	4618      	mov	r0, r3
 8008402:	f000 fe57 	bl	80090b4 <xTaskRemoveFromEventList>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d007      	beq.n	800841c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800840c:	4b3c      	ldr	r3, [pc, #240]	@ (8008500 <xQueueReceive+0x1c0>)
 800840e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800841c:	f001 fda6 	bl	8009f6c <vPortExitCritical>
				return pdPASS;
 8008420:	2301      	movs	r3, #1
 8008422:	e069      	b.n	80084f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d103      	bne.n	8008432 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800842a:	f001 fd9f 	bl	8009f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800842e:	2300      	movs	r3, #0
 8008430:	e062      	b.n	80084f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008434:	2b00      	cmp	r3, #0
 8008436:	d106      	bne.n	8008446 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008438:	f107 0310 	add.w	r3, r7, #16
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fe9d 	bl	800917c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008442:	2301      	movs	r3, #1
 8008444:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008446:	f001 fd91 	bl	8009f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800844a:	f000 fc0d 	bl	8008c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800844e:	f001 fd5b 	bl	8009f08 <vPortEnterCritical>
 8008452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008454:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008458:	b25b      	sxtb	r3, r3
 800845a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845e:	d103      	bne.n	8008468 <xQueueReceive+0x128>
 8008460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800846e:	b25b      	sxtb	r3, r3
 8008470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008474:	d103      	bne.n	800847e <xQueueReceive+0x13e>
 8008476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800847e:	f001 fd75 	bl	8009f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008482:	1d3a      	adds	r2, r7, #4
 8008484:	f107 0310 	add.w	r3, r7, #16
 8008488:	4611      	mov	r1, r2
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fe8c 	bl	80091a8 <xTaskCheckForTimeOut>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d123      	bne.n	80084de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008496:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008498:	f000 f916 	bl	80086c8 <prvIsQueueEmpty>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d017      	beq.n	80084d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a4:	3324      	adds	r3, #36	@ 0x24
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	4611      	mov	r1, r2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fdb0 	bl	8009010 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084b2:	f000 f8b7 	bl	8008624 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084b6:	f000 fbe5 	bl	8008c84 <xTaskResumeAll>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d189      	bne.n	80083d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80084c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008500 <xQueueReceive+0x1c0>)
 80084c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	e780      	b.n	80083d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084d4:	f000 f8a6 	bl	8008624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084d8:	f000 fbd4 	bl	8008c84 <xTaskResumeAll>
 80084dc:	e77a      	b.n	80083d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084e0:	f000 f8a0 	bl	8008624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084e4:	f000 fbce 	bl	8008c84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084ea:	f000 f8ed 	bl	80086c8 <prvIsQueueEmpty>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f43f af6f 	beq.w	80083d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3730      	adds	r7, #48	@ 0x30
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	e000ed04 	.word	0xe000ed04

08008504 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008510:	2300      	movs	r3, #0
 8008512:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008518:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10d      	bne.n	800853e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d14d      	bne.n	80085c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 ff9e 	bl	8009470 <xTaskPriorityDisinherit>
 8008534:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	609a      	str	r2, [r3, #8]
 800853c:	e043      	b.n	80085c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d119      	bne.n	8008578 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6858      	ldr	r0, [r3, #4]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854c:	461a      	mov	r2, r3
 800854e:	68b9      	ldr	r1, [r7, #8]
 8008550:	f002 fdd2 	bl	800b0f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855c:	441a      	add	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	429a      	cmp	r2, r3
 800856c:	d32b      	bcc.n	80085c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	605a      	str	r2, [r3, #4]
 8008576:	e026      	b.n	80085c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	68d8      	ldr	r0, [r3, #12]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008580:	461a      	mov	r2, r3
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	f002 fdb8 	bl	800b0f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008590:	425b      	negs	r3, r3
 8008592:	441a      	add	r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	68da      	ldr	r2, [r3, #12]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d207      	bcs.n	80085b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ac:	425b      	negs	r3, r3
 80085ae:	441a      	add	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d105      	bne.n	80085c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1c5a      	adds	r2, r3, #1
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80085ce:	697b      	ldr	r3, [r7, #20]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d018      	beq.n	800861c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f2:	441a      	add	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	429a      	cmp	r2, r3
 8008602:	d303      	bcc.n	800860c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68d9      	ldr	r1, [r3, #12]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008614:	461a      	mov	r2, r3
 8008616:	6838      	ldr	r0, [r7, #0]
 8008618:	f002 fd6e 	bl	800b0f8 <memcpy>
	}
}
 800861c:	bf00      	nop
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800862c:	f001 fc6c 	bl	8009f08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008636:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008638:	e011      	b.n	800865e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800863e:	2b00      	cmp	r3, #0
 8008640:	d012      	beq.n	8008668 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	3324      	adds	r3, #36	@ 0x24
 8008646:	4618      	mov	r0, r3
 8008648:	f000 fd34 	bl	80090b4 <xTaskRemoveFromEventList>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008652:	f000 fe0d 	bl	8009270 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	3b01      	subs	r3, #1
 800865a:	b2db      	uxtb	r3, r3
 800865c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800865e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008662:	2b00      	cmp	r3, #0
 8008664:	dce9      	bgt.n	800863a <prvUnlockQueue+0x16>
 8008666:	e000      	b.n	800866a <prvUnlockQueue+0x46>
					break;
 8008668:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	22ff      	movs	r2, #255	@ 0xff
 800866e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008672:	f001 fc7b 	bl	8009f6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008676:	f001 fc47 	bl	8009f08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008680:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008682:	e011      	b.n	80086a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d012      	beq.n	80086b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3310      	adds	r3, #16
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fd0f 	bl	80090b4 <xTaskRemoveFromEventList>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d001      	beq.n	80086a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800869c:	f000 fde8 	bl	8009270 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	dce9      	bgt.n	8008684 <prvUnlockQueue+0x60>
 80086b0:	e000      	b.n	80086b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	22ff      	movs	r2, #255	@ 0xff
 80086b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80086bc:	f001 fc56 	bl	8009f6c <vPortExitCritical>
}
 80086c0:	bf00      	nop
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086d0:	f001 fc1a 	bl	8009f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086dc:	2301      	movs	r3, #1
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	e001      	b.n	80086e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086e6:	f001 fc41 	bl	8009f6c <vPortExitCritical>

	return xReturn;
 80086ea:	68fb      	ldr	r3, [r7, #12]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086fc:	f001 fc04 	bl	8009f08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008708:	429a      	cmp	r2, r3
 800870a:	d102      	bne.n	8008712 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800870c:	2301      	movs	r3, #1
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	e001      	b.n	8008716 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008716:	f001 fc29 	bl	8009f6c <vPortExitCritical>

	return xReturn;
 800871a:	68fb      	ldr	r3, [r7, #12]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	e014      	b.n	800875e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008734:	4a0f      	ldr	r2, [pc, #60]	@ (8008774 <vQueueAddToRegistry+0x50>)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10b      	bne.n	8008758 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008740:	490c      	ldr	r1, [pc, #48]	@ (8008774 <vQueueAddToRegistry+0x50>)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800874a:	4a0a      	ldr	r2, [pc, #40]	@ (8008774 <vQueueAddToRegistry+0x50>)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	4413      	add	r3, r2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008756:	e006      	b.n	8008766 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	3301      	adds	r3, #1
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b07      	cmp	r3, #7
 8008762:	d9e7      	bls.n	8008734 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008764:	bf00      	nop
 8008766:	bf00      	nop
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	200021ec 	.word	0x200021ec

08008778 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008788:	f001 fbbe 	bl	8009f08 <vPortEnterCritical>
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008792:	b25b      	sxtb	r3, r3
 8008794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008798:	d103      	bne.n	80087a2 <vQueueWaitForMessageRestricted+0x2a>
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087a8:	b25b      	sxtb	r3, r3
 80087aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ae:	d103      	bne.n	80087b8 <vQueueWaitForMessageRestricted+0x40>
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087b8:	f001 fbd8 	bl	8009f6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d106      	bne.n	80087d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	3324      	adds	r3, #36	@ 0x24
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	68b9      	ldr	r1, [r7, #8]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f000 fc45 	bl	800905c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087d2:	6978      	ldr	r0, [r7, #20]
 80087d4:	f7ff ff26 	bl	8008624 <prvUnlockQueue>
	}
 80087d8:	bf00      	nop
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08e      	sub	sp, #56	@ 0x38
 80087e4:	af04      	add	r7, sp, #16
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10b      	bne.n	800880c <xTaskCreateStatic+0x2c>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	623b      	str	r3, [r7, #32]
}
 8008806:	bf00      	nop
 8008808:	bf00      	nop
 800880a:	e7fd      	b.n	8008808 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800880c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10b      	bne.n	800882a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	61fb      	str	r3, [r7, #28]
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	e7fd      	b.n	8008826 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800882a:	235c      	movs	r3, #92	@ 0x5c
 800882c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	2b5c      	cmp	r3, #92	@ 0x5c
 8008832:	d00b      	beq.n	800884c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008838:	f383 8811 	msr	BASEPRI, r3
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	61bb      	str	r3, [r7, #24]
}
 8008846:	bf00      	nop
 8008848:	bf00      	nop
 800884a:	e7fd      	b.n	8008848 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800884c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800884e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01e      	beq.n	8008892 <xTaskCreateStatic+0xb2>
 8008854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008856:	2b00      	cmp	r3, #0
 8008858:	d01b      	beq.n	8008892 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800885a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008860:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008862:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008866:	2202      	movs	r2, #2
 8008868:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800886c:	2300      	movs	r3, #0
 800886e:	9303      	str	r3, [sp, #12]
 8008870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008872:	9302      	str	r3, [sp, #8]
 8008874:	f107 0314 	add.w	r3, r7, #20
 8008878:	9301      	str	r3, [sp, #4]
 800887a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	68b9      	ldr	r1, [r7, #8]
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f850 	bl	800892a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800888a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800888c:	f000 f8de 	bl	8008a4c <prvAddNewTaskToReadyList>
 8008890:	e001      	b.n	8008896 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008896:	697b      	ldr	r3, [r7, #20]
	}
 8008898:	4618      	mov	r0, r3
 800889a:	3728      	adds	r7, #40	@ 0x28
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08c      	sub	sp, #48	@ 0x30
 80088a4:	af04      	add	r7, sp, #16
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	603b      	str	r3, [r7, #0]
 80088ac:	4613      	mov	r3, r2
 80088ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088b0:	88fb      	ldrh	r3, [r7, #6]
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f001 fc49 	bl	800a14c <pvPortMalloc>
 80088ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00e      	beq.n	80088e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088c2:	205c      	movs	r0, #92	@ 0x5c
 80088c4:	f001 fc42 	bl	800a14c <pvPortMalloc>
 80088c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80088d6:	e005      	b.n	80088e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088d8:	6978      	ldr	r0, [r7, #20]
 80088da:	f001 fd05 	bl	800a2e8 <vPortFree>
 80088de:	e001      	b.n	80088e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088e0:	2300      	movs	r3, #0
 80088e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d017      	beq.n	800891a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088f2:	88fa      	ldrh	r2, [r7, #6]
 80088f4:	2300      	movs	r3, #0
 80088f6:	9303      	str	r3, [sp, #12]
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	9302      	str	r3, [sp, #8]
 80088fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fe:	9301      	str	r3, [sp, #4]
 8008900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 f80e 	bl	800892a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800890e:	69f8      	ldr	r0, [r7, #28]
 8008910:	f000 f89c 	bl	8008a4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008914:	2301      	movs	r3, #1
 8008916:	61bb      	str	r3, [r7, #24]
 8008918:	e002      	b.n	8008920 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800891a:	f04f 33ff 	mov.w	r3, #4294967295
 800891e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008920:	69bb      	ldr	r3, [r7, #24]
	}
 8008922:	4618      	mov	r0, r3
 8008924:	3720      	adds	r7, #32
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b088      	sub	sp, #32
 800892e:	af00      	add	r7, sp, #0
 8008930:	60f8      	str	r0, [r7, #12]
 8008932:	60b9      	str	r1, [r7, #8]
 8008934:	607a      	str	r2, [r7, #4]
 8008936:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	461a      	mov	r2, r3
 8008942:	21a5      	movs	r1, #165	@ 0xa5
 8008944:	f002 fb94 	bl	800b070 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008952:	3b01      	subs	r3, #1
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4413      	add	r3, r2
 8008958:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	f023 0307 	bic.w	r3, r3, #7
 8008960:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	f003 0307 	and.w	r3, r3, #7
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00b      	beq.n	8008984 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	617b      	str	r3, [r7, #20]
}
 800897e:	bf00      	nop
 8008980:	bf00      	nop
 8008982:	e7fd      	b.n	8008980 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d01f      	beq.n	80089ca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800898a:	2300      	movs	r3, #0
 800898c:	61fb      	str	r3, [r7, #28]
 800898e:	e012      	b.n	80089b6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	4413      	add	r3, r2
 8008996:	7819      	ldrb	r1, [r3, #0]
 8008998:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	4413      	add	r3, r2
 800899e:	3334      	adds	r3, #52	@ 0x34
 80089a0:	460a      	mov	r2, r1
 80089a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	4413      	add	r3, r2
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d006      	beq.n	80089be <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	3301      	adds	r3, #1
 80089b4:	61fb      	str	r3, [r7, #28]
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	2b0f      	cmp	r3, #15
 80089ba:	d9e9      	bls.n	8008990 <prvInitialiseNewTask+0x66>
 80089bc:	e000      	b.n	80089c0 <prvInitialiseNewTask+0x96>
			{
				break;
 80089be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089c8:	e003      	b.n	80089d2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d4:	2b37      	cmp	r3, #55	@ 0x37
 80089d6:	d901      	bls.n	80089dc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089d8:	2337      	movs	r3, #55	@ 0x37
 80089da:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089e6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80089e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ea:	2200      	movs	r2, #0
 80089ec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f0:	3304      	adds	r3, #4
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7ff f966 	bl	8007cc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fa:	3318      	adds	r3, #24
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff f961 	bl	8007cc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a16:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	68f9      	ldr	r1, [r7, #12]
 8008a2a:	69b8      	ldr	r0, [r7, #24]
 8008a2c:	f001 f93e 	bl	8009cac <pxPortInitialiseStack>
 8008a30:	4602      	mov	r2, r0
 8008a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a42:	bf00      	nop
 8008a44:	3720      	adds	r7, #32
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a54:	f001 fa58 	bl	8009f08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a58:	4b2d      	ldr	r3, [pc, #180]	@ (8008b10 <prvAddNewTaskToReadyList+0xc4>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8008b10 <prvAddNewTaskToReadyList+0xc4>)
 8008a60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a62:	4b2c      	ldr	r3, [pc, #176]	@ (8008b14 <prvAddNewTaskToReadyList+0xc8>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d109      	bne.n	8008a7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8008b14 <prvAddNewTaskToReadyList+0xc8>)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a70:	4b27      	ldr	r3, [pc, #156]	@ (8008b10 <prvAddNewTaskToReadyList+0xc4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d110      	bne.n	8008a9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a78:	f000 fc1e 	bl	80092b8 <prvInitialiseTaskLists>
 8008a7c:	e00d      	b.n	8008a9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a7e:	4b26      	ldr	r3, [pc, #152]	@ (8008b18 <prvAddNewTaskToReadyList+0xcc>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d109      	bne.n	8008a9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a86:	4b23      	ldr	r3, [pc, #140]	@ (8008b14 <prvAddNewTaskToReadyList+0xc8>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d802      	bhi.n	8008a9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a94:	4a1f      	ldr	r2, [pc, #124]	@ (8008b14 <prvAddNewTaskToReadyList+0xc8>)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a9a:	4b20      	ldr	r3, [pc, #128]	@ (8008b1c <prvAddNewTaskToReadyList+0xd0>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8008b1c <prvAddNewTaskToReadyList+0xd0>)
 8008aa2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8008b1c <prvAddNewTaskToReadyList+0xd0>)
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8008b20 <prvAddNewTaskToReadyList+0xd4>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d903      	bls.n	8008ac0 <prvAddNewTaskToReadyList+0x74>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008abc:	4a18      	ldr	r2, [pc, #96]	@ (8008b20 <prvAddNewTaskToReadyList+0xd4>)
 8008abe:	6013      	str	r3, [r2, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4a15      	ldr	r2, [pc, #84]	@ (8008b24 <prvAddNewTaskToReadyList+0xd8>)
 8008ace:	441a      	add	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	f7ff f901 	bl	8007cde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008adc:	f001 fa46 	bl	8009f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8008b18 <prvAddNewTaskToReadyList+0xcc>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00e      	beq.n	8008b06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8008b14 <prvAddNewTaskToReadyList+0xc8>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d207      	bcs.n	8008b06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008af6:	4b0c      	ldr	r3, [pc, #48]	@ (8008b28 <prvAddNewTaskToReadyList+0xdc>)
 8008af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b06:	bf00      	nop
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20002700 	.word	0x20002700
 8008b14:	2000222c 	.word	0x2000222c
 8008b18:	2000270c 	.word	0x2000270c
 8008b1c:	2000271c 	.word	0x2000271c
 8008b20:	20002708 	.word	0x20002708
 8008b24:	20002230 	.word	0x20002230
 8008b28:	e000ed04 	.word	0xe000ed04

08008b2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b34:	2300      	movs	r3, #0
 8008b36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d018      	beq.n	8008b70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b3e:	4b14      	ldr	r3, [pc, #80]	@ (8008b90 <vTaskDelay+0x64>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00b      	beq.n	8008b5e <vTaskDelay+0x32>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	60bb      	str	r3, [r7, #8]
}
 8008b58:	bf00      	nop
 8008b5a:	bf00      	nop
 8008b5c:	e7fd      	b.n	8008b5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b5e:	f000 f883 	bl	8008c68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b62:	2100      	movs	r1, #0
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fcf3 	bl	8009550 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b6a:	f000 f88b 	bl	8008c84 <xTaskResumeAll>
 8008b6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d107      	bne.n	8008b86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008b76:	4b07      	ldr	r3, [pc, #28]	@ (8008b94 <vTaskDelay+0x68>)
 8008b78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b86:	bf00      	nop
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20002728 	.word	0x20002728
 8008b94:	e000ed04 	.word	0xe000ed04

08008b98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08a      	sub	sp, #40	@ 0x28
 8008b9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ba6:	463a      	mov	r2, r7
 8008ba8:	1d39      	adds	r1, r7, #4
 8008baa:	f107 0308 	add.w	r3, r7, #8
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff f834 	bl	8007c1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	9202      	str	r2, [sp, #8]
 8008bbc:	9301      	str	r3, [sp, #4]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	460a      	mov	r2, r1
 8008bc6:	4922      	ldr	r1, [pc, #136]	@ (8008c50 <vTaskStartScheduler+0xb8>)
 8008bc8:	4822      	ldr	r0, [pc, #136]	@ (8008c54 <vTaskStartScheduler+0xbc>)
 8008bca:	f7ff fe09 	bl	80087e0 <xTaskCreateStatic>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	4a21      	ldr	r2, [pc, #132]	@ (8008c58 <vTaskStartScheduler+0xc0>)
 8008bd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008bd4:	4b20      	ldr	r3, [pc, #128]	@ (8008c58 <vTaskStartScheduler+0xc0>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	617b      	str	r3, [r7, #20]
 8008be0:	e001      	b.n	8008be6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008be2:	2300      	movs	r3, #0
 8008be4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d102      	bne.n	8008bf2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008bec:	f000 fd04 	bl	80095f8 <xTimerCreateTimerTask>
 8008bf0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d116      	bne.n	8008c26 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	613b      	str	r3, [r7, #16]
}
 8008c0a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c0c:	4b13      	ldr	r3, [pc, #76]	@ (8008c5c <vTaskStartScheduler+0xc4>)
 8008c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c14:	4b12      	ldr	r3, [pc, #72]	@ (8008c60 <vTaskStartScheduler+0xc8>)
 8008c16:	2201      	movs	r2, #1
 8008c18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c1a:	4b12      	ldr	r3, [pc, #72]	@ (8008c64 <vTaskStartScheduler+0xcc>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c20:	f001 f8ce 	bl	8009dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c24:	e00f      	b.n	8008c46 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2c:	d10b      	bne.n	8008c46 <vTaskStartScheduler+0xae>
	__asm volatile
 8008c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	60fb      	str	r3, [r7, #12]
}
 8008c40:	bf00      	nop
 8008c42:	bf00      	nop
 8008c44:	e7fd      	b.n	8008c42 <vTaskStartScheduler+0xaa>
}
 8008c46:	bf00      	nop
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	0800bd44 	.word	0x0800bd44
 8008c54:	08009289 	.word	0x08009289
 8008c58:	20002724 	.word	0x20002724
 8008c5c:	20002720 	.word	0x20002720
 8008c60:	2000270c 	.word	0x2000270c
 8008c64:	20002704 	.word	0x20002704

08008c68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c68:	b480      	push	{r7}
 8008c6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c6c:	4b04      	ldr	r3, [pc, #16]	@ (8008c80 <vTaskSuspendAll+0x18>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3301      	adds	r3, #1
 8008c72:	4a03      	ldr	r2, [pc, #12]	@ (8008c80 <vTaskSuspendAll+0x18>)
 8008c74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c76:	bf00      	nop
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	20002728 	.word	0x20002728

08008c84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c92:	4b42      	ldr	r3, [pc, #264]	@ (8008d9c <xTaskResumeAll+0x118>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10b      	bne.n	8008cb2 <xTaskResumeAll+0x2e>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	603b      	str	r3, [r7, #0]
}
 8008cac:	bf00      	nop
 8008cae:	bf00      	nop
 8008cb0:	e7fd      	b.n	8008cae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008cb2:	f001 f929 	bl	8009f08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008cb6:	4b39      	ldr	r3, [pc, #228]	@ (8008d9c <xTaskResumeAll+0x118>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	4a37      	ldr	r2, [pc, #220]	@ (8008d9c <xTaskResumeAll+0x118>)
 8008cbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cc0:	4b36      	ldr	r3, [pc, #216]	@ (8008d9c <xTaskResumeAll+0x118>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d162      	bne.n	8008d8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008cc8:	4b35      	ldr	r3, [pc, #212]	@ (8008da0 <xTaskResumeAll+0x11c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d05e      	beq.n	8008d8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cd0:	e02f      	b.n	8008d32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd2:	4b34      	ldr	r3, [pc, #208]	@ (8008da4 <xTaskResumeAll+0x120>)
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3318      	adds	r3, #24
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7ff f85a 	bl	8007d98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7ff f855 	bl	8007d98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8008da8 <xTaskResumeAll+0x124>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d903      	bls.n	8008d02 <xTaskResumeAll+0x7e>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8008da8 <xTaskResumeAll+0x124>)
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4a27      	ldr	r2, [pc, #156]	@ (8008dac <xTaskResumeAll+0x128>)
 8008d10:	441a      	add	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3304      	adds	r3, #4
 8008d16:	4619      	mov	r1, r3
 8008d18:	4610      	mov	r0, r2
 8008d1a:	f7fe ffe0 	bl	8007cde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d22:	4b23      	ldr	r3, [pc, #140]	@ (8008db0 <xTaskResumeAll+0x12c>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d302      	bcc.n	8008d32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008d2c:	4b21      	ldr	r3, [pc, #132]	@ (8008db4 <xTaskResumeAll+0x130>)
 8008d2e:	2201      	movs	r2, #1
 8008d30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d32:	4b1c      	ldr	r3, [pc, #112]	@ (8008da4 <xTaskResumeAll+0x120>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1cb      	bne.n	8008cd2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d40:	f000 fb58 	bl	80093f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d44:	4b1c      	ldr	r3, [pc, #112]	@ (8008db8 <xTaskResumeAll+0x134>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d010      	beq.n	8008d72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d50:	f000 f846 	bl	8008de0 <xTaskIncrementTick>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008d5a:	4b16      	ldr	r3, [pc, #88]	@ (8008db4 <xTaskResumeAll+0x130>)
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1f1      	bne.n	8008d50 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008d6c:	4b12      	ldr	r3, [pc, #72]	@ (8008db8 <xTaskResumeAll+0x134>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d72:	4b10      	ldr	r3, [pc, #64]	@ (8008db4 <xTaskResumeAll+0x130>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d009      	beq.n	8008d8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8008dbc <xTaskResumeAll+0x138>)
 8008d80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d8e:	f001 f8ed 	bl	8009f6c <vPortExitCritical>

	return xAlreadyYielded;
 8008d92:	68bb      	ldr	r3, [r7, #8]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	20002728 	.word	0x20002728
 8008da0:	20002700 	.word	0x20002700
 8008da4:	200026c0 	.word	0x200026c0
 8008da8:	20002708 	.word	0x20002708
 8008dac:	20002230 	.word	0x20002230
 8008db0:	2000222c 	.word	0x2000222c
 8008db4:	20002714 	.word	0x20002714
 8008db8:	20002710 	.word	0x20002710
 8008dbc:	e000ed04 	.word	0xe000ed04

08008dc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008dc6:	4b05      	ldr	r3, [pc, #20]	@ (8008ddc <xTaskGetTickCount+0x1c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008dcc:	687b      	ldr	r3, [r7, #4]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	20002704 	.word	0x20002704

08008de0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008de6:	2300      	movs	r3, #0
 8008de8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dea:	4b4f      	ldr	r3, [pc, #316]	@ (8008f28 <xTaskIncrementTick+0x148>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f040 8090 	bne.w	8008f14 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008df4:	4b4d      	ldr	r3, [pc, #308]	@ (8008f2c <xTaskIncrementTick+0x14c>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008dfc:	4a4b      	ldr	r2, [pc, #300]	@ (8008f2c <xTaskIncrementTick+0x14c>)
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d121      	bne.n	8008e4c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e08:	4b49      	ldr	r3, [pc, #292]	@ (8008f30 <xTaskIncrementTick+0x150>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00b      	beq.n	8008e2a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	603b      	str	r3, [r7, #0]
}
 8008e24:	bf00      	nop
 8008e26:	bf00      	nop
 8008e28:	e7fd      	b.n	8008e26 <xTaskIncrementTick+0x46>
 8008e2a:	4b41      	ldr	r3, [pc, #260]	@ (8008f30 <xTaskIncrementTick+0x150>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	4b40      	ldr	r3, [pc, #256]	@ (8008f34 <xTaskIncrementTick+0x154>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a3e      	ldr	r2, [pc, #248]	@ (8008f30 <xTaskIncrementTick+0x150>)
 8008e36:	6013      	str	r3, [r2, #0]
 8008e38:	4a3e      	ldr	r2, [pc, #248]	@ (8008f34 <xTaskIncrementTick+0x154>)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6013      	str	r3, [r2, #0]
 8008e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8008f38 <xTaskIncrementTick+0x158>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3301      	adds	r3, #1
 8008e44:	4a3c      	ldr	r2, [pc, #240]	@ (8008f38 <xTaskIncrementTick+0x158>)
 8008e46:	6013      	str	r3, [r2, #0]
 8008e48:	f000 fad4 	bl	80093f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8008f3c <xTaskIncrementTick+0x15c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d349      	bcc.n	8008eea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e56:	4b36      	ldr	r3, [pc, #216]	@ (8008f30 <xTaskIncrementTick+0x150>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d104      	bne.n	8008e6a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e60:	4b36      	ldr	r3, [pc, #216]	@ (8008f3c <xTaskIncrementTick+0x15c>)
 8008e62:	f04f 32ff 	mov.w	r2, #4294967295
 8008e66:	601a      	str	r2, [r3, #0]
					break;
 8008e68:	e03f      	b.n	8008eea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e6a:	4b31      	ldr	r3, [pc, #196]	@ (8008f30 <xTaskIncrementTick+0x150>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d203      	bcs.n	8008e8a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e82:	4a2e      	ldr	r2, [pc, #184]	@ (8008f3c <xTaskIncrementTick+0x15c>)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e88:	e02f      	b.n	8008eea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe ff82 	bl	8007d98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d004      	beq.n	8008ea6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	3318      	adds	r3, #24
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fe ff79 	bl	8007d98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eaa:	4b25      	ldr	r3, [pc, #148]	@ (8008f40 <xTaskIncrementTick+0x160>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d903      	bls.n	8008eba <xTaskIncrementTick+0xda>
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb6:	4a22      	ldr	r2, [pc, #136]	@ (8008f40 <xTaskIncrementTick+0x160>)
 8008eb8:	6013      	str	r3, [r2, #0]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8008f44 <xTaskIncrementTick+0x164>)
 8008ec8:	441a      	add	r2, r3
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	4619      	mov	r1, r3
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	f7fe ff04 	bl	8007cde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eda:	4b1b      	ldr	r3, [pc, #108]	@ (8008f48 <xTaskIncrementTick+0x168>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d3b8      	bcc.n	8008e56 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ee8:	e7b5      	b.n	8008e56 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008eea:	4b17      	ldr	r3, [pc, #92]	@ (8008f48 <xTaskIncrementTick+0x168>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ef0:	4914      	ldr	r1, [pc, #80]	@ (8008f44 <xTaskIncrementTick+0x164>)
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	440b      	add	r3, r1
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d901      	bls.n	8008f06 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008f02:	2301      	movs	r3, #1
 8008f04:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f06:	4b11      	ldr	r3, [pc, #68]	@ (8008f4c <xTaskIncrementTick+0x16c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d007      	beq.n	8008f1e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	617b      	str	r3, [r7, #20]
 8008f12:	e004      	b.n	8008f1e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f14:	4b0e      	ldr	r3, [pc, #56]	@ (8008f50 <xTaskIncrementTick+0x170>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8008f50 <xTaskIncrementTick+0x170>)
 8008f1c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f1e:	697b      	ldr	r3, [r7, #20]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3718      	adds	r7, #24
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	20002728 	.word	0x20002728
 8008f2c:	20002704 	.word	0x20002704
 8008f30:	200026b8 	.word	0x200026b8
 8008f34:	200026bc 	.word	0x200026bc
 8008f38:	20002718 	.word	0x20002718
 8008f3c:	20002720 	.word	0x20002720
 8008f40:	20002708 	.word	0x20002708
 8008f44:	20002230 	.word	0x20002230
 8008f48:	2000222c 	.word	0x2000222c
 8008f4c:	20002714 	.word	0x20002714
 8008f50:	20002710 	.word	0x20002710

08008f54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f5a:	4b28      	ldr	r3, [pc, #160]	@ (8008ffc <vTaskSwitchContext+0xa8>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f62:	4b27      	ldr	r3, [pc, #156]	@ (8009000 <vTaskSwitchContext+0xac>)
 8008f64:	2201      	movs	r2, #1
 8008f66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f68:	e042      	b.n	8008ff0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008f6a:	4b25      	ldr	r3, [pc, #148]	@ (8009000 <vTaskSwitchContext+0xac>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f70:	4b24      	ldr	r3, [pc, #144]	@ (8009004 <vTaskSwitchContext+0xb0>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	e011      	b.n	8008f9c <vTaskSwitchContext+0x48>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10b      	bne.n	8008f96 <vTaskSwitchContext+0x42>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	607b      	str	r3, [r7, #4]
}
 8008f90:	bf00      	nop
 8008f92:	bf00      	nop
 8008f94:	e7fd      	b.n	8008f92 <vTaskSwitchContext+0x3e>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	491a      	ldr	r1, [pc, #104]	@ (8009008 <vTaskSwitchContext+0xb4>)
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4413      	add	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	440b      	add	r3, r1
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d0e3      	beq.n	8008f78 <vTaskSwitchContext+0x24>
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4a13      	ldr	r2, [pc, #76]	@ (8009008 <vTaskSwitchContext+0xb4>)
 8008fbc:	4413      	add	r3, r2
 8008fbe:	60bb      	str	r3, [r7, #8]
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	605a      	str	r2, [r3, #4]
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	3308      	adds	r3, #8
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d104      	bne.n	8008fe0 <vTaskSwitchContext+0x8c>
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	605a      	str	r2, [r3, #4]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	4a09      	ldr	r2, [pc, #36]	@ (800900c <vTaskSwitchContext+0xb8>)
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	4a06      	ldr	r2, [pc, #24]	@ (8009004 <vTaskSwitchContext+0xb0>)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6013      	str	r3, [r2, #0]
}
 8008ff0:	bf00      	nop
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	20002728 	.word	0x20002728
 8009000:	20002714 	.word	0x20002714
 8009004:	20002708 	.word	0x20002708
 8009008:	20002230 	.word	0x20002230
 800900c:	2000222c 	.word	0x2000222c

08009010 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10b      	bne.n	8009038 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	60fb      	str	r3, [r7, #12]
}
 8009032:	bf00      	nop
 8009034:	bf00      	nop
 8009036:	e7fd      	b.n	8009034 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009038:	4b07      	ldr	r3, [pc, #28]	@ (8009058 <vTaskPlaceOnEventList+0x48>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3318      	adds	r3, #24
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7fe fe70 	bl	8007d26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009046:	2101      	movs	r1, #1
 8009048:	6838      	ldr	r0, [r7, #0]
 800904a:	f000 fa81 	bl	8009550 <prvAddCurrentTaskToDelayedList>
}
 800904e:	bf00      	nop
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	2000222c 	.word	0x2000222c

0800905c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10b      	bne.n	8009086 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800906e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	617b      	str	r3, [r7, #20]
}
 8009080:	bf00      	nop
 8009082:	bf00      	nop
 8009084:	e7fd      	b.n	8009082 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009086:	4b0a      	ldr	r3, [pc, #40]	@ (80090b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3318      	adds	r3, #24
 800908c:	4619      	mov	r1, r3
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f7fe fe25 	bl	8007cde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800909a:	f04f 33ff 	mov.w	r3, #4294967295
 800909e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80090a0:	6879      	ldr	r1, [r7, #4]
 80090a2:	68b8      	ldr	r0, [r7, #8]
 80090a4:	f000 fa54 	bl	8009550 <prvAddCurrentTaskToDelayedList>
	}
 80090a8:	bf00      	nop
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	2000222c 	.word	0x2000222c

080090b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10b      	bne.n	80090e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	60fb      	str	r3, [r7, #12]
}
 80090dc:	bf00      	nop
 80090de:	bf00      	nop
 80090e0:	e7fd      	b.n	80090de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	3318      	adds	r3, #24
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fe fe56 	bl	8007d98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009164 <xTaskRemoveFromEventList+0xb0>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d11d      	bne.n	8009130 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	3304      	adds	r3, #4
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fe fe4d 	bl	8007d98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009102:	4b19      	ldr	r3, [pc, #100]	@ (8009168 <xTaskRemoveFromEventList+0xb4>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d903      	bls.n	8009112 <xTaskRemoveFromEventList+0x5e>
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910e:	4a16      	ldr	r2, [pc, #88]	@ (8009168 <xTaskRemoveFromEventList+0xb4>)
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4a13      	ldr	r2, [pc, #76]	@ (800916c <xTaskRemoveFromEventList+0xb8>)
 8009120:	441a      	add	r2, r3
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	3304      	adds	r3, #4
 8009126:	4619      	mov	r1, r3
 8009128:	4610      	mov	r0, r2
 800912a:	f7fe fdd8 	bl	8007cde <vListInsertEnd>
 800912e:	e005      	b.n	800913c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	3318      	adds	r3, #24
 8009134:	4619      	mov	r1, r3
 8009136:	480e      	ldr	r0, [pc, #56]	@ (8009170 <xTaskRemoveFromEventList+0xbc>)
 8009138:	f7fe fdd1 	bl	8007cde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009140:	4b0c      	ldr	r3, [pc, #48]	@ (8009174 <xTaskRemoveFromEventList+0xc0>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009146:	429a      	cmp	r2, r3
 8009148:	d905      	bls.n	8009156 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800914a:	2301      	movs	r3, #1
 800914c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800914e:	4b0a      	ldr	r3, [pc, #40]	@ (8009178 <xTaskRemoveFromEventList+0xc4>)
 8009150:	2201      	movs	r2, #1
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	e001      	b.n	800915a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009156:	2300      	movs	r3, #0
 8009158:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800915a:	697b      	ldr	r3, [r7, #20]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20002728 	.word	0x20002728
 8009168:	20002708 	.word	0x20002708
 800916c:	20002230 	.word	0x20002230
 8009170:	200026c0 	.word	0x200026c0
 8009174:	2000222c 	.word	0x2000222c
 8009178:	20002714 	.word	0x20002714

0800917c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009184:	4b06      	ldr	r3, [pc, #24]	@ (80091a0 <vTaskInternalSetTimeOutState+0x24>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800918c:	4b05      	ldr	r3, [pc, #20]	@ (80091a4 <vTaskInternalSetTimeOutState+0x28>)
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	605a      	str	r2, [r3, #4]
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	20002718 	.word	0x20002718
 80091a4:	20002704 	.word	0x20002704

080091a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10b      	bne.n	80091d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	613b      	str	r3, [r7, #16]
}
 80091ca:	bf00      	nop
 80091cc:	bf00      	nop
 80091ce:	e7fd      	b.n	80091cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10b      	bne.n	80091ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	60fb      	str	r3, [r7, #12]
}
 80091e8:	bf00      	nop
 80091ea:	bf00      	nop
 80091ec:	e7fd      	b.n	80091ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80091ee:	f000 fe8b 	bl	8009f08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009268 <xTaskCheckForTimeOut+0xc0>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	69ba      	ldr	r2, [r7, #24]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920a:	d102      	bne.n	8009212 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800920c:	2300      	movs	r3, #0
 800920e:	61fb      	str	r3, [r7, #28]
 8009210:	e023      	b.n	800925a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	4b15      	ldr	r3, [pc, #84]	@ (800926c <xTaskCheckForTimeOut+0xc4>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	429a      	cmp	r2, r3
 800921c:	d007      	beq.n	800922e <xTaskCheckForTimeOut+0x86>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	429a      	cmp	r2, r3
 8009226:	d302      	bcc.n	800922e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009228:	2301      	movs	r3, #1
 800922a:	61fb      	str	r3, [r7, #28]
 800922c:	e015      	b.n	800925a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	429a      	cmp	r2, r3
 8009236:	d20b      	bcs.n	8009250 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	1ad2      	subs	r2, r2, r3
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff ff99 	bl	800917c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800924a:	2300      	movs	r3, #0
 800924c:	61fb      	str	r3, [r7, #28]
 800924e:	e004      	b.n	800925a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2200      	movs	r2, #0
 8009254:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009256:	2301      	movs	r3, #1
 8009258:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800925a:	f000 fe87 	bl	8009f6c <vPortExitCritical>

	return xReturn;
 800925e:	69fb      	ldr	r3, [r7, #28]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3720      	adds	r7, #32
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	20002704 	.word	0x20002704
 800926c:	20002718 	.word	0x20002718

08009270 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009274:	4b03      	ldr	r3, [pc, #12]	@ (8009284 <vTaskMissedYield+0x14>)
 8009276:	2201      	movs	r2, #1
 8009278:	601a      	str	r2, [r3, #0]
}
 800927a:	bf00      	nop
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	20002714 	.word	0x20002714

08009288 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009290:	f000 f852 	bl	8009338 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009294:	4b06      	ldr	r3, [pc, #24]	@ (80092b0 <prvIdleTask+0x28>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d9f9      	bls.n	8009290 <prvIdleTask+0x8>
			{
				taskYIELD();
 800929c:	4b05      	ldr	r3, [pc, #20]	@ (80092b4 <prvIdleTask+0x2c>)
 800929e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80092ac:	e7f0      	b.n	8009290 <prvIdleTask+0x8>
 80092ae:	bf00      	nop
 80092b0:	20002230 	.word	0x20002230
 80092b4:	e000ed04 	.word	0xe000ed04

080092b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092be:	2300      	movs	r3, #0
 80092c0:	607b      	str	r3, [r7, #4]
 80092c2:	e00c      	b.n	80092de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	4613      	mov	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4a12      	ldr	r2, [pc, #72]	@ (8009318 <prvInitialiseTaskLists+0x60>)
 80092d0:	4413      	add	r3, r2
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe fcd6 	bl	8007c84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	3301      	adds	r3, #1
 80092dc:	607b      	str	r3, [r7, #4]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2b37      	cmp	r3, #55	@ 0x37
 80092e2:	d9ef      	bls.n	80092c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092e4:	480d      	ldr	r0, [pc, #52]	@ (800931c <prvInitialiseTaskLists+0x64>)
 80092e6:	f7fe fccd 	bl	8007c84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092ea:	480d      	ldr	r0, [pc, #52]	@ (8009320 <prvInitialiseTaskLists+0x68>)
 80092ec:	f7fe fcca 	bl	8007c84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092f0:	480c      	ldr	r0, [pc, #48]	@ (8009324 <prvInitialiseTaskLists+0x6c>)
 80092f2:	f7fe fcc7 	bl	8007c84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092f6:	480c      	ldr	r0, [pc, #48]	@ (8009328 <prvInitialiseTaskLists+0x70>)
 80092f8:	f7fe fcc4 	bl	8007c84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092fc:	480b      	ldr	r0, [pc, #44]	@ (800932c <prvInitialiseTaskLists+0x74>)
 80092fe:	f7fe fcc1 	bl	8007c84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009302:	4b0b      	ldr	r3, [pc, #44]	@ (8009330 <prvInitialiseTaskLists+0x78>)
 8009304:	4a05      	ldr	r2, [pc, #20]	@ (800931c <prvInitialiseTaskLists+0x64>)
 8009306:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009308:	4b0a      	ldr	r3, [pc, #40]	@ (8009334 <prvInitialiseTaskLists+0x7c>)
 800930a:	4a05      	ldr	r2, [pc, #20]	@ (8009320 <prvInitialiseTaskLists+0x68>)
 800930c:	601a      	str	r2, [r3, #0]
}
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20002230 	.word	0x20002230
 800931c:	20002690 	.word	0x20002690
 8009320:	200026a4 	.word	0x200026a4
 8009324:	200026c0 	.word	0x200026c0
 8009328:	200026d4 	.word	0x200026d4
 800932c:	200026ec 	.word	0x200026ec
 8009330:	200026b8 	.word	0x200026b8
 8009334:	200026bc 	.word	0x200026bc

08009338 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800933e:	e019      	b.n	8009374 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009340:	f000 fde2 	bl	8009f08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009344:	4b10      	ldr	r3, [pc, #64]	@ (8009388 <prvCheckTasksWaitingTermination+0x50>)
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	3304      	adds	r3, #4
 8009350:	4618      	mov	r0, r3
 8009352:	f7fe fd21 	bl	8007d98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009356:	4b0d      	ldr	r3, [pc, #52]	@ (800938c <prvCheckTasksWaitingTermination+0x54>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	3b01      	subs	r3, #1
 800935c:	4a0b      	ldr	r2, [pc, #44]	@ (800938c <prvCheckTasksWaitingTermination+0x54>)
 800935e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009360:	4b0b      	ldr	r3, [pc, #44]	@ (8009390 <prvCheckTasksWaitingTermination+0x58>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3b01      	subs	r3, #1
 8009366:	4a0a      	ldr	r2, [pc, #40]	@ (8009390 <prvCheckTasksWaitingTermination+0x58>)
 8009368:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800936a:	f000 fdff 	bl	8009f6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f810 	bl	8009394 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009374:	4b06      	ldr	r3, [pc, #24]	@ (8009390 <prvCheckTasksWaitingTermination+0x58>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e1      	bne.n	8009340 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800937c:	bf00      	nop
 800937e:	bf00      	nop
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	200026d4 	.word	0x200026d4
 800938c:	20002700 	.word	0x20002700
 8009390:	200026e8 	.word	0x200026e8

08009394 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d108      	bne.n	80093b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 ff9c 	bl	800a2e8 <vPortFree>
				vPortFree( pxTCB );
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 ff99 	bl	800a2e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093b6:	e019      	b.n	80093ec <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d103      	bne.n	80093ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 ff90 	bl	800a2e8 <vPortFree>
	}
 80093c8:	e010      	b.n	80093ec <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d00b      	beq.n	80093ec <prvDeleteTCB+0x58>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	60fb      	str	r3, [r7, #12]
}
 80093e6:	bf00      	nop
 80093e8:	bf00      	nop
 80093ea:	e7fd      	b.n	80093e8 <prvDeleteTCB+0x54>
	}
 80093ec:	bf00      	nop
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093fa:	4b0c      	ldr	r3, [pc, #48]	@ (800942c <prvResetNextTaskUnblockTime+0x38>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d104      	bne.n	800940e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009404:	4b0a      	ldr	r3, [pc, #40]	@ (8009430 <prvResetNextTaskUnblockTime+0x3c>)
 8009406:	f04f 32ff 	mov.w	r2, #4294967295
 800940a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800940c:	e008      	b.n	8009420 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800940e:	4b07      	ldr	r3, [pc, #28]	@ (800942c <prvResetNextTaskUnblockTime+0x38>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	4a04      	ldr	r2, [pc, #16]	@ (8009430 <prvResetNextTaskUnblockTime+0x3c>)
 800941e:	6013      	str	r3, [r2, #0]
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	200026b8 	.word	0x200026b8
 8009430:	20002720 	.word	0x20002720

08009434 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800943a:	4b0b      	ldr	r3, [pc, #44]	@ (8009468 <xTaskGetSchedulerState+0x34>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d102      	bne.n	8009448 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009442:	2301      	movs	r3, #1
 8009444:	607b      	str	r3, [r7, #4]
 8009446:	e008      	b.n	800945a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009448:	4b08      	ldr	r3, [pc, #32]	@ (800946c <xTaskGetSchedulerState+0x38>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d102      	bne.n	8009456 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009450:	2302      	movs	r3, #2
 8009452:	607b      	str	r3, [r7, #4]
 8009454:	e001      	b.n	800945a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009456:	2300      	movs	r3, #0
 8009458:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800945a:	687b      	ldr	r3, [r7, #4]
	}
 800945c:	4618      	mov	r0, r3
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	2000270c 	.word	0x2000270c
 800946c:	20002728 	.word	0x20002728

08009470 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800947c:	2300      	movs	r3, #0
 800947e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d058      	beq.n	8009538 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009486:	4b2f      	ldr	r3, [pc, #188]	@ (8009544 <xTaskPriorityDisinherit+0xd4>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	429a      	cmp	r2, r3
 800948e:	d00b      	beq.n	80094a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	60fb      	str	r3, [r7, #12]
}
 80094a2:	bf00      	nop
 80094a4:	bf00      	nop
 80094a6:	e7fd      	b.n	80094a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d10b      	bne.n	80094c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	60bb      	str	r3, [r7, #8]
}
 80094c2:	bf00      	nop
 80094c4:	bf00      	nop
 80094c6:	e7fd      	b.n	80094c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094cc:	1e5a      	subs	r2, r3, #1
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094da:	429a      	cmp	r2, r3
 80094dc:	d02c      	beq.n	8009538 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d128      	bne.n	8009538 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	3304      	adds	r3, #4
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe fc54 	bl	8007d98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009508:	4b0f      	ldr	r3, [pc, #60]	@ (8009548 <xTaskPriorityDisinherit+0xd8>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	429a      	cmp	r2, r3
 800950e:	d903      	bls.n	8009518 <xTaskPriorityDisinherit+0xa8>
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009514:	4a0c      	ldr	r2, [pc, #48]	@ (8009548 <xTaskPriorityDisinherit+0xd8>)
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4a09      	ldr	r2, [pc, #36]	@ (800954c <xTaskPriorityDisinherit+0xdc>)
 8009526:	441a      	add	r2, r3
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	3304      	adds	r3, #4
 800952c:	4619      	mov	r1, r3
 800952e:	4610      	mov	r0, r2
 8009530:	f7fe fbd5 	bl	8007cde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009534:	2301      	movs	r3, #1
 8009536:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009538:	697b      	ldr	r3, [r7, #20]
	}
 800953a:	4618      	mov	r0, r3
 800953c:	3718      	adds	r7, #24
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	2000222c 	.word	0x2000222c
 8009548:	20002708 	.word	0x20002708
 800954c:	20002230 	.word	0x20002230

08009550 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800955a:	4b21      	ldr	r3, [pc, #132]	@ (80095e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009560:	4b20      	ldr	r3, [pc, #128]	@ (80095e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3304      	adds	r3, #4
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe fc16 	bl	8007d98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009572:	d10a      	bne.n	800958a <prvAddCurrentTaskToDelayedList+0x3a>
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d007      	beq.n	800958a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800957a:	4b1a      	ldr	r3, [pc, #104]	@ (80095e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3304      	adds	r3, #4
 8009580:	4619      	mov	r1, r3
 8009582:	4819      	ldr	r0, [pc, #100]	@ (80095e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009584:	f7fe fbab 	bl	8007cde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009588:	e026      	b.n	80095d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4413      	add	r3, r2
 8009590:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009592:	4b14      	ldr	r3, [pc, #80]	@ (80095e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d209      	bcs.n	80095b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095a2:	4b12      	ldr	r3, [pc, #72]	@ (80095ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	4b0f      	ldr	r3, [pc, #60]	@ (80095e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4619      	mov	r1, r3
 80095ae:	4610      	mov	r0, r2
 80095b0:	f7fe fbb9 	bl	8007d26 <vListInsert>
}
 80095b4:	e010      	b.n	80095d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095b6:	4b0e      	ldr	r3, [pc, #56]	@ (80095f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	4b0a      	ldr	r3, [pc, #40]	@ (80095e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3304      	adds	r3, #4
 80095c0:	4619      	mov	r1, r3
 80095c2:	4610      	mov	r0, r2
 80095c4:	f7fe fbaf 	bl	8007d26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095c8:	4b0a      	ldr	r3, [pc, #40]	@ (80095f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d202      	bcs.n	80095d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095d2:	4a08      	ldr	r2, [pc, #32]	@ (80095f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	6013      	str	r3, [r2, #0]
}
 80095d8:	bf00      	nop
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	20002704 	.word	0x20002704
 80095e4:	2000222c 	.word	0x2000222c
 80095e8:	200026ec 	.word	0x200026ec
 80095ec:	200026bc 	.word	0x200026bc
 80095f0:	200026b8 	.word	0x200026b8
 80095f4:	20002720 	.word	0x20002720

080095f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b08a      	sub	sp, #40	@ 0x28
 80095fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80095fe:	2300      	movs	r3, #0
 8009600:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009602:	f000 fb13 	bl	8009c2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009606:	4b1d      	ldr	r3, [pc, #116]	@ (800967c <xTimerCreateTimerTask+0x84>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d021      	beq.n	8009652 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009612:	2300      	movs	r3, #0
 8009614:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009616:	1d3a      	adds	r2, r7, #4
 8009618:	f107 0108 	add.w	r1, r7, #8
 800961c:	f107 030c 	add.w	r3, r7, #12
 8009620:	4618      	mov	r0, r3
 8009622:	f7fe fb15 	bl	8007c50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	9202      	str	r2, [sp, #8]
 800962e:	9301      	str	r3, [sp, #4]
 8009630:	2302      	movs	r3, #2
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	2300      	movs	r3, #0
 8009636:	460a      	mov	r2, r1
 8009638:	4911      	ldr	r1, [pc, #68]	@ (8009680 <xTimerCreateTimerTask+0x88>)
 800963a:	4812      	ldr	r0, [pc, #72]	@ (8009684 <xTimerCreateTimerTask+0x8c>)
 800963c:	f7ff f8d0 	bl	80087e0 <xTaskCreateStatic>
 8009640:	4603      	mov	r3, r0
 8009642:	4a11      	ldr	r2, [pc, #68]	@ (8009688 <xTimerCreateTimerTask+0x90>)
 8009644:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009646:	4b10      	ldr	r3, [pc, #64]	@ (8009688 <xTimerCreateTimerTask+0x90>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800964e:	2301      	movs	r3, #1
 8009650:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10b      	bne.n	8009670 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	613b      	str	r3, [r7, #16]
}
 800966a:	bf00      	nop
 800966c:	bf00      	nop
 800966e:	e7fd      	b.n	800966c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009670:	697b      	ldr	r3, [r7, #20]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	2000275c 	.word	0x2000275c
 8009680:	0800bd4c 	.word	0x0800bd4c
 8009684:	080097c5 	.word	0x080097c5
 8009688:	20002760 	.word	0x20002760

0800968c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b08a      	sub	sp, #40	@ 0x28
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800969a:	2300      	movs	r3, #0
 800969c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10b      	bne.n	80096bc <xTimerGenericCommand+0x30>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	623b      	str	r3, [r7, #32]
}
 80096b6:	bf00      	nop
 80096b8:	bf00      	nop
 80096ba:	e7fd      	b.n	80096b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80096bc:	4b19      	ldr	r3, [pc, #100]	@ (8009724 <xTimerGenericCommand+0x98>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d02a      	beq.n	800971a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2b05      	cmp	r3, #5
 80096d4:	dc18      	bgt.n	8009708 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096d6:	f7ff fead 	bl	8009434 <xTaskGetSchedulerState>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d109      	bne.n	80096f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096e0:	4b10      	ldr	r3, [pc, #64]	@ (8009724 <xTimerGenericCommand+0x98>)
 80096e2:	6818      	ldr	r0, [r3, #0]
 80096e4:	f107 0110 	add.w	r1, r7, #16
 80096e8:	2300      	movs	r3, #0
 80096ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096ec:	f7fe fc88 	bl	8008000 <xQueueGenericSend>
 80096f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80096f2:	e012      	b.n	800971a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009724 <xTimerGenericCommand+0x98>)
 80096f6:	6818      	ldr	r0, [r3, #0]
 80096f8:	f107 0110 	add.w	r1, r7, #16
 80096fc:	2300      	movs	r3, #0
 80096fe:	2200      	movs	r2, #0
 8009700:	f7fe fc7e 	bl	8008000 <xQueueGenericSend>
 8009704:	6278      	str	r0, [r7, #36]	@ 0x24
 8009706:	e008      	b.n	800971a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009708:	4b06      	ldr	r3, [pc, #24]	@ (8009724 <xTimerGenericCommand+0x98>)
 800970a:	6818      	ldr	r0, [r3, #0]
 800970c:	f107 0110 	add.w	r1, r7, #16
 8009710:	2300      	movs	r3, #0
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	f7fe fd76 	bl	8008204 <xQueueGenericSendFromISR>
 8009718:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800971a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800971c:	4618      	mov	r0, r3
 800971e:	3728      	adds	r7, #40	@ 0x28
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	2000275c 	.word	0x2000275c

08009728 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b088      	sub	sp, #32
 800972c:	af02      	add	r7, sp, #8
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009732:	4b23      	ldr	r3, [pc, #140]	@ (80097c0 <prvProcessExpiredTimer+0x98>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	3304      	adds	r3, #4
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe fb29 	bl	8007d98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800974c:	f003 0304 	and.w	r3, r3, #4
 8009750:	2b00      	cmp	r3, #0
 8009752:	d023      	beq.n	800979c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	699a      	ldr	r2, [r3, #24]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	18d1      	adds	r1, r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	6978      	ldr	r0, [r7, #20]
 8009762:	f000 f8d5 	bl	8009910 <prvInsertTimerInActiveList>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d020      	beq.n	80097ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800976c:	2300      	movs	r3, #0
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	2300      	movs	r3, #0
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	2100      	movs	r1, #0
 8009776:	6978      	ldr	r0, [r7, #20]
 8009778:	f7ff ff88 	bl	800968c <xTimerGenericCommand>
 800977c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d114      	bne.n	80097ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	60fb      	str	r3, [r7, #12]
}
 8009796:	bf00      	nop
 8009798:	bf00      	nop
 800979a:	e7fd      	b.n	8009798 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097a2:	f023 0301 	bic.w	r3, r3, #1
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	6978      	ldr	r0, [r7, #20]
 80097b4:	4798      	blx	r3
}
 80097b6:	bf00      	nop
 80097b8:	3718      	adds	r7, #24
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	20002754 	.word	0x20002754

080097c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097cc:	f107 0308 	add.w	r3, r7, #8
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 f859 	bl	8009888 <prvGetNextExpireTime>
 80097d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	4619      	mov	r1, r3
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f000 f805 	bl	80097ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097e2:	f000 f8d7 	bl	8009994 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097e6:	bf00      	nop
 80097e8:	e7f0      	b.n	80097cc <prvTimerTask+0x8>
	...

080097ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097f6:	f7ff fa37 	bl	8008c68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097fa:	f107 0308 	add.w	r3, r7, #8
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 f866 	bl	80098d0 <prvSampleTimeNow>
 8009804:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d130      	bne.n	800986e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10a      	bne.n	8009828 <prvProcessTimerOrBlockTask+0x3c>
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	429a      	cmp	r2, r3
 8009818:	d806      	bhi.n	8009828 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800981a:	f7ff fa33 	bl	8008c84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800981e:	68f9      	ldr	r1, [r7, #12]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff ff81 	bl	8009728 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009826:	e024      	b.n	8009872 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d008      	beq.n	8009840 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800982e:	4b13      	ldr	r3, [pc, #76]	@ (800987c <prvProcessTimerOrBlockTask+0x90>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <prvProcessTimerOrBlockTask+0x50>
 8009838:	2301      	movs	r3, #1
 800983a:	e000      	b.n	800983e <prvProcessTimerOrBlockTask+0x52>
 800983c:	2300      	movs	r3, #0
 800983e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009840:	4b0f      	ldr	r3, [pc, #60]	@ (8009880 <prvProcessTimerOrBlockTask+0x94>)
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	4619      	mov	r1, r3
 800984e:	f7fe ff93 	bl	8008778 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009852:	f7ff fa17 	bl	8008c84 <xTaskResumeAll>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10a      	bne.n	8009872 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800985c:	4b09      	ldr	r3, [pc, #36]	@ (8009884 <prvProcessTimerOrBlockTask+0x98>)
 800985e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	f3bf 8f6f 	isb	sy
}
 800986c:	e001      	b.n	8009872 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800986e:	f7ff fa09 	bl	8008c84 <xTaskResumeAll>
}
 8009872:	bf00      	nop
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	20002758 	.word	0x20002758
 8009880:	2000275c 	.word	0x2000275c
 8009884:	e000ed04 	.word	0xe000ed04

08009888 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009890:	4b0e      	ldr	r3, [pc, #56]	@ (80098cc <prvGetNextExpireTime+0x44>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <prvGetNextExpireTime+0x16>
 800989a:	2201      	movs	r2, #1
 800989c:	e000      	b.n	80098a0 <prvGetNextExpireTime+0x18>
 800989e:	2200      	movs	r2, #0
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d105      	bne.n	80098b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098ac:	4b07      	ldr	r3, [pc, #28]	@ (80098cc <prvGetNextExpireTime+0x44>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	e001      	b.n	80098bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80098b8:	2300      	movs	r3, #0
 80098ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80098bc:	68fb      	ldr	r3, [r7, #12]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	20002754 	.word	0x20002754

080098d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098d8:	f7ff fa72 	bl	8008dc0 <xTaskGetTickCount>
 80098dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098de:	4b0b      	ldr	r3, [pc, #44]	@ (800990c <prvSampleTimeNow+0x3c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d205      	bcs.n	80098f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098e8:	f000 f93a 	bl	8009b60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	601a      	str	r2, [r3, #0]
 80098f2:	e002      	b.n	80098fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098fa:	4a04      	ldr	r2, [pc, #16]	@ (800990c <prvSampleTimeNow+0x3c>)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009900:	68fb      	ldr	r3, [r7, #12]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	20002764 	.word	0x20002764

08009910 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
 800991c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800991e:	2300      	movs	r3, #0
 8009920:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	429a      	cmp	r2, r3
 8009934:	d812      	bhi.n	800995c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	1ad2      	subs	r2, r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	429a      	cmp	r2, r3
 8009942:	d302      	bcc.n	800994a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009944:	2301      	movs	r3, #1
 8009946:	617b      	str	r3, [r7, #20]
 8009948:	e01b      	b.n	8009982 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800994a:	4b10      	ldr	r3, [pc, #64]	@ (800998c <prvInsertTimerInActiveList+0x7c>)
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3304      	adds	r3, #4
 8009952:	4619      	mov	r1, r3
 8009954:	4610      	mov	r0, r2
 8009956:	f7fe f9e6 	bl	8007d26 <vListInsert>
 800995a:	e012      	b.n	8009982 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	429a      	cmp	r2, r3
 8009962:	d206      	bcs.n	8009972 <prvInsertTimerInActiveList+0x62>
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	429a      	cmp	r2, r3
 800996a:	d302      	bcc.n	8009972 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800996c:	2301      	movs	r3, #1
 800996e:	617b      	str	r3, [r7, #20]
 8009970:	e007      	b.n	8009982 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009972:	4b07      	ldr	r3, [pc, #28]	@ (8009990 <prvInsertTimerInActiveList+0x80>)
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	3304      	adds	r3, #4
 800997a:	4619      	mov	r1, r3
 800997c:	4610      	mov	r0, r2
 800997e:	f7fe f9d2 	bl	8007d26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009982:	697b      	ldr	r3, [r7, #20]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	20002758 	.word	0x20002758
 8009990:	20002754 	.word	0x20002754

08009994 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b08e      	sub	sp, #56	@ 0x38
 8009998:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800999a:	e0ce      	b.n	8009b3a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	da19      	bge.n	80099d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80099a2:	1d3b      	adds	r3, r7, #4
 80099a4:	3304      	adds	r3, #4
 80099a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80099a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10b      	bne.n	80099c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	61fb      	str	r3, [r7, #28]
}
 80099c0:	bf00      	nop
 80099c2:	bf00      	nop
 80099c4:	e7fd      	b.n	80099c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80099c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099cc:	6850      	ldr	r0, [r2, #4]
 80099ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099d0:	6892      	ldr	r2, [r2, #8]
 80099d2:	4611      	mov	r1, r2
 80099d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f2c0 80ae 	blt.w	8009b3a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d004      	beq.n	80099f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ec:	3304      	adds	r3, #4
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe f9d2 	bl	8007d98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099f4:	463b      	mov	r3, r7
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7ff ff6a 	bl	80098d0 <prvSampleTimeNow>
 80099fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b09      	cmp	r3, #9
 8009a02:	f200 8097 	bhi.w	8009b34 <prvProcessReceivedCommands+0x1a0>
 8009a06:	a201      	add	r2, pc, #4	@ (adr r2, 8009a0c <prvProcessReceivedCommands+0x78>)
 8009a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0c:	08009a35 	.word	0x08009a35
 8009a10:	08009a35 	.word	0x08009a35
 8009a14:	08009a35 	.word	0x08009a35
 8009a18:	08009aab 	.word	0x08009aab
 8009a1c:	08009abf 	.word	0x08009abf
 8009a20:	08009b0b 	.word	0x08009b0b
 8009a24:	08009a35 	.word	0x08009a35
 8009a28:	08009a35 	.word	0x08009a35
 8009a2c:	08009aab 	.word	0x08009aab
 8009a30:	08009abf 	.word	0x08009abf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a3a:	f043 0301 	orr.w	r3, r3, #1
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	18d1      	adds	r1, r2, r3
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a54:	f7ff ff5c 	bl	8009910 <prvInsertTimerInActiveList>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d06c      	beq.n	8009b38 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a6c:	f003 0304 	and.w	r3, r3, #4
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d061      	beq.n	8009b38 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	441a      	add	r2, r3
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	2300      	movs	r3, #0
 8009a82:	2100      	movs	r1, #0
 8009a84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a86:	f7ff fe01 	bl	800968c <xTimerGenericCommand>
 8009a8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d152      	bne.n	8009b38 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	61bb      	str	r3, [r7, #24]
}
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop
 8009aa8:	e7fd      	b.n	8009aa6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ab0:	f023 0301 	bic.w	r3, r3, #1
 8009ab4:	b2da      	uxtb	r2, r3
 8009ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009abc:	e03d      	b.n	8009b3a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ac4:	f043 0301 	orr.w	r3, r3, #1
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009acc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10b      	bne.n	8009af6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	617b      	str	r3, [r7, #20]
}
 8009af0:	bf00      	nop
 8009af2:	bf00      	nop
 8009af4:	e7fd      	b.n	8009af2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af8:	699a      	ldr	r2, [r3, #24]
 8009afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afc:	18d1      	adds	r1, r2, r3
 8009afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b04:	f7ff ff04 	bl	8009910 <prvInsertTimerInActiveList>
					break;
 8009b08:	e017      	b.n	8009b3a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b10:	f003 0302 	and.w	r3, r3, #2
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d103      	bne.n	8009b20 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b1a:	f000 fbe5 	bl	800a2e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b1e:	e00c      	b.n	8009b3a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b26:	f023 0301 	bic.w	r3, r3, #1
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009b32:	e002      	b.n	8009b3a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009b34:	bf00      	nop
 8009b36:	e000      	b.n	8009b3a <prvProcessReceivedCommands+0x1a6>
					break;
 8009b38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b3a:	4b08      	ldr	r3, [pc, #32]	@ (8009b5c <prvProcessReceivedCommands+0x1c8>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	1d39      	adds	r1, r7, #4
 8009b40:	2200      	movs	r2, #0
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fe fbfc 	bl	8008340 <xQueueReceive>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f47f af26 	bne.w	800999c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009b50:	bf00      	nop
 8009b52:	bf00      	nop
 8009b54:	3730      	adds	r7, #48	@ 0x30
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	2000275c 	.word	0x2000275c

08009b60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b088      	sub	sp, #32
 8009b64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b66:	e049      	b.n	8009bfc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b68:	4b2e      	ldr	r3, [pc, #184]	@ (8009c24 <prvSwitchTimerLists+0xc4>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b72:	4b2c      	ldr	r3, [pc, #176]	@ (8009c24 <prvSwitchTimerLists+0xc4>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fe f909 	bl	8007d98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b94:	f003 0304 	and.w	r3, r3, #4
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d02f      	beq.n	8009bfc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d90e      	bls.n	8009bcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bba:	4b1a      	ldr	r3, [pc, #104]	@ (8009c24 <prvSwitchTimerLists+0xc4>)
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	f7fe f8ae 	bl	8007d26 <vListInsert>
 8009bca:	e017      	b.n	8009bfc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	693a      	ldr	r2, [r7, #16]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f7ff fd58 	bl	800968c <xTimerGenericCommand>
 8009bdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10b      	bne.n	8009bfc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	603b      	str	r3, [r7, #0]
}
 8009bf6:	bf00      	nop
 8009bf8:	bf00      	nop
 8009bfa:	e7fd      	b.n	8009bf8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bfc:	4b09      	ldr	r3, [pc, #36]	@ (8009c24 <prvSwitchTimerLists+0xc4>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1b0      	bne.n	8009b68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c06:	4b07      	ldr	r3, [pc, #28]	@ (8009c24 <prvSwitchTimerLists+0xc4>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c0c:	4b06      	ldr	r3, [pc, #24]	@ (8009c28 <prvSwitchTimerLists+0xc8>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a04      	ldr	r2, [pc, #16]	@ (8009c24 <prvSwitchTimerLists+0xc4>)
 8009c12:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c14:	4a04      	ldr	r2, [pc, #16]	@ (8009c28 <prvSwitchTimerLists+0xc8>)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	6013      	str	r3, [r2, #0]
}
 8009c1a:	bf00      	nop
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20002754 	.word	0x20002754
 8009c28:	20002758 	.word	0x20002758

08009c2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c32:	f000 f969 	bl	8009f08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c36:	4b15      	ldr	r3, [pc, #84]	@ (8009c8c <prvCheckForValidListAndQueue+0x60>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d120      	bne.n	8009c80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c3e:	4814      	ldr	r0, [pc, #80]	@ (8009c90 <prvCheckForValidListAndQueue+0x64>)
 8009c40:	f7fe f820 	bl	8007c84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c44:	4813      	ldr	r0, [pc, #76]	@ (8009c94 <prvCheckForValidListAndQueue+0x68>)
 8009c46:	f7fe f81d 	bl	8007c84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c4a:	4b13      	ldr	r3, [pc, #76]	@ (8009c98 <prvCheckForValidListAndQueue+0x6c>)
 8009c4c:	4a10      	ldr	r2, [pc, #64]	@ (8009c90 <prvCheckForValidListAndQueue+0x64>)
 8009c4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c50:	4b12      	ldr	r3, [pc, #72]	@ (8009c9c <prvCheckForValidListAndQueue+0x70>)
 8009c52:	4a10      	ldr	r2, [pc, #64]	@ (8009c94 <prvCheckForValidListAndQueue+0x68>)
 8009c54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c56:	2300      	movs	r3, #0
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	4b11      	ldr	r3, [pc, #68]	@ (8009ca0 <prvCheckForValidListAndQueue+0x74>)
 8009c5c:	4a11      	ldr	r2, [pc, #68]	@ (8009ca4 <prvCheckForValidListAndQueue+0x78>)
 8009c5e:	2110      	movs	r1, #16
 8009c60:	200a      	movs	r0, #10
 8009c62:	f7fe f92d 	bl	8007ec0 <xQueueGenericCreateStatic>
 8009c66:	4603      	mov	r3, r0
 8009c68:	4a08      	ldr	r2, [pc, #32]	@ (8009c8c <prvCheckForValidListAndQueue+0x60>)
 8009c6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c6c:	4b07      	ldr	r3, [pc, #28]	@ (8009c8c <prvCheckForValidListAndQueue+0x60>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d005      	beq.n	8009c80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c74:	4b05      	ldr	r3, [pc, #20]	@ (8009c8c <prvCheckForValidListAndQueue+0x60>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	490b      	ldr	r1, [pc, #44]	@ (8009ca8 <prvCheckForValidListAndQueue+0x7c>)
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fe fd52 	bl	8008724 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c80:	f000 f974 	bl	8009f6c <vPortExitCritical>
}
 8009c84:	bf00      	nop
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	2000275c 	.word	0x2000275c
 8009c90:	2000272c 	.word	0x2000272c
 8009c94:	20002740 	.word	0x20002740
 8009c98:	20002754 	.word	0x20002754
 8009c9c:	20002758 	.word	0x20002758
 8009ca0:	20002808 	.word	0x20002808
 8009ca4:	20002768 	.word	0x20002768
 8009ca8:	0800bd54 	.word	0x0800bd54

08009cac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	3b04      	subs	r3, #4
 8009cbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	3b04      	subs	r3, #4
 8009cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	f023 0201 	bic.w	r2, r3, #1
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3b04      	subs	r3, #4
 8009cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8009d10 <pxPortInitialiseStack+0x64>)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3b14      	subs	r3, #20
 8009ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3b04      	subs	r3, #4
 8009cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f06f 0202 	mvn.w	r2, #2
 8009cfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	3b20      	subs	r3, #32
 8009d00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d02:	68fb      	ldr	r3, [r7, #12]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	08009d15 	.word	0x08009d15

08009d14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d1e:	4b13      	ldr	r3, [pc, #76]	@ (8009d6c <prvTaskExitError+0x58>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d26:	d00b      	beq.n	8009d40 <prvTaskExitError+0x2c>
	__asm volatile
 8009d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	60fb      	str	r3, [r7, #12]
}
 8009d3a:	bf00      	nop
 8009d3c:	bf00      	nop
 8009d3e:	e7fd      	b.n	8009d3c <prvTaskExitError+0x28>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	60bb      	str	r3, [r7, #8]
}
 8009d52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d54:	bf00      	nop
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d0fc      	beq.n	8009d56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d5c:	bf00      	nop
 8009d5e:	bf00      	nop
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	2000000c 	.word	0x2000000c

08009d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d70:	4b07      	ldr	r3, [pc, #28]	@ (8009d90 <pxCurrentTCBConst2>)
 8009d72:	6819      	ldr	r1, [r3, #0]
 8009d74:	6808      	ldr	r0, [r1, #0]
 8009d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7a:	f380 8809 	msr	PSP, r0
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f04f 0000 	mov.w	r0, #0
 8009d86:	f380 8811 	msr	BASEPRI, r0
 8009d8a:	4770      	bx	lr
 8009d8c:	f3af 8000 	nop.w

08009d90 <pxCurrentTCBConst2>:
 8009d90:	2000222c 	.word	0x2000222c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop

08009d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d98:	4808      	ldr	r0, [pc, #32]	@ (8009dbc <prvPortStartFirstTask+0x24>)
 8009d9a:	6800      	ldr	r0, [r0, #0]
 8009d9c:	6800      	ldr	r0, [r0, #0]
 8009d9e:	f380 8808 	msr	MSP, r0
 8009da2:	f04f 0000 	mov.w	r0, #0
 8009da6:	f380 8814 	msr	CONTROL, r0
 8009daa:	b662      	cpsie	i
 8009dac:	b661      	cpsie	f
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	df00      	svc	0
 8009db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009dba:	bf00      	nop
 8009dbc:	e000ed08 	.word	0xe000ed08

08009dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009dc6:	4b47      	ldr	r3, [pc, #284]	@ (8009ee4 <xPortStartScheduler+0x124>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a47      	ldr	r2, [pc, #284]	@ (8009ee8 <xPortStartScheduler+0x128>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d10b      	bne.n	8009de8 <xPortStartScheduler+0x28>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	613b      	str	r3, [r7, #16]
}
 8009de2:	bf00      	nop
 8009de4:	bf00      	nop
 8009de6:	e7fd      	b.n	8009de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009de8:	4b3e      	ldr	r3, [pc, #248]	@ (8009ee4 <xPortStartScheduler+0x124>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a3f      	ldr	r2, [pc, #252]	@ (8009eec <xPortStartScheduler+0x12c>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d10b      	bne.n	8009e0a <xPortStartScheduler+0x4a>
	__asm volatile
 8009df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df6:	f383 8811 	msr	BASEPRI, r3
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	60fb      	str	r3, [r7, #12]
}
 8009e04:	bf00      	nop
 8009e06:	bf00      	nop
 8009e08:	e7fd      	b.n	8009e06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e0a:	4b39      	ldr	r3, [pc, #228]	@ (8009ef0 <xPortStartScheduler+0x130>)
 8009e0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	22ff      	movs	r2, #255	@ 0xff
 8009e1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	4b31      	ldr	r3, [pc, #196]	@ (8009ef4 <xPortStartScheduler+0x134>)
 8009e30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e32:	4b31      	ldr	r3, [pc, #196]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e34:	2207      	movs	r2, #7
 8009e36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e38:	e009      	b.n	8009e4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	4a2d      	ldr	r2, [pc, #180]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	005b      	lsls	r3, r3, #1
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e4e:	78fb      	ldrb	r3, [r7, #3]
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e56:	2b80      	cmp	r3, #128	@ 0x80
 8009e58:	d0ef      	beq.n	8009e3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e5a:	4b27      	ldr	r3, [pc, #156]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f1c3 0307 	rsb	r3, r3, #7
 8009e62:	2b04      	cmp	r3, #4
 8009e64:	d00b      	beq.n	8009e7e <xPortStartScheduler+0xbe>
	__asm volatile
 8009e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6a:	f383 8811 	msr	BASEPRI, r3
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	60bb      	str	r3, [r7, #8]
}
 8009e78:	bf00      	nop
 8009e7a:	bf00      	nop
 8009e7c:	e7fd      	b.n	8009e7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	021b      	lsls	r3, r3, #8
 8009e84:	4a1c      	ldr	r2, [pc, #112]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e88:	4b1b      	ldr	r3, [pc, #108]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009e90:	4a19      	ldr	r2, [pc, #100]	@ (8009ef8 <xPortStartScheduler+0x138>)
 8009e92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e9c:	4b17      	ldr	r3, [pc, #92]	@ (8009efc <xPortStartScheduler+0x13c>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a16      	ldr	r2, [pc, #88]	@ (8009efc <xPortStartScheduler+0x13c>)
 8009ea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009ea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ea8:	4b14      	ldr	r3, [pc, #80]	@ (8009efc <xPortStartScheduler+0x13c>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a13      	ldr	r2, [pc, #76]	@ (8009efc <xPortStartScheduler+0x13c>)
 8009eae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009eb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009eb4:	f000 f8da 	bl	800a06c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009eb8:	4b11      	ldr	r3, [pc, #68]	@ (8009f00 <xPortStartScheduler+0x140>)
 8009eba:	2200      	movs	r2, #0
 8009ebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ebe:	f000 f8f9 	bl	800a0b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ec2:	4b10      	ldr	r3, [pc, #64]	@ (8009f04 <xPortStartScheduler+0x144>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8009f04 <xPortStartScheduler+0x144>)
 8009ec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009ecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ece:	f7ff ff63 	bl	8009d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ed2:	f7ff f83f 	bl	8008f54 <vTaskSwitchContext>
	prvTaskExitError();
 8009ed6:	f7ff ff1d 	bl	8009d14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	e000ed00 	.word	0xe000ed00
 8009ee8:	410fc271 	.word	0x410fc271
 8009eec:	410fc270 	.word	0x410fc270
 8009ef0:	e000e400 	.word	0xe000e400
 8009ef4:	20002858 	.word	0x20002858
 8009ef8:	2000285c 	.word	0x2000285c
 8009efc:	e000ed20 	.word	0xe000ed20
 8009f00:	2000000c 	.word	0x2000000c
 8009f04:	e000ef34 	.word	0xe000ef34

08009f08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	607b      	str	r3, [r7, #4]
}
 8009f20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f22:	4b10      	ldr	r3, [pc, #64]	@ (8009f64 <vPortEnterCritical+0x5c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	3301      	adds	r3, #1
 8009f28:	4a0e      	ldr	r2, [pc, #56]	@ (8009f64 <vPortEnterCritical+0x5c>)
 8009f2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8009f64 <vPortEnterCritical+0x5c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d110      	bne.n	8009f56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f34:	4b0c      	ldr	r3, [pc, #48]	@ (8009f68 <vPortEnterCritical+0x60>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00b      	beq.n	8009f56 <vPortEnterCritical+0x4e>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	603b      	str	r3, [r7, #0]
}
 8009f50:	bf00      	nop
 8009f52:	bf00      	nop
 8009f54:	e7fd      	b.n	8009f52 <vPortEnterCritical+0x4a>
	}
}
 8009f56:	bf00      	nop
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	2000000c 	.word	0x2000000c
 8009f68:	e000ed04 	.word	0xe000ed04

08009f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f72:	4b12      	ldr	r3, [pc, #72]	@ (8009fbc <vPortExitCritical+0x50>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10b      	bne.n	8009f92 <vPortExitCritical+0x26>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	607b      	str	r3, [r7, #4]
}
 8009f8c:	bf00      	nop
 8009f8e:	bf00      	nop
 8009f90:	e7fd      	b.n	8009f8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f92:	4b0a      	ldr	r3, [pc, #40]	@ (8009fbc <vPortExitCritical+0x50>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	3b01      	subs	r3, #1
 8009f98:	4a08      	ldr	r2, [pc, #32]	@ (8009fbc <vPortExitCritical+0x50>)
 8009f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f9c:	4b07      	ldr	r3, [pc, #28]	@ (8009fbc <vPortExitCritical+0x50>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d105      	bne.n	8009fb0 <vPortExitCritical+0x44>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	f383 8811 	msr	BASEPRI, r3
}
 8009fae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	2000000c 	.word	0x2000000c

08009fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fc0:	f3ef 8009 	mrs	r0, PSP
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	4b15      	ldr	r3, [pc, #84]	@ (800a020 <pxCurrentTCBConst>)
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	f01e 0f10 	tst.w	lr, #16
 8009fd0:	bf08      	it	eq
 8009fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fda:	6010      	str	r0, [r2, #0]
 8009fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009fe4:	f380 8811 	msr	BASEPRI, r0
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f7fe ffb0 	bl	8008f54 <vTaskSwitchContext>
 8009ff4:	f04f 0000 	mov.w	r0, #0
 8009ff8:	f380 8811 	msr	BASEPRI, r0
 8009ffc:	bc09      	pop	{r0, r3}
 8009ffe:	6819      	ldr	r1, [r3, #0]
 800a000:	6808      	ldr	r0, [r1, #0]
 800a002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a006:	f01e 0f10 	tst.w	lr, #16
 800a00a:	bf08      	it	eq
 800a00c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a010:	f380 8809 	msr	PSP, r0
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	f3af 8000 	nop.w

0800a020 <pxCurrentTCBConst>:
 800a020:	2000222c 	.word	0x2000222c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop

0800a028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	607b      	str	r3, [r7, #4]
}
 800a040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a042:	f7fe fecd 	bl	8008de0 <xTaskIncrementTick>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d003      	beq.n	800a054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a04c:	4b06      	ldr	r3, [pc, #24]	@ (800a068 <xPortSysTickHandler+0x40>)
 800a04e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	2300      	movs	r3, #0
 800a056:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	f383 8811 	msr	BASEPRI, r3
}
 800a05e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a060:	bf00      	nop
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	e000ed04 	.word	0xe000ed04

0800a06c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a06c:	b480      	push	{r7}
 800a06e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a070:	4b0b      	ldr	r3, [pc, #44]	@ (800a0a0 <vPortSetupTimerInterrupt+0x34>)
 800a072:	2200      	movs	r2, #0
 800a074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a076:	4b0b      	ldr	r3, [pc, #44]	@ (800a0a4 <vPortSetupTimerInterrupt+0x38>)
 800a078:	2200      	movs	r2, #0
 800a07a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a07c:	4b0a      	ldr	r3, [pc, #40]	@ (800a0a8 <vPortSetupTimerInterrupt+0x3c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a0a      	ldr	r2, [pc, #40]	@ (800a0ac <vPortSetupTimerInterrupt+0x40>)
 800a082:	fba2 2303 	umull	r2, r3, r2, r3
 800a086:	099b      	lsrs	r3, r3, #6
 800a088:	4a09      	ldr	r2, [pc, #36]	@ (800a0b0 <vPortSetupTimerInterrupt+0x44>)
 800a08a:	3b01      	subs	r3, #1
 800a08c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a08e:	4b04      	ldr	r3, [pc, #16]	@ (800a0a0 <vPortSetupTimerInterrupt+0x34>)
 800a090:	2207      	movs	r2, #7
 800a092:	601a      	str	r2, [r3, #0]
}
 800a094:	bf00      	nop
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	e000e010 	.word	0xe000e010
 800a0a4:	e000e018 	.word	0xe000e018
 800a0a8:	20000000 	.word	0x20000000
 800a0ac:	10624dd3 	.word	0x10624dd3
 800a0b0:	e000e014 	.word	0xe000e014

0800a0b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a0c4 <vPortEnableVFP+0x10>
 800a0b8:	6801      	ldr	r1, [r0, #0]
 800a0ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a0be:	6001      	str	r1, [r0, #0]
 800a0c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0c2:	bf00      	nop
 800a0c4:	e000ed88 	.word	0xe000ed88

0800a0c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0ce:	f3ef 8305 	mrs	r3, IPSR
 800a0d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b0f      	cmp	r3, #15
 800a0d8:	d915      	bls.n	800a106 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0da:	4a18      	ldr	r2, [pc, #96]	@ (800a13c <vPortValidateInterruptPriority+0x74>)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	4413      	add	r3, r2
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0e4:	4b16      	ldr	r3, [pc, #88]	@ (800a140 <vPortValidateInterruptPriority+0x78>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	7afa      	ldrb	r2, [r7, #11]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d20b      	bcs.n	800a106 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	607b      	str	r3, [r7, #4]
}
 800a100:	bf00      	nop
 800a102:	bf00      	nop
 800a104:	e7fd      	b.n	800a102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a106:	4b0f      	ldr	r3, [pc, #60]	@ (800a144 <vPortValidateInterruptPriority+0x7c>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a10e:	4b0e      	ldr	r3, [pc, #56]	@ (800a148 <vPortValidateInterruptPriority+0x80>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	429a      	cmp	r2, r3
 800a114:	d90b      	bls.n	800a12e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	603b      	str	r3, [r7, #0]
}
 800a128:	bf00      	nop
 800a12a:	bf00      	nop
 800a12c:	e7fd      	b.n	800a12a <vPortValidateInterruptPriority+0x62>
	}
 800a12e:	bf00      	nop
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	e000e3f0 	.word	0xe000e3f0
 800a140:	20002858 	.word	0x20002858
 800a144:	e000ed0c 	.word	0xe000ed0c
 800a148:	2000285c 	.word	0x2000285c

0800a14c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b08a      	sub	sp, #40	@ 0x28
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a154:	2300      	movs	r3, #0
 800a156:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a158:	f7fe fd86 	bl	8008c68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a15c:	4b5c      	ldr	r3, [pc, #368]	@ (800a2d0 <pvPortMalloc+0x184>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d101      	bne.n	800a168 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a164:	f000 f924 	bl	800a3b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a168:	4b5a      	ldr	r3, [pc, #360]	@ (800a2d4 <pvPortMalloc+0x188>)
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4013      	ands	r3, r2
 800a170:	2b00      	cmp	r3, #0
 800a172:	f040 8095 	bne.w	800a2a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d01e      	beq.n	800a1ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a17c:	2208      	movs	r2, #8
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4413      	add	r3, r2
 800a182:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f003 0307 	and.w	r3, r3, #7
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d015      	beq.n	800a1ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f023 0307 	bic.w	r3, r3, #7
 800a194:	3308      	adds	r3, #8
 800a196:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f003 0307 	and.w	r3, r3, #7
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00b      	beq.n	800a1ba <pvPortMalloc+0x6e>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	617b      	str	r3, [r7, #20]
}
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop
 800a1b8:	e7fd      	b.n	800a1b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d06f      	beq.n	800a2a0 <pvPortMalloc+0x154>
 800a1c0:	4b45      	ldr	r3, [pc, #276]	@ (800a2d8 <pvPortMalloc+0x18c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d86a      	bhi.n	800a2a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1ca:	4b44      	ldr	r3, [pc, #272]	@ (800a2dc <pvPortMalloc+0x190>)
 800a1cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1ce:	4b43      	ldr	r3, [pc, #268]	@ (800a2dc <pvPortMalloc+0x190>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1d4:	e004      	b.n	800a1e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d903      	bls.n	800a1f2 <pvPortMalloc+0xa6>
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1f1      	bne.n	800a1d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1f2:	4b37      	ldr	r3, [pc, #220]	@ (800a2d0 <pvPortMalloc+0x184>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d051      	beq.n	800a2a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2208      	movs	r2, #8
 800a202:	4413      	add	r3, r2
 800a204:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	1ad2      	subs	r2, r2, r3
 800a216:	2308      	movs	r3, #8
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d920      	bls.n	800a260 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a21e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4413      	add	r3, r2
 800a224:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	f003 0307 	and.w	r3, r3, #7
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00b      	beq.n	800a248 <pvPortMalloc+0xfc>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	613b      	str	r3, [r7, #16]
}
 800a242:	bf00      	nop
 800a244:	bf00      	nop
 800a246:	e7fd      	b.n	800a244 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24a:	685a      	ldr	r2, [r3, #4]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	1ad2      	subs	r2, r2, r3
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a25a:	69b8      	ldr	r0, [r7, #24]
 800a25c:	f000 f90a 	bl	800a474 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a260:	4b1d      	ldr	r3, [pc, #116]	@ (800a2d8 <pvPortMalloc+0x18c>)
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	4a1b      	ldr	r2, [pc, #108]	@ (800a2d8 <pvPortMalloc+0x18c>)
 800a26c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a26e:	4b1a      	ldr	r3, [pc, #104]	@ (800a2d8 <pvPortMalloc+0x18c>)
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	4b1b      	ldr	r3, [pc, #108]	@ (800a2e0 <pvPortMalloc+0x194>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	429a      	cmp	r2, r3
 800a278:	d203      	bcs.n	800a282 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a27a:	4b17      	ldr	r3, [pc, #92]	@ (800a2d8 <pvPortMalloc+0x18c>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a18      	ldr	r2, [pc, #96]	@ (800a2e0 <pvPortMalloc+0x194>)
 800a280:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	4b13      	ldr	r3, [pc, #76]	@ (800a2d4 <pvPortMalloc+0x188>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	431a      	orrs	r2, r3
 800a28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a28e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a292:	2200      	movs	r2, #0
 800a294:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a296:	4b13      	ldr	r3, [pc, #76]	@ (800a2e4 <pvPortMalloc+0x198>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3301      	adds	r3, #1
 800a29c:	4a11      	ldr	r2, [pc, #68]	@ (800a2e4 <pvPortMalloc+0x198>)
 800a29e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2a0:	f7fe fcf0 	bl	8008c84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	f003 0307 	and.w	r3, r3, #7
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00b      	beq.n	800a2c6 <pvPortMalloc+0x17a>
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	60fb      	str	r3, [r7, #12]
}
 800a2c0:	bf00      	nop
 800a2c2:	bf00      	nop
 800a2c4:	e7fd      	b.n	800a2c2 <pvPortMalloc+0x176>
	return pvReturn;
 800a2c6:	69fb      	ldr	r3, [r7, #28]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3728      	adds	r7, #40	@ 0x28
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	20003420 	.word	0x20003420
 800a2d4:	20003434 	.word	0x20003434
 800a2d8:	20003424 	.word	0x20003424
 800a2dc:	20003418 	.word	0x20003418
 800a2e0:	20003428 	.word	0x20003428
 800a2e4:	2000342c 	.word	0x2000342c

0800a2e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d04f      	beq.n	800a39a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2fa:	2308      	movs	r3, #8
 800a2fc:	425b      	negs	r3, r3
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	4413      	add	r3, r2
 800a302:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	4b25      	ldr	r3, [pc, #148]	@ (800a3a4 <vPortFree+0xbc>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4013      	ands	r3, r2
 800a312:	2b00      	cmp	r3, #0
 800a314:	d10b      	bne.n	800a32e <vPortFree+0x46>
	__asm volatile
 800a316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	60fb      	str	r3, [r7, #12]
}
 800a328:	bf00      	nop
 800a32a:	bf00      	nop
 800a32c:	e7fd      	b.n	800a32a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00b      	beq.n	800a34e <vPortFree+0x66>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	60bb      	str	r3, [r7, #8]
}
 800a348:	bf00      	nop
 800a34a:	bf00      	nop
 800a34c:	e7fd      	b.n	800a34a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	4b14      	ldr	r3, [pc, #80]	@ (800a3a4 <vPortFree+0xbc>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4013      	ands	r3, r2
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d01e      	beq.n	800a39a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d11a      	bne.n	800a39a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	4b0e      	ldr	r3, [pc, #56]	@ (800a3a4 <vPortFree+0xbc>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	43db      	mvns	r3, r3
 800a36e:	401a      	ands	r2, r3
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a374:	f7fe fc78 	bl	8008c68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a8 <vPortFree+0xc0>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4413      	add	r3, r2
 800a382:	4a09      	ldr	r2, [pc, #36]	@ (800a3a8 <vPortFree+0xc0>)
 800a384:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a386:	6938      	ldr	r0, [r7, #16]
 800a388:	f000 f874 	bl	800a474 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a38c:	4b07      	ldr	r3, [pc, #28]	@ (800a3ac <vPortFree+0xc4>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	3301      	adds	r3, #1
 800a392:	4a06      	ldr	r2, [pc, #24]	@ (800a3ac <vPortFree+0xc4>)
 800a394:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a396:	f7fe fc75 	bl	8008c84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a39a:	bf00      	nop
 800a39c:	3718      	adds	r7, #24
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20003434 	.word	0x20003434
 800a3a8:	20003424 	.word	0x20003424
 800a3ac:	20003430 	.word	0x20003430

0800a3b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3b6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a3ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3bc:	4b27      	ldr	r3, [pc, #156]	@ (800a45c <prvHeapInit+0xac>)
 800a3be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f003 0307 	and.w	r3, r3, #7
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d00c      	beq.n	800a3e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3307      	adds	r3, #7
 800a3ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f023 0307 	bic.w	r3, r3, #7
 800a3d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	4a1f      	ldr	r2, [pc, #124]	@ (800a45c <prvHeapInit+0xac>)
 800a3e0:	4413      	add	r3, r2
 800a3e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a460 <prvHeapInit+0xb0>)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3ee:	4b1c      	ldr	r3, [pc, #112]	@ (800a460 <prvHeapInit+0xb0>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3fc:	2208      	movs	r2, #8
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	1a9b      	subs	r3, r3, r2
 800a402:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f023 0307 	bic.w	r3, r3, #7
 800a40a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4a15      	ldr	r2, [pc, #84]	@ (800a464 <prvHeapInit+0xb4>)
 800a410:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a412:	4b14      	ldr	r3, [pc, #80]	@ (800a464 <prvHeapInit+0xb4>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2200      	movs	r2, #0
 800a418:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a41a:	4b12      	ldr	r3, [pc, #72]	@ (800a464 <prvHeapInit+0xb4>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2200      	movs	r2, #0
 800a420:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	1ad2      	subs	r2, r2, r3
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a430:	4b0c      	ldr	r3, [pc, #48]	@ (800a464 <prvHeapInit+0xb4>)
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	4a0a      	ldr	r2, [pc, #40]	@ (800a468 <prvHeapInit+0xb8>)
 800a43e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	4a09      	ldr	r2, [pc, #36]	@ (800a46c <prvHeapInit+0xbc>)
 800a446:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a448:	4b09      	ldr	r3, [pc, #36]	@ (800a470 <prvHeapInit+0xc0>)
 800a44a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a44e:	601a      	str	r2, [r3, #0]
}
 800a450:	bf00      	nop
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	20002860 	.word	0x20002860
 800a460:	20003418 	.word	0x20003418
 800a464:	20003420 	.word	0x20003420
 800a468:	20003428 	.word	0x20003428
 800a46c:	20003424 	.word	0x20003424
 800a470:	20003434 	.word	0x20003434

0800a474 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a47c:	4b28      	ldr	r3, [pc, #160]	@ (800a520 <prvInsertBlockIntoFreeList+0xac>)
 800a47e:	60fb      	str	r3, [r7, #12]
 800a480:	e002      	b.n	800a488 <prvInsertBlockIntoFreeList+0x14>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d8f7      	bhi.n	800a482 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	4413      	add	r3, r2
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d108      	bne.n	800a4b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	685a      	ldr	r2, [r3, #4]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	441a      	add	r2, r3
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	441a      	add	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d118      	bne.n	800a4fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	4b15      	ldr	r3, [pc, #84]	@ (800a524 <prvInsertBlockIntoFreeList+0xb0>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d00d      	beq.n	800a4f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685a      	ldr	r2, [r3, #4]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	441a      	add	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	e008      	b.n	800a504 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a524 <prvInsertBlockIntoFreeList+0xb0>)
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	601a      	str	r2, [r3, #0]
 800a4fa:	e003      	b.n	800a504 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d002      	beq.n	800a512 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a512:	bf00      	nop
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	20003418 	.word	0x20003418
 800a524:	20003420 	.word	0x20003420

0800a528 <init_XYZ_ZoneCoordinates>:
    {-0.707107, -0.579281, -0.393942, -0.141420, 0.141420, 0.393942, 0.579281, 0.707107}
};


// 初始化XYZ_ZoneCoordinates
void init_XYZ_ZoneCoordinates(XYZ_ZoneCoordinates* coords) {
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
    memset(coords->Xpos, 0, sizeof(coords->Xpos));
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a536:	2100      	movs	r1, #0
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 fd99 	bl	800b070 <memset>
    memset(coords->Ypos, 0, sizeof(coords->Ypos));
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800a544:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a548:	2100      	movs	r1, #0
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 fd90 	bl	800b070 <memset>
    memset(coords->Zpos, 0, sizeof(coords->Zpos));
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a556:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a55a:	2100      	movs	r1, #0
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 fd87 	bl	800b070 <memset>
    memset(coords->reflect, 0, sizeof(coords->reflect));
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800a568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a56c:	2100      	movs	r1, #0
 800a56e:	4618      	mov	r0, r3
 800a570:	f000 fd7e 	bl	800b070 <memset>
}
 800a574:	bf00      	nop
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <Judge>:
    memset(data->target_status, 0, sizeof(data->target_status));
    memset(data->target_reflectance, 0, sizeof(data->target_reflectance));
}

// 判断数据是否有效
int Judge(ResultsData* results, int i, int j) {
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
    if (results->distance_mm[i][j] > 0 &&
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	00d9      	lsls	r1, r3, #3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	440b      	add	r3, r1
 800a592:	00db      	lsls	r3, r3, #3
 800a594:	4413      	add	r3, r2
 800a596:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a59a:	f04f 0200 	mov.w	r2, #0
 800a59e:	f04f 0300 	mov.w	r3, #0
 800a5a2:	f7f6 fa61 	bl	8000a68 <__aeabi_dcmpgt>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d01f      	beq.n	800a5ec <Judge+0x70>
        (results->target_status[i][j] == 5 ||
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	00d1      	lsls	r1, r2, #3
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	440a      	add	r2, r1
 800a5b6:	3280      	adds	r2, #128	@ 0x80
 800a5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    if (results->distance_mm[i][j] > 0 &&
 800a5bc:	2b05      	cmp	r3, #5
 800a5be:	d013      	beq.n	800a5e8 <Judge+0x6c>
         results->target_status[i][j] == 6 ||
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	00d1      	lsls	r1, r2, #3
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	440a      	add	r2, r1
 800a5ca:	3280      	adds	r2, #128	@ 0x80
 800a5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        (results->target_status[i][j] == 5 ||
 800a5d0:	2b06      	cmp	r3, #6
 800a5d2:	d009      	beq.n	800a5e8 <Judge+0x6c>
         results->target_status[i][j] == 9)) {
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	00d1      	lsls	r1, r2, #3
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	440a      	add	r2, r1
 800a5de:	3280      	adds	r2, #128	@ 0x80
 800a5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
         results->target_status[i][j] == 6 ||
 800a5e4:	2b09      	cmp	r3, #9
 800a5e6:	d101      	bne.n	800a5ec <Judge+0x70>
        return 1;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e000      	b.n	800a5ee <Judge+0x72>
    }
    return 0;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <setResultData>:

void setResultData(ResultsData* results,
		int16_t distance_mm[(VL53L5CX_RESOLUTION_8X8*VL53L5CX_NB_TARGET_PER_ZONE)],
		uint8_t reflectance[(VL53L5CX_RESOLUTION_8X8*VL53L5CX_NB_TARGET_PER_ZONE)],
		uint8_t target_status[(VL53L5CX_RESOLUTION_8X8*VL53L5CX_NB_TARGET_PER_ZONE)])
{
 800a5f6:	b590      	push	{r4, r7, lr}
 800a5f8:	b087      	sub	sp, #28
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	60f8      	str	r0, [r7, #12]
 800a5fe:	60b9      	str	r1, [r7, #8]
 800a600:	607a      	str	r2, [r7, #4]
 800a602:	603b      	str	r3, [r7, #0]
    for(int i=0;i<8;++i)
 800a604:	2300      	movs	r3, #0
 800a606:	617b      	str	r3, [r7, #20]
 800a608:	e04b      	b.n	800a6a2 <setResultData+0xac>
        for(int j=0;j<8;++j)
 800a60a:	2300      	movs	r3, #0
 800a60c:	613b      	str	r3, [r7, #16]
 800a60e:	e042      	b.n	800a696 <setResultData+0xa0>
        {
            results->distance_mm[i][j]=distance_mm[i*8+j+1];
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	00da      	lsls	r2, r3, #3
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	4413      	add	r3, r2
 800a618:	3301      	adds	r3, #1
 800a61a:	005b      	lsls	r3, r3, #1
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	4413      	add	r3, r2
 800a620:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a624:	4618      	mov	r0, r3
 800a626:	f7f5 ff25 	bl	8000474 <__aeabi_i2d>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	6979      	ldr	r1, [r7, #20]
 800a632:	00cc      	lsls	r4, r1, #3
 800a634:	6939      	ldr	r1, [r7, #16]
 800a636:	4421      	add	r1, r4
 800a638:	00c9      	lsls	r1, r1, #3
 800a63a:	4401      	add	r1, r0
 800a63c:	e9c1 2300 	strd	r2, r3, [r1]
            results->target_reflectance[i][j]=reflectance[i*8+j+1];
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	00da      	lsls	r2, r3, #3
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	4413      	add	r3, r2
 800a648:	3301      	adds	r3, #1
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	4413      	add	r3, r2
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	4618      	mov	r0, r3
 800a652:	f7f5 feff 	bl	8000454 <__aeabi_ui2d>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	6979      	ldr	r1, [r7, #20]
 800a65e:	00cc      	lsls	r4, r1, #3
 800a660:	6939      	ldr	r1, [r7, #16]
 800a662:	4421      	add	r1, r4
 800a664:	3160      	adds	r1, #96	@ 0x60
 800a666:	00c9      	lsls	r1, r1, #3
 800a668:	4401      	add	r1, r0
 800a66a:	e9c1 2300 	strd	r2, r3, [r1]
            results->target_status[i][j]=target_status[i*8+j+1];
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	00da      	lsls	r2, r3, #3
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	4413      	add	r3, r2
 800a676:	3301      	adds	r3, #1
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	4413      	add	r3, r2
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	4618      	mov	r0, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	697a      	ldr	r2, [r7, #20]
 800a684:	00d1      	lsls	r1, r2, #3
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	440a      	add	r2, r1
 800a68a:	3280      	adds	r2, #128	@ 0x80
 800a68c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
        for(int j=0;j<8;++j)
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	3301      	adds	r3, #1
 800a694:	613b      	str	r3, [r7, #16]
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	2b07      	cmp	r3, #7
 800a69a:	ddb9      	ble.n	800a610 <setResultData+0x1a>
    for(int i=0;i<8;++i)
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	617b      	str	r3, [r7, #20]
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	2b07      	cmp	r3, #7
 800a6a6:	ddb0      	ble.n	800a60a <setResultData+0x14>
        }
}
 800a6a8:	bf00      	nop
 800a6aa:	bf00      	nop
 800a6ac:	371c      	adds	r7, #28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd90      	pop	{r4, r7, pc}
	...

0800a6b4 <ConvertDist2XYZCoords8x8>:

//返回标定后的激光雷达坐标
XYZ_ZoneCoordinates ConvertDist2XYZCoords8x8( ResultsData* results) {
 800a6b4:	b5b0      	push	{r4, r5, r7, lr}
 800a6b6:	f6ad 0d18 	subw	sp, sp, #2072	@ 0x818
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800a6c0:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800a6c4:	6018      	str	r0, [r3, #0]
 800a6c6:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800a6ca:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 800a6ce:	6019      	str	r1, [r3, #0]
    XYZ_ZoneCoordinates XYZ_ZoneCoordinate;
    init_XYZ_ZoneCoordinates(&XYZ_ZoneCoordinate);
 800a6d0:	f107 0308 	add.w	r3, r7, #8
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7ff ff27 	bl	800a528 <init_XYZ_ZoneCoordinates>

    for (int i = 0; i < SIZE; i++) {
 800a6da:	2300      	movs	r3, #0
 800a6dc:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 800a6e0:	e137      	b.n	800a952 <ConvertDist2XYZCoords8x8+0x29e>
        for (int j = 0; j < SIZE; j++) {
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
 800a6e8:	e129      	b.n	800a93e <ConvertDist2XYZCoords8x8+0x28a>
            if (Judge(results, i, j)) {
 800a6ea:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800a6ee:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 800a6f2:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 800a6f6:	f8d7 1814 	ldr.w	r1, [r7, #2068]	@ 0x814
 800a6fa:	6818      	ldr	r0, [r3, #0]
 800a6fc:	f7ff ff3e 	bl	800a57c <Judge>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 80cb 	beq.w	800a89e <ConvertDist2XYZCoords8x8+0x1ea>
                double Hyp = results->distance_mm[i][j] / SinOfPitch[i][j];
 800a708:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800a70c:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800a716:	00d9      	lsls	r1, r3, #3
 800a718:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800a71c:	440b      	add	r3, r1
 800a71e:	00db      	lsls	r3, r3, #3
 800a720:	4413      	add	r3, r2
 800a722:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a726:	499a      	ldr	r1, [pc, #616]	@ (800a990 <ConvertDist2XYZCoords8x8+0x2dc>)
 800a728:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800a72c:	00da      	lsls	r2, r3, #3
 800a72e:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800a732:	4413      	add	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	440b      	add	r3, r1
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7f5 feac 	bl	8000498 <__aeabi_f2d>
 800a740:	4602      	mov	r2, r0
 800a742:	460b      	mov	r3, r1
 800a744:	4620      	mov	r0, r4
 800a746:	4629      	mov	r1, r5
 800a748:	f7f6 f828 	bl	800079c <__aeabi_ddiv>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	f607 0108 	addw	r1, r7, #2056	@ 0x808
 800a754:	e9c1 2300 	strd	r2, r3, [r1]
                XYZ_ZoneCoordinate.Xpos[i][j] = CosOfYaw[i][j] * CosOfPitch[i][j] * Hyp;
 800a758:	498e      	ldr	r1, [pc, #568]	@ (800a994 <ConvertDist2XYZCoords8x8+0x2e0>)
 800a75a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800a75e:	00da      	lsls	r2, r3, #3
 800a760:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800a764:	4413      	add	r3, r2
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	440b      	add	r3, r1
 800a76a:	ed93 7a00 	vldr	s14, [r3]
 800a76e:	498a      	ldr	r1, [pc, #552]	@ (800a998 <ConvertDist2XYZCoords8x8+0x2e4>)
 800a770:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800a774:	00da      	lsls	r2, r3, #3
 800a776:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800a77a:	4413      	add	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	440b      	add	r3, r1
 800a780:	edd3 7a00 	vldr	s15, [r3]
 800a784:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a788:	ee17 0a90 	vmov	r0, s15
 800a78c:	f7f5 fe84 	bl	8000498 <__aeabi_f2d>
 800a790:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 800a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a798:	f7f5 fed6 	bl	8000548 <__aeabi_dmul>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	f607 0118 	addw	r1, r7, #2072	@ 0x818
 800a7a4:	f5a1 6001 	sub.w	r0, r1, #2064	@ 0x810
 800a7a8:	f8d7 1814 	ldr.w	r1, [r7, #2068]	@ 0x814
 800a7ac:	00cc      	lsls	r4, r1, #3
 800a7ae:	f8d7 1810 	ldr.w	r1, [r7, #2064]	@ 0x810
 800a7b2:	4421      	add	r1, r4
 800a7b4:	00c9      	lsls	r1, r1, #3
 800a7b6:	4401      	add	r1, r0
 800a7b8:	e9c1 2300 	strd	r2, r3, [r1]
                XYZ_ZoneCoordinate.Ypos[i][j] = SinOfYaw[i][j] * CosOfPitch[i][j] * Hyp;
 800a7bc:	4977      	ldr	r1, [pc, #476]	@ (800a99c <ConvertDist2XYZCoords8x8+0x2e8>)
 800a7be:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800a7c2:	00da      	lsls	r2, r3, #3
 800a7c4:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800a7c8:	4413      	add	r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	440b      	add	r3, r1
 800a7ce:	ed93 7a00 	vldr	s14, [r3]
 800a7d2:	4971      	ldr	r1, [pc, #452]	@ (800a998 <ConvertDist2XYZCoords8x8+0x2e4>)
 800a7d4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800a7d8:	00da      	lsls	r2, r3, #3
 800a7da:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800a7de:	4413      	add	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	440b      	add	r3, r1
 800a7e4:	edd3 7a00 	vldr	s15, [r3]
 800a7e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ec:	ee17 0a90 	vmov	r0, s15
 800a7f0:	f7f5 fe52 	bl	8000498 <__aeabi_f2d>
 800a7f4:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f7f5 fea4 	bl	8000548 <__aeabi_dmul>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	f607 0118 	addw	r1, r7, #2072	@ 0x818
 800a808:	f5a1 6001 	sub.w	r0, r1, #2064	@ 0x810
 800a80c:	f8d7 1814 	ldr.w	r1, [r7, #2068]	@ 0x814
 800a810:	00cc      	lsls	r4, r1, #3
 800a812:	f8d7 1810 	ldr.w	r1, [r7, #2064]	@ 0x810
 800a816:	4421      	add	r1, r4
 800a818:	3140      	adds	r1, #64	@ 0x40
 800a81a:	00c9      	lsls	r1, r1, #3
 800a81c:	4401      	add	r1, r0
 800a81e:	e9c1 2300 	strd	r2, r3, [r1]
                XYZ_ZoneCoordinate.Zpos[i][j] = results->distance_mm[i][j];
 800a822:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800a826:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800a830:	00d9      	lsls	r1, r3, #3
 800a832:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800a836:	440b      	add	r3, r1
 800a838:	00db      	lsls	r3, r3, #3
 800a83a:	4413      	add	r3, r2
 800a83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a840:	f607 0118 	addw	r1, r7, #2072	@ 0x818
 800a844:	f5a1 6001 	sub.w	r0, r1, #2064	@ 0x810
 800a848:	f8d7 1814 	ldr.w	r1, [r7, #2068]	@ 0x814
 800a84c:	00cc      	lsls	r4, r1, #3
 800a84e:	f8d7 1810 	ldr.w	r1, [r7, #2064]	@ 0x810
 800a852:	4421      	add	r1, r4
 800a854:	3180      	adds	r1, #128	@ 0x80
 800a856:	00c9      	lsls	r1, r1, #3
 800a858:	4401      	add	r1, r0
 800a85a:	e9c1 2300 	strd	r2, r3, [r1]
                XYZ_ZoneCoordinate.reflect[i][j]=results->target_reflectance[i][j];
 800a85e:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800a862:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800a86c:	00d9      	lsls	r1, r3, #3
 800a86e:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800a872:	440b      	add	r3, r1
 800a874:	3360      	adds	r3, #96	@ 0x60
 800a876:	00db      	lsls	r3, r3, #3
 800a878:	4413      	add	r3, r2
 800a87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87e:	f607 0118 	addw	r1, r7, #2072	@ 0x818
 800a882:	f5a1 6001 	sub.w	r0, r1, #2064	@ 0x810
 800a886:	f8d7 1814 	ldr.w	r1, [r7, #2068]	@ 0x814
 800a88a:	00cc      	lsls	r4, r1, #3
 800a88c:	f8d7 1810 	ldr.w	r1, [r7, #2064]	@ 0x810
 800a890:	4421      	add	r1, r4
 800a892:	31c0      	adds	r1, #192	@ 0xc0
 800a894:	00c9      	lsls	r1, r1, #3
 800a896:	4401      	add	r1, r0
 800a898:	e9c1 2300 	strd	r2, r3, [r1]
 800a89c:	e04a      	b.n	800a934 <ConvertDist2XYZCoords8x8+0x280>
            } else {
                XYZ_ZoneCoordinate.Xpos[i][j] = 0;
 800a89e:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800a8a2:	f5a3 6201 	sub.w	r2, r3, #2064	@ 0x810
 800a8a6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800a8aa:	00d9      	lsls	r1, r3, #3
 800a8ac:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800a8b0:	440b      	add	r3, r1
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	18d1      	adds	r1, r2, r3
 800a8b6:	f04f 0200 	mov.w	r2, #0
 800a8ba:	f04f 0300 	mov.w	r3, #0
 800a8be:	e9c1 2300 	strd	r2, r3, [r1]
                XYZ_ZoneCoordinate.Ypos[i][j] = 0;
 800a8c2:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800a8c6:	f5a3 6201 	sub.w	r2, r3, #2064	@ 0x810
 800a8ca:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800a8ce:	00d9      	lsls	r1, r3, #3
 800a8d0:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800a8d4:	440b      	add	r3, r1
 800a8d6:	3340      	adds	r3, #64	@ 0x40
 800a8d8:	00db      	lsls	r3, r3, #3
 800a8da:	18d1      	adds	r1, r2, r3
 800a8dc:	f04f 0200 	mov.w	r2, #0
 800a8e0:	f04f 0300 	mov.w	r3, #0
 800a8e4:	e9c1 2300 	strd	r2, r3, [r1]
                XYZ_ZoneCoordinate.Zpos[i][j] = 0;
 800a8e8:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800a8ec:	f5a3 6201 	sub.w	r2, r3, #2064	@ 0x810
 800a8f0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800a8f4:	00d9      	lsls	r1, r3, #3
 800a8f6:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800a8fa:	440b      	add	r3, r1
 800a8fc:	3380      	adds	r3, #128	@ 0x80
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	18d1      	adds	r1, r2, r3
 800a902:	f04f 0200 	mov.w	r2, #0
 800a906:	f04f 0300 	mov.w	r3, #0
 800a90a:	e9c1 2300 	strd	r2, r3, [r1]
                XYZ_ZoneCoordinate.reflect[i][j]=0;
 800a90e:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800a912:	f5a3 6201 	sub.w	r2, r3, #2064	@ 0x810
 800a916:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800a91a:	00d9      	lsls	r1, r3, #3
 800a91c:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800a920:	440b      	add	r3, r1
 800a922:	33c0      	adds	r3, #192	@ 0xc0
 800a924:	00db      	lsls	r3, r3, #3
 800a926:	18d1      	adds	r1, r2, r3
 800a928:	f04f 0200 	mov.w	r2, #0
 800a92c:	f04f 0300 	mov.w	r3, #0
 800a930:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < SIZE; j++) {
 800a934:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800a938:	3301      	adds	r3, #1
 800a93a:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
 800a93e:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800a942:	2b07      	cmp	r3, #7
 800a944:	f77f aed1 	ble.w	800a6ea <ConvertDist2XYZCoords8x8+0x36>
    for (int i = 0; i < SIZE; i++) {
 800a948:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800a94c:	3301      	adds	r3, #1
 800a94e:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 800a952:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800a956:	2b07      	cmp	r3, #7
 800a958:	f77f aec3 	ble.w	800a6e2 <ConvertDist2XYZCoords8x8+0x2e>
            }
        }
    }

    return XYZ_ZoneCoordinate;
 800a95c:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800a960:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800a96a:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800a96e:	4610      	mov	r0, r2
 800a970:	4619      	mov	r1, r3
 800a972:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a976:	461a      	mov	r2, r3
 800a978:	f000 fbbe 	bl	800b0f8 <memcpy>
}
 800a97c:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 800a980:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 800a984:	6818      	ldr	r0, [r3, #0]
 800a986:	f607 0718 	addw	r7, r7, #2072	@ 0x818
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bdb0      	pop	{r4, r5, r7, pc}
 800a98e:	bf00      	nop
 800a990:	20000010 	.word	0x20000010
 800a994:	20000310 	.word	0x20000310
 800a998:	20000110 	.word	0x20000110
 800a99c:	20000210 	.word	0x20000210

0800a9a0 <ground_coordinate>:

//无人机世界坐标标定
void ground_coordinate(XYZ_ZoneCoordinates* Points, float position[3], float yaw, float pitch, float roll, XYZ_ZoneCoordinates* ground_coordinates) {
 800a9a0:	b590      	push	{r4, r7, lr}
 800a9a2:	ed2d 8b02 	vpush	{d8}
 800a9a6:	b095      	sub	sp, #84	@ 0x54
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6178      	str	r0, [r7, #20]
 800a9ac:	6139      	str	r1, [r7, #16]
 800a9ae:	ed87 0a03 	vstr	s0, [r7, #12]
 800a9b2:	edc7 0a02 	vstr	s1, [r7, #8]
 800a9b6:	ed87 1a01 	vstr	s2, [r7, #4]
 800a9ba:	603a      	str	r2, [r7, #0]

    //将角度改为弧度
    yaw = yaw * M_PI / 180.0;
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f7f5 fd6b 	bl	8000498 <__aeabi_f2d>
 800a9c2:	a39f      	add	r3, pc, #636	@ (adr r3, 800ac40 <ground_coordinate+0x2a0>)
 800a9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c8:	f7f5 fdbe 	bl	8000548 <__aeabi_dmul>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	f04f 0200 	mov.w	r2, #0
 800a9d8:	4b9b      	ldr	r3, [pc, #620]	@ (800ac48 <ground_coordinate+0x2a8>)
 800a9da:	f7f5 fedf 	bl	800079c <__aeabi_ddiv>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4610      	mov	r0, r2
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	f7f6 f849 	bl	8000a7c <__aeabi_d2f>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	60fb      	str	r3, [r7, #12]
    pitch = -pitch * M_PI / 180.0;
 800a9ee:	edd7 7a02 	vldr	s15, [r7, #8]
 800a9f2:	eef1 7a67 	vneg.f32	s15, s15
 800a9f6:	ee17 3a90 	vmov	r3, s15
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7f5 fd4c 	bl	8000498 <__aeabi_f2d>
 800aa00:	a38f      	add	r3, pc, #572	@ (adr r3, 800ac40 <ground_coordinate+0x2a0>)
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	f7f5 fd9f 	bl	8000548 <__aeabi_dmul>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4610      	mov	r0, r2
 800aa10:	4619      	mov	r1, r3
 800aa12:	f04f 0200 	mov.w	r2, #0
 800aa16:	4b8c      	ldr	r3, [pc, #560]	@ (800ac48 <ground_coordinate+0x2a8>)
 800aa18:	f7f5 fec0 	bl	800079c <__aeabi_ddiv>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4610      	mov	r0, r2
 800aa22:	4619      	mov	r1, r3
 800aa24:	f7f6 f82a 	bl	8000a7c <__aeabi_d2f>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	60bb      	str	r3, [r7, #8]
    roll = roll * M_PI / 180.0;
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7f5 fd33 	bl	8000498 <__aeabi_f2d>
 800aa32:	a383      	add	r3, pc, #524	@ (adr r3, 800ac40 <ground_coordinate+0x2a0>)
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	f7f5 fd86 	bl	8000548 <__aeabi_dmul>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	460b      	mov	r3, r1
 800aa40:	4610      	mov	r0, r2
 800aa42:	4619      	mov	r1, r3
 800aa44:	f04f 0200 	mov.w	r2, #0
 800aa48:	4b7f      	ldr	r3, [pc, #508]	@ (800ac48 <ground_coordinate+0x2a8>)
 800aa4a:	f7f5 fea7 	bl	800079c <__aeabi_ddiv>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	4610      	mov	r0, r2
 800aa54:	4619      	mov	r1, r3
 800aa56:	f7f6 f811 	bl	8000a7c <__aeabi_d2f>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	607b      	str	r3, [r7, #4]

    float rotation_matrix[3][3] = {
        {cosf(yaw) * cosf(pitch), cosf(yaw) * sinf(pitch) * sinf(roll) - sinf(yaw) * cosf(roll), cosf(yaw) * sinf(pitch) * cosf(roll) + sinf(yaw) * sinf(roll)},
 800aa5e:	ed97 0a03 	vldr	s0, [r7, #12]
 800aa62:	f000 fba1 	bl	800b1a8 <cosf>
 800aa66:	eeb0 8a40 	vmov.f32	s16, s0
 800aa6a:	ed97 0a02 	vldr	s0, [r7, #8]
 800aa6e:	f000 fb9b 	bl	800b1a8 <cosf>
 800aa72:	eef0 7a40 	vmov.f32	s15, s0
 800aa76:	ee68 7a27 	vmul.f32	s15, s16, s15
    float rotation_matrix[3][3] = {
 800aa7a:	edc7 7a06 	vstr	s15, [r7, #24]
        {cosf(yaw) * cosf(pitch), cosf(yaw) * sinf(pitch) * sinf(roll) - sinf(yaw) * cosf(roll), cosf(yaw) * sinf(pitch) * cosf(roll) + sinf(yaw) * sinf(roll)},
 800aa7e:	ed97 0a03 	vldr	s0, [r7, #12]
 800aa82:	f000 fb91 	bl	800b1a8 <cosf>
 800aa86:	eeb0 8a40 	vmov.f32	s16, s0
 800aa8a:	ed97 0a02 	vldr	s0, [r7, #8]
 800aa8e:	f000 fbcf 	bl	800b230 <sinf>
 800aa92:	eef0 7a40 	vmov.f32	s15, s0
 800aa96:	ee28 8a27 	vmul.f32	s16, s16, s15
 800aa9a:	ed97 0a01 	vldr	s0, [r7, #4]
 800aa9e:	f000 fbc7 	bl	800b230 <sinf>
 800aaa2:	eef0 7a40 	vmov.f32	s15, s0
 800aaa6:	ee28 8a27 	vmul.f32	s16, s16, s15
 800aaaa:	ed97 0a03 	vldr	s0, [r7, #12]
 800aaae:	f000 fbbf 	bl	800b230 <sinf>
 800aab2:	eef0 8a40 	vmov.f32	s17, s0
 800aab6:	ed97 0a01 	vldr	s0, [r7, #4]
 800aaba:	f000 fb75 	bl	800b1a8 <cosf>
 800aabe:	eef0 7a40 	vmov.f32	s15, s0
 800aac2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800aac6:	ee78 7a67 	vsub.f32	s15, s16, s15
    float rotation_matrix[3][3] = {
 800aaca:	edc7 7a07 	vstr	s15, [r7, #28]
        {cosf(yaw) * cosf(pitch), cosf(yaw) * sinf(pitch) * sinf(roll) - sinf(yaw) * cosf(roll), cosf(yaw) * sinf(pitch) * cosf(roll) + sinf(yaw) * sinf(roll)},
 800aace:	ed97 0a03 	vldr	s0, [r7, #12]
 800aad2:	f000 fb69 	bl	800b1a8 <cosf>
 800aad6:	eeb0 8a40 	vmov.f32	s16, s0
 800aada:	ed97 0a02 	vldr	s0, [r7, #8]
 800aade:	f000 fba7 	bl	800b230 <sinf>
 800aae2:	eef0 7a40 	vmov.f32	s15, s0
 800aae6:	ee28 8a27 	vmul.f32	s16, s16, s15
 800aaea:	ed97 0a01 	vldr	s0, [r7, #4]
 800aaee:	f000 fb5b 	bl	800b1a8 <cosf>
 800aaf2:	eef0 7a40 	vmov.f32	s15, s0
 800aaf6:	ee28 8a27 	vmul.f32	s16, s16, s15
 800aafa:	ed97 0a03 	vldr	s0, [r7, #12]
 800aafe:	f000 fb97 	bl	800b230 <sinf>
 800ab02:	eef0 8a40 	vmov.f32	s17, s0
 800ab06:	ed97 0a01 	vldr	s0, [r7, #4]
 800ab0a:	f000 fb91 	bl	800b230 <sinf>
 800ab0e:	eef0 7a40 	vmov.f32	s15, s0
 800ab12:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ab16:	ee78 7a27 	vadd.f32	s15, s16, s15
    float rotation_matrix[3][3] = {
 800ab1a:	edc7 7a08 	vstr	s15, [r7, #32]
        {sinf(yaw) * cosf(pitch), sinf(yaw) * sinf(pitch) * sinf(roll) + cosf(yaw) * cosf(roll), sinf(yaw) * sinf(pitch) * cosf(roll) - cosf(yaw) * sinf(roll)},
 800ab1e:	ed97 0a03 	vldr	s0, [r7, #12]
 800ab22:	f000 fb85 	bl	800b230 <sinf>
 800ab26:	eeb0 8a40 	vmov.f32	s16, s0
 800ab2a:	ed97 0a02 	vldr	s0, [r7, #8]
 800ab2e:	f000 fb3b 	bl	800b1a8 <cosf>
 800ab32:	eef0 7a40 	vmov.f32	s15, s0
 800ab36:	ee68 7a27 	vmul.f32	s15, s16, s15
    float rotation_matrix[3][3] = {
 800ab3a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {sinf(yaw) * cosf(pitch), sinf(yaw) * sinf(pitch) * sinf(roll) + cosf(yaw) * cosf(roll), sinf(yaw) * sinf(pitch) * cosf(roll) - cosf(yaw) * sinf(roll)},
 800ab3e:	ed97 0a03 	vldr	s0, [r7, #12]
 800ab42:	f000 fb75 	bl	800b230 <sinf>
 800ab46:	eeb0 8a40 	vmov.f32	s16, s0
 800ab4a:	ed97 0a02 	vldr	s0, [r7, #8]
 800ab4e:	f000 fb6f 	bl	800b230 <sinf>
 800ab52:	eef0 7a40 	vmov.f32	s15, s0
 800ab56:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ab5a:	ed97 0a01 	vldr	s0, [r7, #4]
 800ab5e:	f000 fb67 	bl	800b230 <sinf>
 800ab62:	eef0 7a40 	vmov.f32	s15, s0
 800ab66:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ab6a:	ed97 0a03 	vldr	s0, [r7, #12]
 800ab6e:	f000 fb1b 	bl	800b1a8 <cosf>
 800ab72:	eef0 8a40 	vmov.f32	s17, s0
 800ab76:	ed97 0a01 	vldr	s0, [r7, #4]
 800ab7a:	f000 fb15 	bl	800b1a8 <cosf>
 800ab7e:	eef0 7a40 	vmov.f32	s15, s0
 800ab82:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ab86:	ee78 7a27 	vadd.f32	s15, s16, s15
    float rotation_matrix[3][3] = {
 800ab8a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {sinf(yaw) * cosf(pitch), sinf(yaw) * sinf(pitch) * sinf(roll) + cosf(yaw) * cosf(roll), sinf(yaw) * sinf(pitch) * cosf(roll) - cosf(yaw) * sinf(roll)},
 800ab8e:	ed97 0a03 	vldr	s0, [r7, #12]
 800ab92:	f000 fb4d 	bl	800b230 <sinf>
 800ab96:	eeb0 8a40 	vmov.f32	s16, s0
 800ab9a:	ed97 0a02 	vldr	s0, [r7, #8]
 800ab9e:	f000 fb47 	bl	800b230 <sinf>
 800aba2:	eef0 7a40 	vmov.f32	s15, s0
 800aba6:	ee28 8a27 	vmul.f32	s16, s16, s15
 800abaa:	ed97 0a01 	vldr	s0, [r7, #4]
 800abae:	f000 fafb 	bl	800b1a8 <cosf>
 800abb2:	eef0 7a40 	vmov.f32	s15, s0
 800abb6:	ee28 8a27 	vmul.f32	s16, s16, s15
 800abba:	ed97 0a03 	vldr	s0, [r7, #12]
 800abbe:	f000 faf3 	bl	800b1a8 <cosf>
 800abc2:	eef0 8a40 	vmov.f32	s17, s0
 800abc6:	ed97 0a01 	vldr	s0, [r7, #4]
 800abca:	f000 fb31 	bl	800b230 <sinf>
 800abce:	eef0 7a40 	vmov.f32	s15, s0
 800abd2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800abd6:	ee78 7a67 	vsub.f32	s15, s16, s15
    float rotation_matrix[3][3] = {
 800abda:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        {-sinf(pitch), cosf(pitch) * sinf(roll), cosf(pitch) * cosf(roll)}
 800abde:	ed97 0a02 	vldr	s0, [r7, #8]
 800abe2:	f000 fb25 	bl	800b230 <sinf>
 800abe6:	eef0 7a40 	vmov.f32	s15, s0
 800abea:	eef1 7a67 	vneg.f32	s15, s15
    float rotation_matrix[3][3] = {
 800abee:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        {-sinf(pitch), cosf(pitch) * sinf(roll), cosf(pitch) * cosf(roll)}
 800abf2:	ed97 0a02 	vldr	s0, [r7, #8]
 800abf6:	f000 fad7 	bl	800b1a8 <cosf>
 800abfa:	eeb0 8a40 	vmov.f32	s16, s0
 800abfe:	ed97 0a01 	vldr	s0, [r7, #4]
 800ac02:	f000 fb15 	bl	800b230 <sinf>
 800ac06:	eef0 7a40 	vmov.f32	s15, s0
 800ac0a:	ee68 7a27 	vmul.f32	s15, s16, s15
    float rotation_matrix[3][3] = {
 800ac0e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        {-sinf(pitch), cosf(pitch) * sinf(roll), cosf(pitch) * cosf(roll)}
 800ac12:	ed97 0a02 	vldr	s0, [r7, #8]
 800ac16:	f000 fac7 	bl	800b1a8 <cosf>
 800ac1a:	eeb0 8a40 	vmov.f32	s16, s0
 800ac1e:	ed97 0a01 	vldr	s0, [r7, #4]
 800ac22:	f000 fac1 	bl	800b1a8 <cosf>
 800ac26:	eef0 7a40 	vmov.f32	s15, s0
 800ac2a:	ee68 7a27 	vmul.f32	s15, s16, s15
    float rotation_matrix[3][3] = {
 800ac2e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    };
    for (int i = 0; i < SIZE; i++) {
 800ac32:	2300      	movs	r3, #0
 800ac34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac36:	e0d8      	b.n	800adea <ground_coordinate+0x44a>
        for (int j = 0; j < SIZE; j++) {
 800ac38:	2300      	movs	r3, #0
 800ac3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac3c:	e0ce      	b.n	800addc <ground_coordinate+0x43c>
 800ac3e:	bf00      	nop
 800ac40:	54442d18 	.word	0x54442d18
 800ac44:	400921fb 	.word	0x400921fb
 800ac48:	40668000 	.word	0x40668000
            float relative_x = Points->Xpos[i][j];
 800ac4c:	697a      	ldr	r2, [r7, #20]
 800ac4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac50:	00d9      	lsls	r1, r3, #3
 800ac52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac54:	440b      	add	r3, r1
 800ac56:	00db      	lsls	r3, r3, #3
 800ac58:	4413      	add	r3, r2
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	4610      	mov	r0, r2
 800ac60:	4619      	mov	r1, r3
 800ac62:	f7f5 ff0b 	bl	8000a7c <__aeabi_d2f>
 800ac66:	4603      	mov	r3, r0
 800ac68:	647b      	str	r3, [r7, #68]	@ 0x44
            float relative_y = Points->Ypos[i][j];
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac6e:	00d9      	lsls	r1, r3, #3
 800ac70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac72:	440b      	add	r3, r1
 800ac74:	3340      	adds	r3, #64	@ 0x40
 800ac76:	00db      	lsls	r3, r3, #3
 800ac78:	4413      	add	r3, r2
 800ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7e:	4610      	mov	r0, r2
 800ac80:	4619      	mov	r1, r3
 800ac82:	f7f5 fefb 	bl	8000a7c <__aeabi_d2f>
 800ac86:	4603      	mov	r3, r0
 800ac88:	643b      	str	r3, [r7, #64]	@ 0x40
            float relative_z = Points->Zpos[i][j];
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac8e:	00d9      	lsls	r1, r3, #3
 800ac90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac92:	440b      	add	r3, r1
 800ac94:	3380      	adds	r3, #128	@ 0x80
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	4413      	add	r3, r2
 800ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9e:	4610      	mov	r0, r2
 800aca0:	4619      	mov	r1, r3
 800aca2:	f7f5 feeb 	bl	8000a7c <__aeabi_d2f>
 800aca6:	4603      	mov	r3, r0
 800aca8:	63fb      	str	r3, [r7, #60]	@ 0x3c

            ground_coordinates->Xpos[i][j] = position[0] + rotation_matrix[0][0] * relative_x + rotation_matrix[0][1] * relative_y + rotation_matrix[0][2] * relative_z;
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	ed93 7a00 	vldr	s14, [r3]
 800acb0:	edd7 6a06 	vldr	s13, [r7, #24]
 800acb4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800acb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800acbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800acc0:	edd7 6a07 	vldr	s13, [r7, #28]
 800acc4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800acc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800accc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800acd0:	edd7 6a08 	vldr	s13, [r7, #32]
 800acd4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800acd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800acdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ace0:	ee17 0a90 	vmov	r0, s15
 800ace4:	f7f5 fbd8 	bl	8000498 <__aeabi_f2d>
 800ace8:	4602      	mov	r2, r0
 800acea:	460b      	mov	r3, r1
 800acec:	6838      	ldr	r0, [r7, #0]
 800acee:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800acf0:	00cc      	lsls	r4, r1, #3
 800acf2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800acf4:	4421      	add	r1, r4
 800acf6:	00c9      	lsls	r1, r1, #3
 800acf8:	4401      	add	r1, r0
 800acfa:	e9c1 2300 	strd	r2, r3, [r1]
            ground_coordinates->Ypos[i][j] = position[1] + rotation_matrix[1][0] * relative_x + rotation_matrix[1][1] * relative_y + rotation_matrix[1][2] * relative_z;
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	3304      	adds	r3, #4
 800ad02:	ed93 7a00 	vldr	s14, [r3]
 800ad06:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ad0a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800ad0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad12:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad16:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800ad1a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800ad1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad22:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad26:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800ad2a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800ad2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad36:	ee17 0a90 	vmov	r0, s15
 800ad3a:	f7f5 fbad 	bl	8000498 <__aeabi_f2d>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	460b      	mov	r3, r1
 800ad42:	6838      	ldr	r0, [r7, #0]
 800ad44:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ad46:	00cc      	lsls	r4, r1, #3
 800ad48:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ad4a:	4421      	add	r1, r4
 800ad4c:	3140      	adds	r1, #64	@ 0x40
 800ad4e:	00c9      	lsls	r1, r1, #3
 800ad50:	4401      	add	r1, r0
 800ad52:	e9c1 2300 	strd	r2, r3, [r1]
            ground_coordinates->Zpos[i][j] = position[2] + rotation_matrix[2][0] * relative_x + rotation_matrix[2][1] * relative_y + rotation_matrix[2][2] * relative_z;
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	3308      	adds	r3, #8
 800ad5a:	ed93 7a00 	vldr	s14, [r3]
 800ad5e:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 800ad62:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800ad66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad6e:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800ad72:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800ad76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad7e:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800ad82:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800ad86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad8e:	ee17 0a90 	vmov	r0, s15
 800ad92:	f7f5 fb81 	bl	8000498 <__aeabi_f2d>
 800ad96:	4602      	mov	r2, r0
 800ad98:	460b      	mov	r3, r1
 800ad9a:	6838      	ldr	r0, [r7, #0]
 800ad9c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ad9e:	00cc      	lsls	r4, r1, #3
 800ada0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ada2:	4421      	add	r1, r4
 800ada4:	3180      	adds	r1, #128	@ 0x80
 800ada6:	00c9      	lsls	r1, r1, #3
 800ada8:	4401      	add	r1, r0
 800adaa:	e9c1 2300 	strd	r2, r3, [r1]
            ground_coordinates->reflect[i][j]=Points->reflect[i][j];
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adb2:	00d9      	lsls	r1, r3, #3
 800adb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adb6:	440b      	add	r3, r1
 800adb8:	33c0      	adds	r3, #192	@ 0xc0
 800adba:	00db      	lsls	r3, r3, #3
 800adbc:	4413      	add	r3, r2
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	6838      	ldr	r0, [r7, #0]
 800adc4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800adc6:	00cc      	lsls	r4, r1, #3
 800adc8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800adca:	4421      	add	r1, r4
 800adcc:	31c0      	adds	r1, #192	@ 0xc0
 800adce:	00c9      	lsls	r1, r1, #3
 800add0:	4401      	add	r1, r0
 800add2:	e9c1 2300 	strd	r2, r3, [r1]
        for (int j = 0; j < SIZE; j++) {
 800add6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800add8:	3301      	adds	r3, #1
 800adda:	64bb      	str	r3, [r7, #72]	@ 0x48
 800addc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adde:	2b07      	cmp	r3, #7
 800ade0:	f77f af34 	ble.w	800ac4c <ground_coordinate+0x2ac>
    for (int i = 0; i < SIZE; i++) {
 800ade4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ade6:	3301      	adds	r3, #1
 800ade8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adec:	2b07      	cmp	r3, #7
 800adee:	f77f af23 	ble.w	800ac38 <ground_coordinate+0x298>
        }
    }
}
 800adf2:	bf00      	nop
 800adf4:	bf00      	nop
 800adf6:	3754      	adds	r7, #84	@ 0x54
 800adf8:	46bd      	mov	sp, r7
 800adfa:	ecbd 8b02 	vpop	{d8}
 800adfe:	bd90      	pop	{r4, r7, pc}

0800ae00 <process>:
//process总函数
void process(int16_t distance_mm[(VL53L5CX_RESOLUTION_8X8*VL53L5CX_NB_TARGET_PER_ZONE)],
		uint8_t reflectance[(VL53L5CX_RESOLUTION_8X8*VL53L5CX_NB_TARGET_PER_ZONE)],
		uint8_t target_status[(VL53L5CX_RESOLUTION_8X8*VL53L5CX_NB_TARGET_PER_ZONE)],
							  float position[3], float yaw, float pitch, float roll)
{
 800ae00:	b5b0      	push	{r4, r5, r7, lr}
 800ae02:	f6ad 5d28 	subw	sp, sp, #3368	@ 0xd28
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	f607 5428 	addw	r4, r7, #3368	@ 0xd28
 800ae0c:	f6a4 540c 	subw	r4, r4, #3340	@ 0xd0c
 800ae10:	6020      	str	r0, [r4, #0]
 800ae12:	f607 5028 	addw	r0, r7, #3368	@ 0xd28
 800ae16:	f5a0 6051 	sub.w	r0, r0, #3344	@ 0xd10
 800ae1a:	6001      	str	r1, [r0, #0]
 800ae1c:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800ae20:	f6a1 5114 	subw	r1, r1, #3348	@ 0xd14
 800ae24:	600a      	str	r2, [r1, #0]
 800ae26:	f607 5228 	addw	r2, r7, #3368	@ 0xd28
 800ae2a:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 800ae2e:	6013      	str	r3, [r2, #0]
 800ae30:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800ae34:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 800ae38:	ed83 0a00 	vstr	s0, [r3]
 800ae3c:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800ae40:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800ae44:	edc3 0a00 	vstr	s1, [r3]
 800ae48:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800ae4c:	f6a3 5324 	subw	r3, r3, #3364	@ 0xd24
 800ae50:	ed83 1a00 	vstr	s2, [r3]
	ResultsData results;
	setResultData(&results, distance_mm,reflectance,target_status);
 800ae54:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800ae58:	f6a3 5314 	subw	r3, r3, #3348	@ 0xd14
 800ae5c:	f607 5228 	addw	r2, r7, #3368	@ 0xd28
 800ae60:	f5a2 6251 	sub.w	r2, r2, #3344	@ 0xd10
 800ae64:	f607 5128 	addw	r1, r7, #3368	@ 0xd28
 800ae68:	f6a1 510c 	subw	r1, r1, #3340	@ 0xd0c
 800ae6c:	f507 6002 	add.w	r0, r7, #2080	@ 0x820
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6812      	ldr	r2, [r2, #0]
 800ae74:	6809      	ldr	r1, [r1, #0]
 800ae76:	f7ff fbbe 	bl	800a5f6 <setResultData>
	XYZ_ZoneCoordinates XYZ_ZoneCoordinate=ConvertDist2XYZCoords8x8(&results);
 800ae7a:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800ae7e:	f6a3 5308 	subw	r3, r3, #3336	@ 0xd08
 800ae82:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800ae86:	4611      	mov	r1, r2
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7ff fc13 	bl	800a6b4 <ConvertDist2XYZCoords8x8>
	XYZ_ZoneCoordinates* ground_coordinates = (XYZ_ZoneCoordinates*)malloc(sizeof(XYZ_ZoneCoordinates));
 800ae8e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ae92:	f000 f82f 	bl	800aef4 <malloc>
 800ae96:	4603      	mov	r3, r0
 800ae98:	f8c7 3d24 	str.w	r3, [r7, #3364]	@ 0xd24
	if (ground_coordinates == NULL) {
 800ae9c:	f8d7 3d24 	ldr.w	r3, [r7, #3364]	@ 0xd24
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d022      	beq.n	800aeea <process+0xea>
	        // 处理内存分配失败
	        return;
	    }


	ground_coordinate(&XYZ_ZoneCoordinate, position, yaw, pitch, roll, ground_coordinates);
 800aea4:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800aea8:	f6a3 5424 	subw	r4, r3, #3364	@ 0xd24
 800aeac:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800aeb0:	f5a3 6052 	sub.w	r0, r3, #3360	@ 0xd20
 800aeb4:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800aeb8:	f6a3 511c 	subw	r1, r3, #3356	@ 0xd1c
 800aebc:	f607 5328 	addw	r3, r7, #3368	@ 0xd28
 800aec0:	f6a3 5318 	subw	r3, r3, #3352	@ 0xd18
 800aec4:	f107 0520 	add.w	r5, r7, #32
 800aec8:	f8d7 2d24 	ldr.w	r2, [r7, #3364]	@ 0xd24
 800aecc:	ed94 1a00 	vldr	s2, [r4]
 800aed0:	edd0 0a00 	vldr	s1, [r0]
 800aed4:	ed91 0a00 	vldr	s0, [r1]
 800aed8:	6819      	ldr	r1, [r3, #0]
 800aeda:	4628      	mov	r0, r5
 800aedc:	f7ff fd60 	bl	800a9a0 <ground_coordinate>

	free(ground_coordinates);
 800aee0:	f8d7 0d24 	ldr.w	r0, [r7, #3364]	@ 0xd24
 800aee4:	f000 f80e 	bl	800af04 <free>
 800aee8:	e000      	b.n	800aeec <process+0xec>
	        return;
 800aeea:	bf00      	nop


}
 800aeec:	f607 5728 	addw	r7, r7, #3368	@ 0xd28
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bdb0      	pop	{r4, r5, r7, pc}

0800aef4 <malloc>:
 800aef4:	4b02      	ldr	r3, [pc, #8]	@ (800af00 <malloc+0xc>)
 800aef6:	4601      	mov	r1, r0
 800aef8:	6818      	ldr	r0, [r3, #0]
 800aefa:	f000 b82d 	b.w	800af58 <_malloc_r>
 800aefe:	bf00      	nop
 800af00:	20000410 	.word	0x20000410

0800af04 <free>:
 800af04:	4b02      	ldr	r3, [pc, #8]	@ (800af10 <free+0xc>)
 800af06:	4601      	mov	r1, r0
 800af08:	6818      	ldr	r0, [r3, #0]
 800af0a:	f000 b903 	b.w	800b114 <_free_r>
 800af0e:	bf00      	nop
 800af10:	20000410 	.word	0x20000410

0800af14 <sbrk_aligned>:
 800af14:	b570      	push	{r4, r5, r6, lr}
 800af16:	4e0f      	ldr	r6, [pc, #60]	@ (800af54 <sbrk_aligned+0x40>)
 800af18:	460c      	mov	r4, r1
 800af1a:	6831      	ldr	r1, [r6, #0]
 800af1c:	4605      	mov	r5, r0
 800af1e:	b911      	cbnz	r1, 800af26 <sbrk_aligned+0x12>
 800af20:	f000 f8ae 	bl	800b080 <_sbrk_r>
 800af24:	6030      	str	r0, [r6, #0]
 800af26:	4621      	mov	r1, r4
 800af28:	4628      	mov	r0, r5
 800af2a:	f000 f8a9 	bl	800b080 <_sbrk_r>
 800af2e:	1c43      	adds	r3, r0, #1
 800af30:	d103      	bne.n	800af3a <sbrk_aligned+0x26>
 800af32:	f04f 34ff 	mov.w	r4, #4294967295
 800af36:	4620      	mov	r0, r4
 800af38:	bd70      	pop	{r4, r5, r6, pc}
 800af3a:	1cc4      	adds	r4, r0, #3
 800af3c:	f024 0403 	bic.w	r4, r4, #3
 800af40:	42a0      	cmp	r0, r4
 800af42:	d0f8      	beq.n	800af36 <sbrk_aligned+0x22>
 800af44:	1a21      	subs	r1, r4, r0
 800af46:	4628      	mov	r0, r5
 800af48:	f000 f89a 	bl	800b080 <_sbrk_r>
 800af4c:	3001      	adds	r0, #1
 800af4e:	d1f2      	bne.n	800af36 <sbrk_aligned+0x22>
 800af50:	e7ef      	b.n	800af32 <sbrk_aligned+0x1e>
 800af52:	bf00      	nop
 800af54:	20003438 	.word	0x20003438

0800af58 <_malloc_r>:
 800af58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af5c:	1ccd      	adds	r5, r1, #3
 800af5e:	f025 0503 	bic.w	r5, r5, #3
 800af62:	3508      	adds	r5, #8
 800af64:	2d0c      	cmp	r5, #12
 800af66:	bf38      	it	cc
 800af68:	250c      	movcc	r5, #12
 800af6a:	2d00      	cmp	r5, #0
 800af6c:	4606      	mov	r6, r0
 800af6e:	db01      	blt.n	800af74 <_malloc_r+0x1c>
 800af70:	42a9      	cmp	r1, r5
 800af72:	d904      	bls.n	800af7e <_malloc_r+0x26>
 800af74:	230c      	movs	r3, #12
 800af76:	6033      	str	r3, [r6, #0]
 800af78:	2000      	movs	r0, #0
 800af7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b054 <_malloc_r+0xfc>
 800af82:	f000 f869 	bl	800b058 <__malloc_lock>
 800af86:	f8d8 3000 	ldr.w	r3, [r8]
 800af8a:	461c      	mov	r4, r3
 800af8c:	bb44      	cbnz	r4, 800afe0 <_malloc_r+0x88>
 800af8e:	4629      	mov	r1, r5
 800af90:	4630      	mov	r0, r6
 800af92:	f7ff ffbf 	bl	800af14 <sbrk_aligned>
 800af96:	1c43      	adds	r3, r0, #1
 800af98:	4604      	mov	r4, r0
 800af9a:	d158      	bne.n	800b04e <_malloc_r+0xf6>
 800af9c:	f8d8 4000 	ldr.w	r4, [r8]
 800afa0:	4627      	mov	r7, r4
 800afa2:	2f00      	cmp	r7, #0
 800afa4:	d143      	bne.n	800b02e <_malloc_r+0xd6>
 800afa6:	2c00      	cmp	r4, #0
 800afa8:	d04b      	beq.n	800b042 <_malloc_r+0xea>
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	4639      	mov	r1, r7
 800afae:	4630      	mov	r0, r6
 800afb0:	eb04 0903 	add.w	r9, r4, r3
 800afb4:	f000 f864 	bl	800b080 <_sbrk_r>
 800afb8:	4581      	cmp	r9, r0
 800afba:	d142      	bne.n	800b042 <_malloc_r+0xea>
 800afbc:	6821      	ldr	r1, [r4, #0]
 800afbe:	1a6d      	subs	r5, r5, r1
 800afc0:	4629      	mov	r1, r5
 800afc2:	4630      	mov	r0, r6
 800afc4:	f7ff ffa6 	bl	800af14 <sbrk_aligned>
 800afc8:	3001      	adds	r0, #1
 800afca:	d03a      	beq.n	800b042 <_malloc_r+0xea>
 800afcc:	6823      	ldr	r3, [r4, #0]
 800afce:	442b      	add	r3, r5
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	f8d8 3000 	ldr.w	r3, [r8]
 800afd6:	685a      	ldr	r2, [r3, #4]
 800afd8:	bb62      	cbnz	r2, 800b034 <_malloc_r+0xdc>
 800afda:	f8c8 7000 	str.w	r7, [r8]
 800afde:	e00f      	b.n	800b000 <_malloc_r+0xa8>
 800afe0:	6822      	ldr	r2, [r4, #0]
 800afe2:	1b52      	subs	r2, r2, r5
 800afe4:	d420      	bmi.n	800b028 <_malloc_r+0xd0>
 800afe6:	2a0b      	cmp	r2, #11
 800afe8:	d917      	bls.n	800b01a <_malloc_r+0xc2>
 800afea:	1961      	adds	r1, r4, r5
 800afec:	42a3      	cmp	r3, r4
 800afee:	6025      	str	r5, [r4, #0]
 800aff0:	bf18      	it	ne
 800aff2:	6059      	strne	r1, [r3, #4]
 800aff4:	6863      	ldr	r3, [r4, #4]
 800aff6:	bf08      	it	eq
 800aff8:	f8c8 1000 	streq.w	r1, [r8]
 800affc:	5162      	str	r2, [r4, r5]
 800affe:	604b      	str	r3, [r1, #4]
 800b000:	4630      	mov	r0, r6
 800b002:	f000 f82f 	bl	800b064 <__malloc_unlock>
 800b006:	f104 000b 	add.w	r0, r4, #11
 800b00a:	1d23      	adds	r3, r4, #4
 800b00c:	f020 0007 	bic.w	r0, r0, #7
 800b010:	1ac2      	subs	r2, r0, r3
 800b012:	bf1c      	itt	ne
 800b014:	1a1b      	subne	r3, r3, r0
 800b016:	50a3      	strne	r3, [r4, r2]
 800b018:	e7af      	b.n	800af7a <_malloc_r+0x22>
 800b01a:	6862      	ldr	r2, [r4, #4]
 800b01c:	42a3      	cmp	r3, r4
 800b01e:	bf0c      	ite	eq
 800b020:	f8c8 2000 	streq.w	r2, [r8]
 800b024:	605a      	strne	r2, [r3, #4]
 800b026:	e7eb      	b.n	800b000 <_malloc_r+0xa8>
 800b028:	4623      	mov	r3, r4
 800b02a:	6864      	ldr	r4, [r4, #4]
 800b02c:	e7ae      	b.n	800af8c <_malloc_r+0x34>
 800b02e:	463c      	mov	r4, r7
 800b030:	687f      	ldr	r7, [r7, #4]
 800b032:	e7b6      	b.n	800afa2 <_malloc_r+0x4a>
 800b034:	461a      	mov	r2, r3
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	42a3      	cmp	r3, r4
 800b03a:	d1fb      	bne.n	800b034 <_malloc_r+0xdc>
 800b03c:	2300      	movs	r3, #0
 800b03e:	6053      	str	r3, [r2, #4]
 800b040:	e7de      	b.n	800b000 <_malloc_r+0xa8>
 800b042:	230c      	movs	r3, #12
 800b044:	6033      	str	r3, [r6, #0]
 800b046:	4630      	mov	r0, r6
 800b048:	f000 f80c 	bl	800b064 <__malloc_unlock>
 800b04c:	e794      	b.n	800af78 <_malloc_r+0x20>
 800b04e:	6005      	str	r5, [r0, #0]
 800b050:	e7d6      	b.n	800b000 <_malloc_r+0xa8>
 800b052:	bf00      	nop
 800b054:	2000343c 	.word	0x2000343c

0800b058 <__malloc_lock>:
 800b058:	4801      	ldr	r0, [pc, #4]	@ (800b060 <__malloc_lock+0x8>)
 800b05a:	f000 b84b 	b.w	800b0f4 <__retarget_lock_acquire_recursive>
 800b05e:	bf00      	nop
 800b060:	2000357c 	.word	0x2000357c

0800b064 <__malloc_unlock>:
 800b064:	4801      	ldr	r0, [pc, #4]	@ (800b06c <__malloc_unlock+0x8>)
 800b066:	f000 b846 	b.w	800b0f6 <__retarget_lock_release_recursive>
 800b06a:	bf00      	nop
 800b06c:	2000357c 	.word	0x2000357c

0800b070 <memset>:
 800b070:	4402      	add	r2, r0
 800b072:	4603      	mov	r3, r0
 800b074:	4293      	cmp	r3, r2
 800b076:	d100      	bne.n	800b07a <memset+0xa>
 800b078:	4770      	bx	lr
 800b07a:	f803 1b01 	strb.w	r1, [r3], #1
 800b07e:	e7f9      	b.n	800b074 <memset+0x4>

0800b080 <_sbrk_r>:
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	4d06      	ldr	r5, [pc, #24]	@ (800b09c <_sbrk_r+0x1c>)
 800b084:	2300      	movs	r3, #0
 800b086:	4604      	mov	r4, r0
 800b088:	4608      	mov	r0, r1
 800b08a:	602b      	str	r3, [r5, #0]
 800b08c:	f7f6 fe60 	bl	8001d50 <_sbrk>
 800b090:	1c43      	adds	r3, r0, #1
 800b092:	d102      	bne.n	800b09a <_sbrk_r+0x1a>
 800b094:	682b      	ldr	r3, [r5, #0]
 800b096:	b103      	cbz	r3, 800b09a <_sbrk_r+0x1a>
 800b098:	6023      	str	r3, [r4, #0]
 800b09a:	bd38      	pop	{r3, r4, r5, pc}
 800b09c:	20003578 	.word	0x20003578

0800b0a0 <__errno>:
 800b0a0:	4b01      	ldr	r3, [pc, #4]	@ (800b0a8 <__errno+0x8>)
 800b0a2:	6818      	ldr	r0, [r3, #0]
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	20000410 	.word	0x20000410

0800b0ac <__libc_init_array>:
 800b0ac:	b570      	push	{r4, r5, r6, lr}
 800b0ae:	4d0d      	ldr	r5, [pc, #52]	@ (800b0e4 <__libc_init_array+0x38>)
 800b0b0:	4c0d      	ldr	r4, [pc, #52]	@ (800b0e8 <__libc_init_array+0x3c>)
 800b0b2:	1b64      	subs	r4, r4, r5
 800b0b4:	10a4      	asrs	r4, r4, #2
 800b0b6:	2600      	movs	r6, #0
 800b0b8:	42a6      	cmp	r6, r4
 800b0ba:	d109      	bne.n	800b0d0 <__libc_init_array+0x24>
 800b0bc:	4d0b      	ldr	r5, [pc, #44]	@ (800b0ec <__libc_init_array+0x40>)
 800b0be:	4c0c      	ldr	r4, [pc, #48]	@ (800b0f0 <__libc_init_array+0x44>)
 800b0c0:	f000 fdf0 	bl	800bca4 <_init>
 800b0c4:	1b64      	subs	r4, r4, r5
 800b0c6:	10a4      	asrs	r4, r4, #2
 800b0c8:	2600      	movs	r6, #0
 800b0ca:	42a6      	cmp	r6, r4
 800b0cc:	d105      	bne.n	800b0da <__libc_init_array+0x2e>
 800b0ce:	bd70      	pop	{r4, r5, r6, pc}
 800b0d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0d4:	4798      	blx	r3
 800b0d6:	3601      	adds	r6, #1
 800b0d8:	e7ee      	b.n	800b0b8 <__libc_init_array+0xc>
 800b0da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0de:	4798      	blx	r3
 800b0e0:	3601      	adds	r6, #1
 800b0e2:	e7f2      	b.n	800b0ca <__libc_init_array+0x1e>
 800b0e4:	080218ac 	.word	0x080218ac
 800b0e8:	080218ac 	.word	0x080218ac
 800b0ec:	080218ac 	.word	0x080218ac
 800b0f0:	080218b0 	.word	0x080218b0

0800b0f4 <__retarget_lock_acquire_recursive>:
 800b0f4:	4770      	bx	lr

0800b0f6 <__retarget_lock_release_recursive>:
 800b0f6:	4770      	bx	lr

0800b0f8 <memcpy>:
 800b0f8:	440a      	add	r2, r1
 800b0fa:	4291      	cmp	r1, r2
 800b0fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b100:	d100      	bne.n	800b104 <memcpy+0xc>
 800b102:	4770      	bx	lr
 800b104:	b510      	push	{r4, lr}
 800b106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b10a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b10e:	4291      	cmp	r1, r2
 800b110:	d1f9      	bne.n	800b106 <memcpy+0xe>
 800b112:	bd10      	pop	{r4, pc}

0800b114 <_free_r>:
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	4605      	mov	r5, r0
 800b118:	2900      	cmp	r1, #0
 800b11a:	d041      	beq.n	800b1a0 <_free_r+0x8c>
 800b11c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b120:	1f0c      	subs	r4, r1, #4
 800b122:	2b00      	cmp	r3, #0
 800b124:	bfb8      	it	lt
 800b126:	18e4      	addlt	r4, r4, r3
 800b128:	f7ff ff96 	bl	800b058 <__malloc_lock>
 800b12c:	4a1d      	ldr	r2, [pc, #116]	@ (800b1a4 <_free_r+0x90>)
 800b12e:	6813      	ldr	r3, [r2, #0]
 800b130:	b933      	cbnz	r3, 800b140 <_free_r+0x2c>
 800b132:	6063      	str	r3, [r4, #4]
 800b134:	6014      	str	r4, [r2, #0]
 800b136:	4628      	mov	r0, r5
 800b138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b13c:	f7ff bf92 	b.w	800b064 <__malloc_unlock>
 800b140:	42a3      	cmp	r3, r4
 800b142:	d908      	bls.n	800b156 <_free_r+0x42>
 800b144:	6820      	ldr	r0, [r4, #0]
 800b146:	1821      	adds	r1, r4, r0
 800b148:	428b      	cmp	r3, r1
 800b14a:	bf01      	itttt	eq
 800b14c:	6819      	ldreq	r1, [r3, #0]
 800b14e:	685b      	ldreq	r3, [r3, #4]
 800b150:	1809      	addeq	r1, r1, r0
 800b152:	6021      	streq	r1, [r4, #0]
 800b154:	e7ed      	b.n	800b132 <_free_r+0x1e>
 800b156:	461a      	mov	r2, r3
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	b10b      	cbz	r3, 800b160 <_free_r+0x4c>
 800b15c:	42a3      	cmp	r3, r4
 800b15e:	d9fa      	bls.n	800b156 <_free_r+0x42>
 800b160:	6811      	ldr	r1, [r2, #0]
 800b162:	1850      	adds	r0, r2, r1
 800b164:	42a0      	cmp	r0, r4
 800b166:	d10b      	bne.n	800b180 <_free_r+0x6c>
 800b168:	6820      	ldr	r0, [r4, #0]
 800b16a:	4401      	add	r1, r0
 800b16c:	1850      	adds	r0, r2, r1
 800b16e:	4283      	cmp	r3, r0
 800b170:	6011      	str	r1, [r2, #0]
 800b172:	d1e0      	bne.n	800b136 <_free_r+0x22>
 800b174:	6818      	ldr	r0, [r3, #0]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	6053      	str	r3, [r2, #4]
 800b17a:	4408      	add	r0, r1
 800b17c:	6010      	str	r0, [r2, #0]
 800b17e:	e7da      	b.n	800b136 <_free_r+0x22>
 800b180:	d902      	bls.n	800b188 <_free_r+0x74>
 800b182:	230c      	movs	r3, #12
 800b184:	602b      	str	r3, [r5, #0]
 800b186:	e7d6      	b.n	800b136 <_free_r+0x22>
 800b188:	6820      	ldr	r0, [r4, #0]
 800b18a:	1821      	adds	r1, r4, r0
 800b18c:	428b      	cmp	r3, r1
 800b18e:	bf04      	itt	eq
 800b190:	6819      	ldreq	r1, [r3, #0]
 800b192:	685b      	ldreq	r3, [r3, #4]
 800b194:	6063      	str	r3, [r4, #4]
 800b196:	bf04      	itt	eq
 800b198:	1809      	addeq	r1, r1, r0
 800b19a:	6021      	streq	r1, [r4, #0]
 800b19c:	6054      	str	r4, [r2, #4]
 800b19e:	e7ca      	b.n	800b136 <_free_r+0x22>
 800b1a0:	bd38      	pop	{r3, r4, r5, pc}
 800b1a2:	bf00      	nop
 800b1a4:	2000343c 	.word	0x2000343c

0800b1a8 <cosf>:
 800b1a8:	ee10 3a10 	vmov	r3, s0
 800b1ac:	b507      	push	{r0, r1, r2, lr}
 800b1ae:	4a1e      	ldr	r2, [pc, #120]	@ (800b228 <cosf+0x80>)
 800b1b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d806      	bhi.n	800b1c6 <cosf+0x1e>
 800b1b8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b22c <cosf+0x84>
 800b1bc:	b003      	add	sp, #12
 800b1be:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1c2:	f000 b87b 	b.w	800b2bc <__kernel_cosf>
 800b1c6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b1ca:	d304      	bcc.n	800b1d6 <cosf+0x2e>
 800b1cc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b1d0:	b003      	add	sp, #12
 800b1d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1d6:	4668      	mov	r0, sp
 800b1d8:	f000 f910 	bl	800b3fc <__ieee754_rem_pio2f>
 800b1dc:	f000 0003 	and.w	r0, r0, #3
 800b1e0:	2801      	cmp	r0, #1
 800b1e2:	d009      	beq.n	800b1f8 <cosf+0x50>
 800b1e4:	2802      	cmp	r0, #2
 800b1e6:	d010      	beq.n	800b20a <cosf+0x62>
 800b1e8:	b9b0      	cbnz	r0, 800b218 <cosf+0x70>
 800b1ea:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1ee:	ed9d 0a00 	vldr	s0, [sp]
 800b1f2:	f000 f863 	bl	800b2bc <__kernel_cosf>
 800b1f6:	e7eb      	b.n	800b1d0 <cosf+0x28>
 800b1f8:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1fc:	ed9d 0a00 	vldr	s0, [sp]
 800b200:	f000 f8b4 	bl	800b36c <__kernel_sinf>
 800b204:	eeb1 0a40 	vneg.f32	s0, s0
 800b208:	e7e2      	b.n	800b1d0 <cosf+0x28>
 800b20a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b20e:	ed9d 0a00 	vldr	s0, [sp]
 800b212:	f000 f853 	bl	800b2bc <__kernel_cosf>
 800b216:	e7f5      	b.n	800b204 <cosf+0x5c>
 800b218:	eddd 0a01 	vldr	s1, [sp, #4]
 800b21c:	ed9d 0a00 	vldr	s0, [sp]
 800b220:	2001      	movs	r0, #1
 800b222:	f000 f8a3 	bl	800b36c <__kernel_sinf>
 800b226:	e7d3      	b.n	800b1d0 <cosf+0x28>
 800b228:	3f490fd8 	.word	0x3f490fd8
 800b22c:	00000000 	.word	0x00000000

0800b230 <sinf>:
 800b230:	ee10 3a10 	vmov	r3, s0
 800b234:	b507      	push	{r0, r1, r2, lr}
 800b236:	4a1f      	ldr	r2, [pc, #124]	@ (800b2b4 <sinf+0x84>)
 800b238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d807      	bhi.n	800b250 <sinf+0x20>
 800b240:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b2b8 <sinf+0x88>
 800b244:	2000      	movs	r0, #0
 800b246:	b003      	add	sp, #12
 800b248:	f85d eb04 	ldr.w	lr, [sp], #4
 800b24c:	f000 b88e 	b.w	800b36c <__kernel_sinf>
 800b250:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b254:	d304      	bcc.n	800b260 <sinf+0x30>
 800b256:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b25a:	b003      	add	sp, #12
 800b25c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b260:	4668      	mov	r0, sp
 800b262:	f000 f8cb 	bl	800b3fc <__ieee754_rem_pio2f>
 800b266:	f000 0003 	and.w	r0, r0, #3
 800b26a:	2801      	cmp	r0, #1
 800b26c:	d00a      	beq.n	800b284 <sinf+0x54>
 800b26e:	2802      	cmp	r0, #2
 800b270:	d00f      	beq.n	800b292 <sinf+0x62>
 800b272:	b9c0      	cbnz	r0, 800b2a6 <sinf+0x76>
 800b274:	eddd 0a01 	vldr	s1, [sp, #4]
 800b278:	ed9d 0a00 	vldr	s0, [sp]
 800b27c:	2001      	movs	r0, #1
 800b27e:	f000 f875 	bl	800b36c <__kernel_sinf>
 800b282:	e7ea      	b.n	800b25a <sinf+0x2a>
 800b284:	eddd 0a01 	vldr	s1, [sp, #4]
 800b288:	ed9d 0a00 	vldr	s0, [sp]
 800b28c:	f000 f816 	bl	800b2bc <__kernel_cosf>
 800b290:	e7e3      	b.n	800b25a <sinf+0x2a>
 800b292:	eddd 0a01 	vldr	s1, [sp, #4]
 800b296:	ed9d 0a00 	vldr	s0, [sp]
 800b29a:	2001      	movs	r0, #1
 800b29c:	f000 f866 	bl	800b36c <__kernel_sinf>
 800b2a0:	eeb1 0a40 	vneg.f32	s0, s0
 800b2a4:	e7d9      	b.n	800b25a <sinf+0x2a>
 800b2a6:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2aa:	ed9d 0a00 	vldr	s0, [sp]
 800b2ae:	f000 f805 	bl	800b2bc <__kernel_cosf>
 800b2b2:	e7f5      	b.n	800b2a0 <sinf+0x70>
 800b2b4:	3f490fd8 	.word	0x3f490fd8
 800b2b8:	00000000 	.word	0x00000000

0800b2bc <__kernel_cosf>:
 800b2bc:	ee10 3a10 	vmov	r3, s0
 800b2c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2c4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b2c8:	eef0 6a40 	vmov.f32	s13, s0
 800b2cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b2d0:	d204      	bcs.n	800b2dc <__kernel_cosf+0x20>
 800b2d2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b2d6:	ee17 2a90 	vmov	r2, s15
 800b2da:	b342      	cbz	r2, 800b32e <__kernel_cosf+0x72>
 800b2dc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b2e0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b34c <__kernel_cosf+0x90>
 800b2e4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b350 <__kernel_cosf+0x94>
 800b2e8:	4a1a      	ldr	r2, [pc, #104]	@ (800b354 <__kernel_cosf+0x98>)
 800b2ea:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b358 <__kernel_cosf+0x9c>
 800b2f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b2f8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b35c <__kernel_cosf+0xa0>
 800b2fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b300:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b360 <__kernel_cosf+0xa4>
 800b304:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b308:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b364 <__kernel_cosf+0xa8>
 800b30c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b310:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b314:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b318:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b31c:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b320:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b324:	d804      	bhi.n	800b330 <__kernel_cosf+0x74>
 800b326:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b32a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b32e:	4770      	bx	lr
 800b330:	4a0d      	ldr	r2, [pc, #52]	@ (800b368 <__kernel_cosf+0xac>)
 800b332:	4293      	cmp	r3, r2
 800b334:	bf9a      	itte	ls
 800b336:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b33a:	ee07 3a10 	vmovls	s14, r3
 800b33e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b342:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b346:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b34a:	e7ec      	b.n	800b326 <__kernel_cosf+0x6a>
 800b34c:	ad47d74e 	.word	0xad47d74e
 800b350:	310f74f6 	.word	0x310f74f6
 800b354:	3e999999 	.word	0x3e999999
 800b358:	b493f27c 	.word	0xb493f27c
 800b35c:	37d00d01 	.word	0x37d00d01
 800b360:	bab60b61 	.word	0xbab60b61
 800b364:	3d2aaaab 	.word	0x3d2aaaab
 800b368:	3f480000 	.word	0x3f480000

0800b36c <__kernel_sinf>:
 800b36c:	ee10 3a10 	vmov	r3, s0
 800b370:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b374:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b378:	d204      	bcs.n	800b384 <__kernel_sinf+0x18>
 800b37a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b37e:	ee17 3a90 	vmov	r3, s15
 800b382:	b35b      	cbz	r3, 800b3dc <__kernel_sinf+0x70>
 800b384:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b388:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b3e0 <__kernel_sinf+0x74>
 800b38c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b3e4 <__kernel_sinf+0x78>
 800b390:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b394:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b3e8 <__kernel_sinf+0x7c>
 800b398:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b39c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b3ec <__kernel_sinf+0x80>
 800b3a0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b3a4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b3f0 <__kernel_sinf+0x84>
 800b3a8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b3ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b3b0:	b930      	cbnz	r0, 800b3c0 <__kernel_sinf+0x54>
 800b3b2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b3f4 <__kernel_sinf+0x88>
 800b3b6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b3ba:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b3be:	4770      	bx	lr
 800b3c0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b3c4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b3c8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b3cc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b3d0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b3f8 <__kernel_sinf+0x8c>
 800b3d4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b3d8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	2f2ec9d3 	.word	0x2f2ec9d3
 800b3e4:	b2d72f34 	.word	0xb2d72f34
 800b3e8:	3638ef1b 	.word	0x3638ef1b
 800b3ec:	b9500d01 	.word	0xb9500d01
 800b3f0:	3c088889 	.word	0x3c088889
 800b3f4:	be2aaaab 	.word	0xbe2aaaab
 800b3f8:	3e2aaaab 	.word	0x3e2aaaab

0800b3fc <__ieee754_rem_pio2f>:
 800b3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3fe:	ee10 6a10 	vmov	r6, s0
 800b402:	4b88      	ldr	r3, [pc, #544]	@ (800b624 <__ieee754_rem_pio2f+0x228>)
 800b404:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b408:	429d      	cmp	r5, r3
 800b40a:	b087      	sub	sp, #28
 800b40c:	4604      	mov	r4, r0
 800b40e:	d805      	bhi.n	800b41c <__ieee754_rem_pio2f+0x20>
 800b410:	2300      	movs	r3, #0
 800b412:	ed80 0a00 	vstr	s0, [r0]
 800b416:	6043      	str	r3, [r0, #4]
 800b418:	2000      	movs	r0, #0
 800b41a:	e022      	b.n	800b462 <__ieee754_rem_pio2f+0x66>
 800b41c:	4b82      	ldr	r3, [pc, #520]	@ (800b628 <__ieee754_rem_pio2f+0x22c>)
 800b41e:	429d      	cmp	r5, r3
 800b420:	d83a      	bhi.n	800b498 <__ieee754_rem_pio2f+0x9c>
 800b422:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b426:	2e00      	cmp	r6, #0
 800b428:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b62c <__ieee754_rem_pio2f+0x230>
 800b42c:	4a80      	ldr	r2, [pc, #512]	@ (800b630 <__ieee754_rem_pio2f+0x234>)
 800b42e:	f023 030f 	bic.w	r3, r3, #15
 800b432:	dd18      	ble.n	800b466 <__ieee754_rem_pio2f+0x6a>
 800b434:	4293      	cmp	r3, r2
 800b436:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b43a:	bf09      	itett	eq
 800b43c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b634 <__ieee754_rem_pio2f+0x238>
 800b440:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b638 <__ieee754_rem_pio2f+0x23c>
 800b444:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b63c <__ieee754_rem_pio2f+0x240>
 800b448:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b44c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b454:	ed80 7a00 	vstr	s14, [r0]
 800b458:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b45c:	edc0 7a01 	vstr	s15, [r0, #4]
 800b460:	2001      	movs	r0, #1
 800b462:	b007      	add	sp, #28
 800b464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b466:	4293      	cmp	r3, r2
 800b468:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b46c:	bf09      	itett	eq
 800b46e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b634 <__ieee754_rem_pio2f+0x238>
 800b472:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b638 <__ieee754_rem_pio2f+0x23c>
 800b476:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b63c <__ieee754_rem_pio2f+0x240>
 800b47a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b47e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b486:	ed80 7a00 	vstr	s14, [r0]
 800b48a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b48e:	edc0 7a01 	vstr	s15, [r0, #4]
 800b492:	f04f 30ff 	mov.w	r0, #4294967295
 800b496:	e7e4      	b.n	800b462 <__ieee754_rem_pio2f+0x66>
 800b498:	4b69      	ldr	r3, [pc, #420]	@ (800b640 <__ieee754_rem_pio2f+0x244>)
 800b49a:	429d      	cmp	r5, r3
 800b49c:	d873      	bhi.n	800b586 <__ieee754_rem_pio2f+0x18a>
 800b49e:	f000 f8dd 	bl	800b65c <fabsf>
 800b4a2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b644 <__ieee754_rem_pio2f+0x248>
 800b4a6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b4aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b4ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b4b6:	ee17 0a90 	vmov	r0, s15
 800b4ba:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b62c <__ieee754_rem_pio2f+0x230>
 800b4be:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b4c2:	281f      	cmp	r0, #31
 800b4c4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b638 <__ieee754_rem_pio2f+0x23c>
 800b4c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4cc:	eeb1 6a47 	vneg.f32	s12, s14
 800b4d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b4d4:	ee16 1a90 	vmov	r1, s13
 800b4d8:	dc09      	bgt.n	800b4ee <__ieee754_rem_pio2f+0xf2>
 800b4da:	4a5b      	ldr	r2, [pc, #364]	@ (800b648 <__ieee754_rem_pio2f+0x24c>)
 800b4dc:	1e47      	subs	r7, r0, #1
 800b4de:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b4e2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b4e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d107      	bne.n	800b4fe <__ieee754_rem_pio2f+0x102>
 800b4ee:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b4f2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b4f6:	2a08      	cmp	r2, #8
 800b4f8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b4fc:	dc14      	bgt.n	800b528 <__ieee754_rem_pio2f+0x12c>
 800b4fe:	6021      	str	r1, [r4, #0]
 800b500:	ed94 7a00 	vldr	s14, [r4]
 800b504:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b508:	2e00      	cmp	r6, #0
 800b50a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b50e:	ed84 0a01 	vstr	s0, [r4, #4]
 800b512:	daa6      	bge.n	800b462 <__ieee754_rem_pio2f+0x66>
 800b514:	eeb1 7a47 	vneg.f32	s14, s14
 800b518:	eeb1 0a40 	vneg.f32	s0, s0
 800b51c:	ed84 7a00 	vstr	s14, [r4]
 800b520:	ed84 0a01 	vstr	s0, [r4, #4]
 800b524:	4240      	negs	r0, r0
 800b526:	e79c      	b.n	800b462 <__ieee754_rem_pio2f+0x66>
 800b528:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b634 <__ieee754_rem_pio2f+0x238>
 800b52c:	eef0 6a40 	vmov.f32	s13, s0
 800b530:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b534:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b538:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b53c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b63c <__ieee754_rem_pio2f+0x240>
 800b540:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b544:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b548:	ee15 2a90 	vmov	r2, s11
 800b54c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b550:	1a5b      	subs	r3, r3, r1
 800b552:	2b19      	cmp	r3, #25
 800b554:	dc04      	bgt.n	800b560 <__ieee754_rem_pio2f+0x164>
 800b556:	edc4 5a00 	vstr	s11, [r4]
 800b55a:	eeb0 0a66 	vmov.f32	s0, s13
 800b55e:	e7cf      	b.n	800b500 <__ieee754_rem_pio2f+0x104>
 800b560:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b64c <__ieee754_rem_pio2f+0x250>
 800b564:	eeb0 0a66 	vmov.f32	s0, s13
 800b568:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b56c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b570:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b650 <__ieee754_rem_pio2f+0x254>
 800b574:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b578:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b57c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b580:	ed84 7a00 	vstr	s14, [r4]
 800b584:	e7bc      	b.n	800b500 <__ieee754_rem_pio2f+0x104>
 800b586:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b58a:	d306      	bcc.n	800b59a <__ieee754_rem_pio2f+0x19e>
 800b58c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b590:	edc0 7a01 	vstr	s15, [r0, #4]
 800b594:	edc0 7a00 	vstr	s15, [r0]
 800b598:	e73e      	b.n	800b418 <__ieee754_rem_pio2f+0x1c>
 800b59a:	15ea      	asrs	r2, r5, #23
 800b59c:	3a86      	subs	r2, #134	@ 0x86
 800b59e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b5a2:	ee07 3a90 	vmov	s15, r3
 800b5a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b5aa:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b654 <__ieee754_rem_pio2f+0x258>
 800b5ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5b6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b5ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b5be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b5c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5ca:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b5ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b5d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5da:	edcd 7a05 	vstr	s15, [sp, #20]
 800b5de:	d11e      	bne.n	800b61e <__ieee754_rem_pio2f+0x222>
 800b5e0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5e8:	bf0c      	ite	eq
 800b5ea:	2301      	moveq	r3, #1
 800b5ec:	2302      	movne	r3, #2
 800b5ee:	491a      	ldr	r1, [pc, #104]	@ (800b658 <__ieee754_rem_pio2f+0x25c>)
 800b5f0:	9101      	str	r1, [sp, #4]
 800b5f2:	2102      	movs	r1, #2
 800b5f4:	9100      	str	r1, [sp, #0]
 800b5f6:	a803      	add	r0, sp, #12
 800b5f8:	4621      	mov	r1, r4
 800b5fa:	f000 f837 	bl	800b66c <__kernel_rem_pio2f>
 800b5fe:	2e00      	cmp	r6, #0
 800b600:	f6bf af2f 	bge.w	800b462 <__ieee754_rem_pio2f+0x66>
 800b604:	edd4 7a00 	vldr	s15, [r4]
 800b608:	eef1 7a67 	vneg.f32	s15, s15
 800b60c:	edc4 7a00 	vstr	s15, [r4]
 800b610:	edd4 7a01 	vldr	s15, [r4, #4]
 800b614:	eef1 7a67 	vneg.f32	s15, s15
 800b618:	edc4 7a01 	vstr	s15, [r4, #4]
 800b61c:	e782      	b.n	800b524 <__ieee754_rem_pio2f+0x128>
 800b61e:	2303      	movs	r3, #3
 800b620:	e7e5      	b.n	800b5ee <__ieee754_rem_pio2f+0x1f2>
 800b622:	bf00      	nop
 800b624:	3f490fd8 	.word	0x3f490fd8
 800b628:	4016cbe3 	.word	0x4016cbe3
 800b62c:	3fc90f80 	.word	0x3fc90f80
 800b630:	3fc90fd0 	.word	0x3fc90fd0
 800b634:	37354400 	.word	0x37354400
 800b638:	37354443 	.word	0x37354443
 800b63c:	2e85a308 	.word	0x2e85a308
 800b640:	43490f80 	.word	0x43490f80
 800b644:	3f22f984 	.word	0x3f22f984
 800b648:	080214dc 	.word	0x080214dc
 800b64c:	2e85a300 	.word	0x2e85a300
 800b650:	248d3132 	.word	0x248d3132
 800b654:	43800000 	.word	0x43800000
 800b658:	0802155c 	.word	0x0802155c

0800b65c <fabsf>:
 800b65c:	ee10 3a10 	vmov	r3, s0
 800b660:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b664:	ee00 3a10 	vmov	s0, r3
 800b668:	4770      	bx	lr
	...

0800b66c <__kernel_rem_pio2f>:
 800b66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b670:	ed2d 8b04 	vpush	{d8-d9}
 800b674:	b0d9      	sub	sp, #356	@ 0x164
 800b676:	4690      	mov	r8, r2
 800b678:	9001      	str	r0, [sp, #4]
 800b67a:	4ab9      	ldr	r2, [pc, #740]	@ (800b960 <__kernel_rem_pio2f+0x2f4>)
 800b67c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b67e:	f118 0f04 	cmn.w	r8, #4
 800b682:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b686:	460f      	mov	r7, r1
 800b688:	f103 3bff 	add.w	fp, r3, #4294967295
 800b68c:	db27      	blt.n	800b6de <__kernel_rem_pio2f+0x72>
 800b68e:	f1b8 0203 	subs.w	r2, r8, #3
 800b692:	bf48      	it	mi
 800b694:	f108 0204 	addmi.w	r2, r8, #4
 800b698:	10d2      	asrs	r2, r2, #3
 800b69a:	1c55      	adds	r5, r2, #1
 800b69c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b69e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800b970 <__kernel_rem_pio2f+0x304>
 800b6a2:	00e8      	lsls	r0, r5, #3
 800b6a4:	eba2 060b 	sub.w	r6, r2, fp
 800b6a8:	9002      	str	r0, [sp, #8]
 800b6aa:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b6ae:	eb0a 0c0b 	add.w	ip, sl, fp
 800b6b2:	ac1c      	add	r4, sp, #112	@ 0x70
 800b6b4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	4560      	cmp	r0, ip
 800b6bc:	dd11      	ble.n	800b6e2 <__kernel_rem_pio2f+0x76>
 800b6be:	a91c      	add	r1, sp, #112	@ 0x70
 800b6c0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b6c4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b6c8:	f04f 0c00 	mov.w	ip, #0
 800b6cc:	45d4      	cmp	ip, sl
 800b6ce:	dc27      	bgt.n	800b720 <__kernel_rem_pio2f+0xb4>
 800b6d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b6d4:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800b970 <__kernel_rem_pio2f+0x304>
 800b6d8:	4606      	mov	r6, r0
 800b6da:	2400      	movs	r4, #0
 800b6dc:	e016      	b.n	800b70c <__kernel_rem_pio2f+0xa0>
 800b6de:	2200      	movs	r2, #0
 800b6e0:	e7db      	b.n	800b69a <__kernel_rem_pio2f+0x2e>
 800b6e2:	42c6      	cmn	r6, r0
 800b6e4:	bf5d      	ittte	pl
 800b6e6:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b6ea:	ee07 1a90 	vmovpl	s15, r1
 800b6ee:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b6f2:	eef0 7a47 	vmovmi.f32	s15, s14
 800b6f6:	ece4 7a01 	vstmia	r4!, {s15}
 800b6fa:	3001      	adds	r0, #1
 800b6fc:	e7dd      	b.n	800b6ba <__kernel_rem_pio2f+0x4e>
 800b6fe:	ecfe 6a01 	vldmia	lr!, {s13}
 800b702:	ed96 7a00 	vldr	s14, [r6]
 800b706:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b70a:	3401      	adds	r4, #1
 800b70c:	455c      	cmp	r4, fp
 800b70e:	f1a6 0604 	sub.w	r6, r6, #4
 800b712:	ddf4      	ble.n	800b6fe <__kernel_rem_pio2f+0x92>
 800b714:	ece9 7a01 	vstmia	r9!, {s15}
 800b718:	f10c 0c01 	add.w	ip, ip, #1
 800b71c:	3004      	adds	r0, #4
 800b71e:	e7d5      	b.n	800b6cc <__kernel_rem_pio2f+0x60>
 800b720:	a908      	add	r1, sp, #32
 800b722:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b726:	9104      	str	r1, [sp, #16]
 800b728:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b72a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800b96c <__kernel_rem_pio2f+0x300>
 800b72e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800b968 <__kernel_rem_pio2f+0x2fc>
 800b732:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b736:	9203      	str	r2, [sp, #12]
 800b738:	4654      	mov	r4, sl
 800b73a:	00a2      	lsls	r2, r4, #2
 800b73c:	9205      	str	r2, [sp, #20]
 800b73e:	aa58      	add	r2, sp, #352	@ 0x160
 800b740:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b744:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b748:	a944      	add	r1, sp, #272	@ 0x110
 800b74a:	aa08      	add	r2, sp, #32
 800b74c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b750:	4694      	mov	ip, r2
 800b752:	4626      	mov	r6, r4
 800b754:	2e00      	cmp	r6, #0
 800b756:	f1a0 0004 	sub.w	r0, r0, #4
 800b75a:	dc4c      	bgt.n	800b7f6 <__kernel_rem_pio2f+0x18a>
 800b75c:	4628      	mov	r0, r5
 800b75e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b762:	f000 f9f5 	bl	800bb50 <scalbnf>
 800b766:	eeb0 8a40 	vmov.f32	s16, s0
 800b76a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b76e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b772:	f000 fa53 	bl	800bc1c <floorf>
 800b776:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b77a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b77e:	2d00      	cmp	r5, #0
 800b780:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b784:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b788:	ee17 9a90 	vmov	r9, s15
 800b78c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b790:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b794:	dd41      	ble.n	800b81a <__kernel_rem_pio2f+0x1ae>
 800b796:	f104 3cff 	add.w	ip, r4, #4294967295
 800b79a:	a908      	add	r1, sp, #32
 800b79c:	f1c5 0e08 	rsb	lr, r5, #8
 800b7a0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b7a4:	fa46 f00e 	asr.w	r0, r6, lr
 800b7a8:	4481      	add	r9, r0
 800b7aa:	fa00 f00e 	lsl.w	r0, r0, lr
 800b7ae:	1a36      	subs	r6, r6, r0
 800b7b0:	f1c5 0007 	rsb	r0, r5, #7
 800b7b4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b7b8:	4106      	asrs	r6, r0
 800b7ba:	2e00      	cmp	r6, #0
 800b7bc:	dd3c      	ble.n	800b838 <__kernel_rem_pio2f+0x1cc>
 800b7be:	f04f 0e00 	mov.w	lr, #0
 800b7c2:	f109 0901 	add.w	r9, r9, #1
 800b7c6:	4670      	mov	r0, lr
 800b7c8:	4574      	cmp	r4, lr
 800b7ca:	dc68      	bgt.n	800b89e <__kernel_rem_pio2f+0x232>
 800b7cc:	2d00      	cmp	r5, #0
 800b7ce:	dd03      	ble.n	800b7d8 <__kernel_rem_pio2f+0x16c>
 800b7d0:	2d01      	cmp	r5, #1
 800b7d2:	d074      	beq.n	800b8be <__kernel_rem_pio2f+0x252>
 800b7d4:	2d02      	cmp	r5, #2
 800b7d6:	d07d      	beq.n	800b8d4 <__kernel_rem_pio2f+0x268>
 800b7d8:	2e02      	cmp	r6, #2
 800b7da:	d12d      	bne.n	800b838 <__kernel_rem_pio2f+0x1cc>
 800b7dc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b7e0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b7e4:	b340      	cbz	r0, 800b838 <__kernel_rem_pio2f+0x1cc>
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	9306      	str	r3, [sp, #24]
 800b7ea:	f000 f9b1 	bl	800bb50 <scalbnf>
 800b7ee:	9b06      	ldr	r3, [sp, #24]
 800b7f0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b7f4:	e020      	b.n	800b838 <__kernel_rem_pio2f+0x1cc>
 800b7f6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b7fa:	3e01      	subs	r6, #1
 800b7fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b804:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b808:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b80c:	ecac 0a01 	vstmia	ip!, {s0}
 800b810:	ed90 0a00 	vldr	s0, [r0]
 800b814:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b818:	e79c      	b.n	800b754 <__kernel_rem_pio2f+0xe8>
 800b81a:	d105      	bne.n	800b828 <__kernel_rem_pio2f+0x1bc>
 800b81c:	1e60      	subs	r0, r4, #1
 800b81e:	a908      	add	r1, sp, #32
 800b820:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b824:	11f6      	asrs	r6, r6, #7
 800b826:	e7c8      	b.n	800b7ba <__kernel_rem_pio2f+0x14e>
 800b828:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b82c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b834:	da31      	bge.n	800b89a <__kernel_rem_pio2f+0x22e>
 800b836:	2600      	movs	r6, #0
 800b838:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b840:	f040 8098 	bne.w	800b974 <__kernel_rem_pio2f+0x308>
 800b844:	1e60      	subs	r0, r4, #1
 800b846:	2200      	movs	r2, #0
 800b848:	4550      	cmp	r0, sl
 800b84a:	da4b      	bge.n	800b8e4 <__kernel_rem_pio2f+0x278>
 800b84c:	2a00      	cmp	r2, #0
 800b84e:	d065      	beq.n	800b91c <__kernel_rem_pio2f+0x2b0>
 800b850:	3c01      	subs	r4, #1
 800b852:	ab08      	add	r3, sp, #32
 800b854:	3d08      	subs	r5, #8
 800b856:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d0f8      	beq.n	800b850 <__kernel_rem_pio2f+0x1e4>
 800b85e:	4628      	mov	r0, r5
 800b860:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b864:	f000 f974 	bl	800bb50 <scalbnf>
 800b868:	1c63      	adds	r3, r4, #1
 800b86a:	aa44      	add	r2, sp, #272	@ 0x110
 800b86c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800b96c <__kernel_rem_pio2f+0x300>
 800b870:	0099      	lsls	r1, r3, #2
 800b872:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b876:	4623      	mov	r3, r4
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f280 80a9 	bge.w	800b9d0 <__kernel_rem_pio2f+0x364>
 800b87e:	4623      	mov	r3, r4
 800b880:	2b00      	cmp	r3, #0
 800b882:	f2c0 80c7 	blt.w	800ba14 <__kernel_rem_pio2f+0x3a8>
 800b886:	aa44      	add	r2, sp, #272	@ 0x110
 800b888:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b88c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800b964 <__kernel_rem_pio2f+0x2f8>
 800b890:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800b970 <__kernel_rem_pio2f+0x304>
 800b894:	2000      	movs	r0, #0
 800b896:	1ae2      	subs	r2, r4, r3
 800b898:	e0b1      	b.n	800b9fe <__kernel_rem_pio2f+0x392>
 800b89a:	2602      	movs	r6, #2
 800b89c:	e78f      	b.n	800b7be <__kernel_rem_pio2f+0x152>
 800b89e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b8a2:	b948      	cbnz	r0, 800b8b8 <__kernel_rem_pio2f+0x24c>
 800b8a4:	b121      	cbz	r1, 800b8b0 <__kernel_rem_pio2f+0x244>
 800b8a6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b8aa:	f842 1c04 	str.w	r1, [r2, #-4]
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	f10e 0e01 	add.w	lr, lr, #1
 800b8b4:	4608      	mov	r0, r1
 800b8b6:	e787      	b.n	800b7c8 <__kernel_rem_pio2f+0x15c>
 800b8b8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b8bc:	e7f5      	b.n	800b8aa <__kernel_rem_pio2f+0x23e>
 800b8be:	f104 3cff 	add.w	ip, r4, #4294967295
 800b8c2:	aa08      	add	r2, sp, #32
 800b8c4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b8c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b8cc:	a908      	add	r1, sp, #32
 800b8ce:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b8d2:	e781      	b.n	800b7d8 <__kernel_rem_pio2f+0x16c>
 800b8d4:	f104 3cff 	add.w	ip, r4, #4294967295
 800b8d8:	aa08      	add	r2, sp, #32
 800b8da:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b8de:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b8e2:	e7f3      	b.n	800b8cc <__kernel_rem_pio2f+0x260>
 800b8e4:	a908      	add	r1, sp, #32
 800b8e6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b8ea:	3801      	subs	r0, #1
 800b8ec:	430a      	orrs	r2, r1
 800b8ee:	e7ab      	b.n	800b848 <__kernel_rem_pio2f+0x1dc>
 800b8f0:	3201      	adds	r2, #1
 800b8f2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b8f6:	2e00      	cmp	r6, #0
 800b8f8:	d0fa      	beq.n	800b8f0 <__kernel_rem_pio2f+0x284>
 800b8fa:	9905      	ldr	r1, [sp, #20]
 800b8fc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b900:	eb0d 0001 	add.w	r0, sp, r1
 800b904:	18e6      	adds	r6, r4, r3
 800b906:	a91c      	add	r1, sp, #112	@ 0x70
 800b908:	f104 0c01 	add.w	ip, r4, #1
 800b90c:	384c      	subs	r0, #76	@ 0x4c
 800b90e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b912:	4422      	add	r2, r4
 800b914:	4562      	cmp	r2, ip
 800b916:	da04      	bge.n	800b922 <__kernel_rem_pio2f+0x2b6>
 800b918:	4614      	mov	r4, r2
 800b91a:	e70e      	b.n	800b73a <__kernel_rem_pio2f+0xce>
 800b91c:	9804      	ldr	r0, [sp, #16]
 800b91e:	2201      	movs	r2, #1
 800b920:	e7e7      	b.n	800b8f2 <__kernel_rem_pio2f+0x286>
 800b922:	9903      	ldr	r1, [sp, #12]
 800b924:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b928:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800b92c:	9105      	str	r1, [sp, #20]
 800b92e:	ee07 1a90 	vmov	s15, r1
 800b932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b936:	2400      	movs	r4, #0
 800b938:	ece6 7a01 	vstmia	r6!, {s15}
 800b93c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800b970 <__kernel_rem_pio2f+0x304>
 800b940:	46b1      	mov	r9, r6
 800b942:	455c      	cmp	r4, fp
 800b944:	dd04      	ble.n	800b950 <__kernel_rem_pio2f+0x2e4>
 800b946:	ece0 7a01 	vstmia	r0!, {s15}
 800b94a:	f10c 0c01 	add.w	ip, ip, #1
 800b94e:	e7e1      	b.n	800b914 <__kernel_rem_pio2f+0x2a8>
 800b950:	ecfe 6a01 	vldmia	lr!, {s13}
 800b954:	ed39 7a01 	vldmdb	r9!, {s14}
 800b958:	3401      	adds	r4, #1
 800b95a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b95e:	e7f0      	b.n	800b942 <__kernel_rem_pio2f+0x2d6>
 800b960:	080218a0 	.word	0x080218a0
 800b964:	08021874 	.word	0x08021874
 800b968:	43800000 	.word	0x43800000
 800b96c:	3b800000 	.word	0x3b800000
 800b970:	00000000 	.word	0x00000000
 800b974:	9b02      	ldr	r3, [sp, #8]
 800b976:	eeb0 0a48 	vmov.f32	s0, s16
 800b97a:	eba3 0008 	sub.w	r0, r3, r8
 800b97e:	f000 f8e7 	bl	800bb50 <scalbnf>
 800b982:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800b968 <__kernel_rem_pio2f+0x2fc>
 800b986:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b98e:	db19      	blt.n	800b9c4 <__kernel_rem_pio2f+0x358>
 800b990:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800b96c <__kernel_rem_pio2f+0x300>
 800b994:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b998:	aa08      	add	r2, sp, #32
 800b99a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b99e:	3508      	adds	r5, #8
 800b9a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9a4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b9a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b9b0:	ee10 3a10 	vmov	r3, s0
 800b9b4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b9b8:	ee17 3a90 	vmov	r3, s15
 800b9bc:	3401      	adds	r4, #1
 800b9be:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b9c2:	e74c      	b.n	800b85e <__kernel_rem_pio2f+0x1f2>
 800b9c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b9c8:	aa08      	add	r2, sp, #32
 800b9ca:	ee10 3a10 	vmov	r3, s0
 800b9ce:	e7f6      	b.n	800b9be <__kernel_rem_pio2f+0x352>
 800b9d0:	a808      	add	r0, sp, #32
 800b9d2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b9d6:	9001      	str	r0, [sp, #4]
 800b9d8:	ee07 0a90 	vmov	s15, r0
 800b9dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b9e6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b9ea:	ed62 7a01 	vstmdb	r2!, {s15}
 800b9ee:	e743      	b.n	800b878 <__kernel_rem_pio2f+0x20c>
 800b9f0:	ecfc 6a01 	vldmia	ip!, {s13}
 800b9f4:	ecb5 7a01 	vldmia	r5!, {s14}
 800b9f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	4550      	cmp	r0, sl
 800ba00:	dc01      	bgt.n	800ba06 <__kernel_rem_pio2f+0x39a>
 800ba02:	4282      	cmp	r2, r0
 800ba04:	daf4      	bge.n	800b9f0 <__kernel_rem_pio2f+0x384>
 800ba06:	a858      	add	r0, sp, #352	@ 0x160
 800ba08:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ba0c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ba10:	3b01      	subs	r3, #1
 800ba12:	e735      	b.n	800b880 <__kernel_rem_pio2f+0x214>
 800ba14:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	dc09      	bgt.n	800ba2e <__kernel_rem_pio2f+0x3c2>
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	dc2b      	bgt.n	800ba76 <__kernel_rem_pio2f+0x40a>
 800ba1e:	d044      	beq.n	800baaa <__kernel_rem_pio2f+0x43e>
 800ba20:	f009 0007 	and.w	r0, r9, #7
 800ba24:	b059      	add	sp, #356	@ 0x164
 800ba26:	ecbd 8b04 	vpop	{d8-d9}
 800ba2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ba30:	2b03      	cmp	r3, #3
 800ba32:	d1f5      	bne.n	800ba20 <__kernel_rem_pio2f+0x3b4>
 800ba34:	aa30      	add	r2, sp, #192	@ 0xc0
 800ba36:	1f0b      	subs	r3, r1, #4
 800ba38:	4413      	add	r3, r2
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	f1a2 0204 	sub.w	r2, r2, #4
 800ba44:	dc52      	bgt.n	800baec <__kernel_rem_pio2f+0x480>
 800ba46:	4622      	mov	r2, r4
 800ba48:	2a01      	cmp	r2, #1
 800ba4a:	f1a3 0304 	sub.w	r3, r3, #4
 800ba4e:	dc5d      	bgt.n	800bb0c <__kernel_rem_pio2f+0x4a0>
 800ba50:	ab30      	add	r3, sp, #192	@ 0xc0
 800ba52:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800b970 <__kernel_rem_pio2f+0x304>
 800ba56:	440b      	add	r3, r1
 800ba58:	2c01      	cmp	r4, #1
 800ba5a:	dc67      	bgt.n	800bb2c <__kernel_rem_pio2f+0x4c0>
 800ba5c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800ba60:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800ba64:	2e00      	cmp	r6, #0
 800ba66:	d167      	bne.n	800bb38 <__kernel_rem_pio2f+0x4cc>
 800ba68:	edc7 6a00 	vstr	s13, [r7]
 800ba6c:	ed87 7a01 	vstr	s14, [r7, #4]
 800ba70:	edc7 7a02 	vstr	s15, [r7, #8]
 800ba74:	e7d4      	b.n	800ba20 <__kernel_rem_pio2f+0x3b4>
 800ba76:	ab30      	add	r3, sp, #192	@ 0xc0
 800ba78:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800b970 <__kernel_rem_pio2f+0x304>
 800ba7c:	440b      	add	r3, r1
 800ba7e:	4622      	mov	r2, r4
 800ba80:	2a00      	cmp	r2, #0
 800ba82:	da24      	bge.n	800bace <__kernel_rem_pio2f+0x462>
 800ba84:	b34e      	cbz	r6, 800bada <__kernel_rem_pio2f+0x46e>
 800ba86:	eef1 7a47 	vneg.f32	s15, s14
 800ba8a:	edc7 7a00 	vstr	s15, [r7]
 800ba8e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800ba92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba96:	aa31      	add	r2, sp, #196	@ 0xc4
 800ba98:	2301      	movs	r3, #1
 800ba9a:	429c      	cmp	r4, r3
 800ba9c:	da20      	bge.n	800bae0 <__kernel_rem_pio2f+0x474>
 800ba9e:	b10e      	cbz	r6, 800baa4 <__kernel_rem_pio2f+0x438>
 800baa0:	eef1 7a67 	vneg.f32	s15, s15
 800baa4:	edc7 7a01 	vstr	s15, [r7, #4]
 800baa8:	e7ba      	b.n	800ba20 <__kernel_rem_pio2f+0x3b4>
 800baaa:	ab30      	add	r3, sp, #192	@ 0xc0
 800baac:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800b970 <__kernel_rem_pio2f+0x304>
 800bab0:	440b      	add	r3, r1
 800bab2:	2c00      	cmp	r4, #0
 800bab4:	da05      	bge.n	800bac2 <__kernel_rem_pio2f+0x456>
 800bab6:	b10e      	cbz	r6, 800babc <__kernel_rem_pio2f+0x450>
 800bab8:	eef1 7a67 	vneg.f32	s15, s15
 800babc:	edc7 7a00 	vstr	s15, [r7]
 800bac0:	e7ae      	b.n	800ba20 <__kernel_rem_pio2f+0x3b4>
 800bac2:	ed33 7a01 	vldmdb	r3!, {s14}
 800bac6:	3c01      	subs	r4, #1
 800bac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bacc:	e7f1      	b.n	800bab2 <__kernel_rem_pio2f+0x446>
 800bace:	ed73 7a01 	vldmdb	r3!, {s15}
 800bad2:	3a01      	subs	r2, #1
 800bad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bad8:	e7d2      	b.n	800ba80 <__kernel_rem_pio2f+0x414>
 800bada:	eef0 7a47 	vmov.f32	s15, s14
 800bade:	e7d4      	b.n	800ba8a <__kernel_rem_pio2f+0x41e>
 800bae0:	ecb2 7a01 	vldmia	r2!, {s14}
 800bae4:	3301      	adds	r3, #1
 800bae6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800baea:	e7d6      	b.n	800ba9a <__kernel_rem_pio2f+0x42e>
 800baec:	edd2 7a00 	vldr	s15, [r2]
 800baf0:	edd2 6a01 	vldr	s13, [r2, #4]
 800baf4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800baf8:	3801      	subs	r0, #1
 800bafa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bafe:	ed82 7a00 	vstr	s14, [r2]
 800bb02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb06:	edc2 7a01 	vstr	s15, [r2, #4]
 800bb0a:	e798      	b.n	800ba3e <__kernel_rem_pio2f+0x3d2>
 800bb0c:	edd3 7a00 	vldr	s15, [r3]
 800bb10:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb14:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb18:	3a01      	subs	r2, #1
 800bb1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb1e:	ed83 7a00 	vstr	s14, [r3]
 800bb22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb26:	edc3 7a01 	vstr	s15, [r3, #4]
 800bb2a:	e78d      	b.n	800ba48 <__kernel_rem_pio2f+0x3dc>
 800bb2c:	ed33 7a01 	vldmdb	r3!, {s14}
 800bb30:	3c01      	subs	r4, #1
 800bb32:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb36:	e78f      	b.n	800ba58 <__kernel_rem_pio2f+0x3ec>
 800bb38:	eef1 6a66 	vneg.f32	s13, s13
 800bb3c:	eeb1 7a47 	vneg.f32	s14, s14
 800bb40:	edc7 6a00 	vstr	s13, [r7]
 800bb44:	ed87 7a01 	vstr	s14, [r7, #4]
 800bb48:	eef1 7a67 	vneg.f32	s15, s15
 800bb4c:	e790      	b.n	800ba70 <__kernel_rem_pio2f+0x404>
 800bb4e:	bf00      	nop

0800bb50 <scalbnf>:
 800bb50:	ee10 3a10 	vmov	r3, s0
 800bb54:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bb58:	d02b      	beq.n	800bbb2 <scalbnf+0x62>
 800bb5a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bb5e:	d302      	bcc.n	800bb66 <scalbnf+0x16>
 800bb60:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bb64:	4770      	bx	lr
 800bb66:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800bb6a:	d123      	bne.n	800bbb4 <scalbnf+0x64>
 800bb6c:	4b24      	ldr	r3, [pc, #144]	@ (800bc00 <scalbnf+0xb0>)
 800bb6e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800bc04 <scalbnf+0xb4>
 800bb72:	4298      	cmp	r0, r3
 800bb74:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bb78:	db17      	blt.n	800bbaa <scalbnf+0x5a>
 800bb7a:	ee10 3a10 	vmov	r3, s0
 800bb7e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bb82:	3a19      	subs	r2, #25
 800bb84:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bb88:	4288      	cmp	r0, r1
 800bb8a:	dd15      	ble.n	800bbb8 <scalbnf+0x68>
 800bb8c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800bc08 <scalbnf+0xb8>
 800bb90:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800bc0c <scalbnf+0xbc>
 800bb94:	ee10 3a10 	vmov	r3, s0
 800bb98:	eeb0 7a67 	vmov.f32	s14, s15
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	bfb8      	it	lt
 800bba0:	eef0 7a66 	vmovlt.f32	s15, s13
 800bba4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800bba8:	4770      	bx	lr
 800bbaa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bc10 <scalbnf+0xc0>
 800bbae:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bbb2:	4770      	bx	lr
 800bbb4:	0dd2      	lsrs	r2, r2, #23
 800bbb6:	e7e5      	b.n	800bb84 <scalbnf+0x34>
 800bbb8:	4410      	add	r0, r2
 800bbba:	28fe      	cmp	r0, #254	@ 0xfe
 800bbbc:	dce6      	bgt.n	800bb8c <scalbnf+0x3c>
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	dd06      	ble.n	800bbd0 <scalbnf+0x80>
 800bbc2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bbc6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bbca:	ee00 3a10 	vmov	s0, r3
 800bbce:	4770      	bx	lr
 800bbd0:	f110 0f16 	cmn.w	r0, #22
 800bbd4:	da09      	bge.n	800bbea <scalbnf+0x9a>
 800bbd6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800bc10 <scalbnf+0xc0>
 800bbda:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800bc14 <scalbnf+0xc4>
 800bbde:	ee10 3a10 	vmov	r3, s0
 800bbe2:	eeb0 7a67 	vmov.f32	s14, s15
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	e7d9      	b.n	800bb9e <scalbnf+0x4e>
 800bbea:	3019      	adds	r0, #25
 800bbec:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bbf0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bbf4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800bc18 <scalbnf+0xc8>
 800bbf8:	ee07 3a90 	vmov	s15, r3
 800bbfc:	e7d7      	b.n	800bbae <scalbnf+0x5e>
 800bbfe:	bf00      	nop
 800bc00:	ffff3cb0 	.word	0xffff3cb0
 800bc04:	4c000000 	.word	0x4c000000
 800bc08:	7149f2ca 	.word	0x7149f2ca
 800bc0c:	f149f2ca 	.word	0xf149f2ca
 800bc10:	0da24260 	.word	0x0da24260
 800bc14:	8da24260 	.word	0x8da24260
 800bc18:	33000000 	.word	0x33000000

0800bc1c <floorf>:
 800bc1c:	ee10 3a10 	vmov	r3, s0
 800bc20:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bc24:	3a7f      	subs	r2, #127	@ 0x7f
 800bc26:	2a16      	cmp	r2, #22
 800bc28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bc2c:	dc2b      	bgt.n	800bc86 <floorf+0x6a>
 800bc2e:	2a00      	cmp	r2, #0
 800bc30:	da12      	bge.n	800bc58 <floorf+0x3c>
 800bc32:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bc98 <floorf+0x7c>
 800bc36:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc3a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc42:	dd06      	ble.n	800bc52 <floorf+0x36>
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	da24      	bge.n	800bc92 <floorf+0x76>
 800bc48:	2900      	cmp	r1, #0
 800bc4a:	4b14      	ldr	r3, [pc, #80]	@ (800bc9c <floorf+0x80>)
 800bc4c:	bf08      	it	eq
 800bc4e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bc52:	ee00 3a10 	vmov	s0, r3
 800bc56:	4770      	bx	lr
 800bc58:	4911      	ldr	r1, [pc, #68]	@ (800bca0 <floorf+0x84>)
 800bc5a:	4111      	asrs	r1, r2
 800bc5c:	420b      	tst	r3, r1
 800bc5e:	d0fa      	beq.n	800bc56 <floorf+0x3a>
 800bc60:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bc98 <floorf+0x7c>
 800bc64:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc68:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc70:	ddef      	ble.n	800bc52 <floorf+0x36>
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	bfbe      	ittt	lt
 800bc76:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bc7a:	fa40 f202 	asrlt.w	r2, r0, r2
 800bc7e:	189b      	addlt	r3, r3, r2
 800bc80:	ea23 0301 	bic.w	r3, r3, r1
 800bc84:	e7e5      	b.n	800bc52 <floorf+0x36>
 800bc86:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bc8a:	d3e4      	bcc.n	800bc56 <floorf+0x3a>
 800bc8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc90:	4770      	bx	lr
 800bc92:	2300      	movs	r3, #0
 800bc94:	e7dd      	b.n	800bc52 <floorf+0x36>
 800bc96:	bf00      	nop
 800bc98:	7149f2ca 	.word	0x7149f2ca
 800bc9c:	bf800000 	.word	0xbf800000
 800bca0:	007fffff 	.word	0x007fffff

0800bca4 <_init>:
 800bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca6:	bf00      	nop
 800bca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcaa:	bc08      	pop	{r3}
 800bcac:	469e      	mov	lr, r3
 800bcae:	4770      	bx	lr

0800bcb0 <_fini>:
 800bcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb2:	bf00      	nop
 800bcb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcb6:	bc08      	pop	{r3}
 800bcb8:	469e      	mov	lr, r3
 800bcba:	4770      	bx	lr
