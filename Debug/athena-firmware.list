
athena-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009944  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015820  08009ad4  08009ad4  0000aad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f2f4  0801f2f4  00021010  2**0
                  CONTENTS
  4 .ARM          00000000  0801f2f4  0801f2f4  00021010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801f2f4  0801f2f4  00021010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f2f4  0801f2f4  000202f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f2f8  0801f2f8  000202f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0801f2fc  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a84  20000010  0801f30c  00021010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a94  0801f30c  00021a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001988a  00000000  00000000  00021040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049e4  00000000  00000000  0003a8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001958  00000000  00000000  0003f2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001308  00000000  00000000  00040c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274f3  00000000  00000000  00041f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ccee  00000000  00000000  00069403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db8a1  00000000  00000000  000860f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161992  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006758  00000000  00000000  001619d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  00168130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009abc 	.word	0x08009abc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08009abc 	.word	0x08009abc

080001d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001d4:	4b04      	ldr	r3, [pc, #16]	@ (80001e8 <__NVIC_GetPriorityGrouping+0x18>)
 80001d6:	68db      	ldr	r3, [r3, #12]
 80001d8:	0a1b      	lsrs	r3, r3, #8
 80001da:	f003 0307 	and.w	r3, r3, #7
}
 80001de:	4618      	mov	r0, r3
 80001e0:	46bd      	mov	sp, r7
 80001e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e6:	4770      	bx	lr
 80001e8:	e000ed00 	.word	0xe000ed00

080001ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	db0b      	blt.n	8000216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	f003 021f 	and.w	r2, r3, #31
 8000204:	4907      	ldr	r1, [pc, #28]	@ (8000224 <__NVIC_EnableIRQ+0x38>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	095b      	lsrs	r3, r3, #5
 800020c:	2001      	movs	r0, #1
 800020e:	fa00 f202 	lsl.w	r2, r0, r2
 8000212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000e100 	.word	0xe000e100

08000228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	6039      	str	r1, [r7, #0]
 8000232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000238:	2b00      	cmp	r3, #0
 800023a:	db0a      	blt.n	8000252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	b2da      	uxtb	r2, r3
 8000240:	490c      	ldr	r1, [pc, #48]	@ (8000274 <__NVIC_SetPriority+0x4c>)
 8000242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000246:	0112      	lsls	r2, r2, #4
 8000248:	b2d2      	uxtb	r2, r2
 800024a:	440b      	add	r3, r1
 800024c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000250:	e00a      	b.n	8000268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	b2da      	uxtb	r2, r3
 8000256:	4908      	ldr	r1, [pc, #32]	@ (8000278 <__NVIC_SetPriority+0x50>)
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	f003 030f 	and.w	r3, r3, #15
 800025e:	3b04      	subs	r3, #4
 8000260:	0112      	lsls	r2, r2, #4
 8000262:	b2d2      	uxtb	r2, r2
 8000264:	440b      	add	r3, r1
 8000266:	761a      	strb	r2, [r3, #24]
}
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	e000e100 	.word	0xe000e100
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800027c:	b480      	push	{r7}
 800027e:	b089      	sub	sp, #36	@ 0x24
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	f003 0307 	and.w	r3, r3, #7
 800028e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000290:	69fb      	ldr	r3, [r7, #28]
 8000292:	f1c3 0307 	rsb	r3, r3, #7
 8000296:	2b04      	cmp	r3, #4
 8000298:	bf28      	it	cs
 800029a:	2304      	movcs	r3, #4
 800029c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3304      	adds	r3, #4
 80002a2:	2b06      	cmp	r3, #6
 80002a4:	d902      	bls.n	80002ac <NVIC_EncodePriority+0x30>
 80002a6:	69fb      	ldr	r3, [r7, #28]
 80002a8:	3b03      	subs	r3, #3
 80002aa:	e000      	b.n	80002ae <NVIC_EncodePriority+0x32>
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b0:	f04f 32ff 	mov.w	r2, #4294967295
 80002b4:	69bb      	ldr	r3, [r7, #24]
 80002b6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ba:	43da      	mvns	r2, r3
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	401a      	ands	r2, r3
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002c4:	f04f 31ff 	mov.w	r1, #4294967295
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	fa01 f303 	lsl.w	r3, r1, r3
 80002ce:	43d9      	mvns	r1, r3
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d4:	4313      	orrs	r3, r2
         );
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3724      	adds	r7, #36	@ 0x24
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
	...

080002e4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002ec:	4b08      	ldr	r3, [pc, #32]	@ (8000310 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80002f0:	4907      	ldr	r1, [pc, #28]	@ (8000310 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4313      	orrs	r3, r2
 80002f6:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4013      	ands	r3, r2
 8000300:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000302:	68fb      	ldr	r3, [r7, #12]
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	40021000 	.word	0x40021000

08000314 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000318:	2001      	movs	r0, #1
 800031a:	f7ff ffe3 	bl	80002e4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 800031e:	2002      	movs	r0, #2
 8000320:	f7ff ffe0 	bl	80002e4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000324:	2200      	movs	r2, #0
 8000326:	2105      	movs	r1, #5
 8000328:	200e      	movs	r0, #14
 800032a:	f004 fb94 	bl	8004a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800032e:	200e      	movs	r0, #14
 8000330:	f004 fbad 	bl	8004a8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000334:	2200      	movs	r2, #0
 8000336:	2105      	movs	r1, #5
 8000338:	200f      	movs	r0, #15
 800033a:	f004 fb8c 	bl	8004a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800033e:	200f      	movs	r0, #15
 8000340:	f004 fba5 	bl	8004a8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000344:	f7ff ff44 	bl	80001d0 <__NVIC_GetPriorityGrouping>
 8000348:	4603      	mov	r3, r0
 800034a:	2200      	movs	r2, #0
 800034c:	2105      	movs	r1, #5
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ff94 	bl	800027c <NVIC_EncodePriority>
 8000354:	4603      	mov	r3, r0
 8000356:	4619      	mov	r1, r3
 8000358:	2010      	movs	r0, #16
 800035a:	f7ff ff65 	bl	8000228 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800035e:	2010      	movs	r0, #16
 8000360:	f7ff ff44 	bl	80001ec <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000364:	f7ff ff34 	bl	80001d0 <__NVIC_GetPriorityGrouping>
 8000368:	4603      	mov	r3, r0
 800036a:	2200      	movs	r2, #0
 800036c:	2105      	movs	r1, #5
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff84 	bl	800027c <NVIC_EncodePriority>
 8000374:	4603      	mov	r3, r0
 8000376:	4619      	mov	r1, r3
 8000378:	2011      	movs	r0, #17
 800037a:	f7ff ff55 	bl	8000228 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800037e:	2011      	movs	r0, #17
 8000380:	f7ff ff34 	bl	80001ec <__NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000384:	f7ff ff24 	bl	80001d0 <__NVIC_GetPriorityGrouping>
 8000388:	4603      	mov	r3, r0
 800038a:	2200      	movs	r2, #0
 800038c:	2105      	movs	r1, #5
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ff74 	bl	800027c <NVIC_EncodePriority>
 8000394:	4603      	mov	r3, r0
 8000396:	4619      	mov	r1, r3
 8000398:	2044      	movs	r0, #68	@ 0x44
 800039a:	f7ff ff45 	bl	8000228 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 800039e:	2044      	movs	r0, #68	@ 0x44
 80003a0:	f7ff ff24 	bl	80001ec <__NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80003a4:	f7ff ff14 	bl	80001d0 <__NVIC_GetPriorityGrouping>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2200      	movs	r2, #0
 80003ac:	2105      	movs	r1, #5
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ff64 	bl	800027c <NVIC_EncodePriority>
 80003b4:	4603      	mov	r3, r0
 80003b6:	4619      	mov	r1, r3
 80003b8:	2045      	movs	r0, #69	@ 0x45
 80003ba:	f7ff ff35 	bl	8000228 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80003be:	2045      	movs	r0, #69	@ 0x45
 80003c0:	f7ff ff14 	bl	80001ec <__NVIC_EnableIRQ>

}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	4013      	ands	r3, r2
 80003de:	041a      	lsls	r2, r3, #16
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	43d9      	mvns	r1, r3
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	400b      	ands	r3, r1
 80003e8:	431a      	orrs	r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	619a      	str	r2, [r3, #24]
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000400:	4a04      	ldr	r2, [pc, #16]	@ (8000414 <MX_FREERTOS_Init+0x18>)
 8000402:	2100      	movs	r1, #0
 8000404:	4804      	ldr	r0, [pc, #16]	@ (8000418 <MX_FREERTOS_Init+0x1c>)
 8000406:	f006 fdeb 	bl	8006fe0 <osThreadNew>
 800040a:	4603      	mov	r3, r0
 800040c:	4a03      	ldr	r2, [pc, #12]	@ (800041c <MX_FREERTOS_Init+0x20>)
 800040e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	08009b74 	.word	0x08009b74
 8000418:	08000461 	.word	0x08000461
 800041c:	2000102c 	.word	0x2000102c

08000420 <Write_Struct_to_Flash>:
uint8_t Write_Struct_to_Flash(uint32_t WriteAddr, VL53L5CX_ResultsData* pStruct)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
    return BSP_W25Qx_Write((uint8_t*)pStruct, WriteAddr, sizeof(VL53L5CX_ResultsData));
 800042a:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 800042e:	6879      	ldr	r1, [r7, #4]
 8000430:	6838      	ldr	r0, [r7, #0]
 8000432:	f004 f935 	bl	80046a0 <BSP_W25Qx_Write>
 8000436:	4603      	mov	r3, r0
}
 8000438:	4618      	mov	r0, r3
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <Read_Struct_from_Flash>:

// 从闪存读取结构体
uint8_t Read_Struct_from_Flash(uint32_t ReadAddr, VL53L5CX_ResultsData* pStruct)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
    return BSP_W25Qx_Read((uint8_t*)pStruct, ReadAddr, sizeof(VL53L5CX_ResultsData));
 800044a:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	6838      	ldr	r0, [r7, #0]
 8000452:	f004 f8e7 	bl	8004624 <BSP_W25Qx_Read>
 8000456:	4603      	mov	r3, r0
}
 8000458:	4618      	mov	r0, r3
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
//  /* Infinite loop */
	uint8_t ID[4];
	BSP_W25Qx_Init();
 8000468:	f004 f822 	bl	80044b0 <BSP_W25Qx_Init>
	BSP_W25Qx_Read_ID(ID);
 800046c:	f107 030c 	add.w	r3, r7, #12
 8000470:	4618      	mov	r0, r3
 8000472:	f004 f8ad 	bl	80045d0 <BSP_W25Qx_Read_ID>
    I2C_expander_initialize();
 8000476:	f001 ff97 	bl	80023a8 <I2C_expander_initialize>
    initialize_sensors_I2C(&vl53l5dev_f,1);
 800047a:	2101      	movs	r1, #1
 800047c:	4814      	ldr	r0, [pc, #80]	@ (80004d0 <StartDefaultTask+0x70>)
 800047e:	f001 f80d 	bl	800149c <initialize_sensors_I2C>
    vl53l5cx_start_ranging(&vl53l5dev_f);
 8000482:	4813      	ldr	r0, [pc, #76]	@ (80004d0 <StartDefaultTask+0x70>)
 8000484:	f003 f93e 	bl	8003704 <vl53l5cx_start_ranging>
    while(1){
    	LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_1);
 8000488:	2102      	movs	r1, #2
 800048a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800048e:	f7ff ff9b 	bl	80003c8 <LL_GPIO_TogglePin>
    	get_sensor_data(&vl53l5dev_f, &vl53l5_res_f);
 8000492:	4910      	ldr	r1, [pc, #64]	@ (80004d4 <StartDefaultTask+0x74>)
 8000494:	480e      	ldr	r0, [pc, #56]	@ (80004d0 <StartDefaultTask+0x70>)
 8000496:	f001 f865 	bl	8001564 <get_sensor_data>
    	uint32_t writeAddress = 0x000000; // 假设写入地址为0x000000
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
        uint8_t writeStatus = Write_Struct_to_Flash(writeAddress, &vl53l5_res_f);
 800049e:	490d      	ldr	r1, [pc, #52]	@ (80004d4 <StartDefaultTask+0x74>)
 80004a0:	6978      	ldr	r0, [r7, #20]
 80004a2:	f7ff ffbd 	bl	8000420 <Write_Struct_to_Flash>
 80004a6:	4603      	mov	r3, r0
 80004a8:	74fb      	strb	r3, [r7, #19]
        memset(&vl53l5_res_f, 0, sizeof(VL53L5CX_ResultsData));
 80004aa:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 80004ae:	2100      	movs	r1, #0
 80004b0:	4808      	ldr	r0, [pc, #32]	@ (80004d4 <StartDefaultTask+0x74>)
 80004b2:	f009 fac9 	bl	8009a48 <memset>
        uint8_t readStatus = Read_Struct_from_Flash(writeAddress, &vl53l5_res_f);
 80004b6:	4907      	ldr	r1, [pc, #28]	@ (80004d4 <StartDefaultTask+0x74>)
 80004b8:	6978      	ldr	r0, [r7, #20]
 80004ba:	f7ff ffc1 	bl	8000440 <Read_Struct_from_Flash>
 80004be:	4603      	mov	r3, r0
 80004c0:	74bb      	strb	r3, [r7, #18]
    	osDelay(950);
 80004c2:	f240 30b6 	movw	r0, #950	@ 0x3b6
 80004c6:	f006 fe1d 	bl	8007104 <osDelay>
    while(1){
 80004ca:	bf00      	nop
 80004cc:	e7dc      	b.n	8000488 <StartDefaultTask+0x28>
 80004ce:	bf00      	nop
 80004d0:	2000002c 	.word	0x2000002c
 80004d4:	20000adc 	.word	0x20000adc

080004d8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004e0:	4b08      	ldr	r3, [pc, #32]	@ (8000504 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004e4:	4907      	ldr	r1, [pc, #28]	@ (8000504 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4313      	orrs	r3, r2
 80004ea:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ec:	4b05      	ldr	r3, [pc, #20]	@ (8000504 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80004ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	bf00      	nop
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	40021000 	.word	0x40021000

08000508 <LL_GPIO_SetOutputPin>:
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	619a      	str	r2, [r3, #24]
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <LL_GPIO_ResetOutputPin>:
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	683a      	ldr	r2, [r7, #0]
 8000532:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	463b      	mov	r3, r7
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
 8000554:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000556:	2080      	movs	r0, #128	@ 0x80
 8000558:	f7ff ffbe 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800055c:	2001      	movs	r0, #1
 800055e:	f7ff ffbb 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000562:	2002      	movs	r0, #2
 8000564:	f7ff ffb8 	bl	80004d8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000568:	2102      	movs	r1, #2
 800056a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800056e:	f7ff ffd9 	bl	8000524 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_5);
 8000572:	2127      	movs	r1, #39	@ 0x27
 8000574:	481d      	ldr	r0, [pc, #116]	@ (80005ec <MX_GPIO_Init+0xac>)
 8000576:	f7ff ffd5 	bl	8000524 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(W25QXX_CS_GPIO_Port, W25QXX_CS_Pin);
 800057a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800057e:	481b      	ldr	r0, [pc, #108]	@ (80005ec <MX_GPIO_Init+0xac>)
 8000580:	f7ff ffc2 	bl	8000508 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000584:	2302      	movs	r3, #2
 8000586:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000588:	2301      	movs	r3, #1
 800058a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	463b      	mov	r3, r7
 800059a:	4619      	mov	r1, r3
 800059c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a0:	f005 ff57 	bl	8006452 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_5;
 80005a4:	2327      	movs	r3, #39	@ 0x27
 80005a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005a8:	2301      	movs	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b8:	463b      	mov	r3, r7
 80005ba:	4619      	mov	r1, r3
 80005bc:	480b      	ldr	r0, [pc, #44]	@ (80005ec <MX_GPIO_Init+0xac>)
 80005be:	f005 ff48 	bl	8006452 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = W25QXX_CS_Pin;
 80005c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005c8:	2301      	movs	r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80005cc:	2302      	movs	r3, #2
 80005ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(W25QXX_CS_GPIO_Port, &GPIO_InitStruct);
 80005d8:	463b      	mov	r3, r7
 80005da:	4619      	mov	r1, r3
 80005dc:	4803      	ldr	r0, [pc, #12]	@ (80005ec <MX_GPIO_Init+0xac>)
 80005de:	f005 ff38 	bl	8006452 <LL_GPIO_Init>

}
 80005e2:	bf00      	nop
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	48000400 	.word	0x48000400

080005f0 <__NVIC_GetPriorityGrouping>:
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f4:	4b04      	ldr	r3, [pc, #16]	@ (8000608 <__NVIC_GetPriorityGrouping+0x18>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	f003 0307 	and.w	r3, r3, #7
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <__NVIC_EnableIRQ>:
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	2b00      	cmp	r3, #0
 800061c:	db0b      	blt.n	8000636 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	f003 021f 	and.w	r2, r3, #31
 8000624:	4907      	ldr	r1, [pc, #28]	@ (8000644 <__NVIC_EnableIRQ+0x38>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	095b      	lsrs	r3, r3, #5
 800062c:	2001      	movs	r0, #1
 800062e:	fa00 f202 	lsl.w	r2, r0, r2
 8000632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000e100 	.word	0xe000e100

08000648 <__NVIC_SetPriority>:
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db0a      	blt.n	8000672 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	490c      	ldr	r1, [pc, #48]	@ (8000694 <__NVIC_SetPriority+0x4c>)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	0112      	lsls	r2, r2, #4
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	440b      	add	r3, r1
 800066c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000670:	e00a      	b.n	8000688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4908      	ldr	r1, [pc, #32]	@ (8000698 <__NVIC_SetPriority+0x50>)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	3b04      	subs	r3, #4
 8000680:	0112      	lsls	r2, r2, #4
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	440b      	add	r3, r1
 8000686:	761a      	strb	r2, [r3, #24]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <NVIC_EncodePriority>:
{
 800069c:	b480      	push	{r7}
 800069e:	b089      	sub	sp, #36	@ 0x24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	f1c3 0307 	rsb	r3, r3, #7
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	bf28      	it	cs
 80006ba:	2304      	movcs	r3, #4
 80006bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3304      	adds	r3, #4
 80006c2:	2b06      	cmp	r3, #6
 80006c4:	d902      	bls.n	80006cc <NVIC_EncodePriority+0x30>
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3b03      	subs	r3, #3
 80006ca:	e000      	b.n	80006ce <NVIC_EncodePriority+0x32>
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	f04f 32ff 	mov.w	r2, #4294967295
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	43da      	mvns	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	401a      	ands	r2, r3
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e4:	f04f 31ff 	mov.w	r1, #4294967295
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43d9      	mvns	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	4313      	orrs	r3, r2
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3724      	adds	r7, #36	@ 0x24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000704:	b480      	push	{r7}
 8000706:	b087      	sub	sp, #28
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000714:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <LL_DMA_SetDataTransferDirection+0x4c>)
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4413      	add	r3, r2
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	4413      	add	r3, r2
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000728:	f023 0310 	bic.w	r3, r3, #16
 800072c:	4908      	ldr	r1, [pc, #32]	@ (8000750 <LL_DMA_SetDataTransferDirection+0x4c>)
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	440a      	add	r2, r1
 8000732:	7812      	ldrb	r2, [r2, #0]
 8000734:	4611      	mov	r1, r2
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	440a      	add	r2, r1
 800073a:	4611      	mov	r1, r2
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	4313      	orrs	r3, r2
 8000740:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000742:	bf00      	nop
 8000744:	371c      	adds	r7, #28
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	08009b98 	.word	0x08009b98

08000754 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000754:	b480      	push	{r7}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8000764:	4a0d      	ldr	r2, [pc, #52]	@ (800079c <LL_DMA_SetMode+0x48>)
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	4413      	add	r3, r2
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	4413      	add	r3, r2
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f023 0220 	bic.w	r2, r3, #32
 8000778:	4908      	ldr	r1, [pc, #32]	@ (800079c <LL_DMA_SetMode+0x48>)
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	440b      	add	r3, r1
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	440b      	add	r3, r1
 8000786:	4619      	mov	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4313      	orrs	r3, r2
 800078c:	600b      	str	r3, [r1, #0]
             Mode);
}
 800078e:	bf00      	nop
 8000790:	371c      	adds	r7, #28
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	08009b98 	.word	0x08009b98

080007a0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80007b0:	4a0d      	ldr	r2, [pc, #52]	@ (80007e8 <LL_DMA_SetPeriphIncMode+0x48>)
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	4413      	add	r3, r2
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80007c4:	4908      	ldr	r1, [pc, #32]	@ (80007e8 <LL_DMA_SetPeriphIncMode+0x48>)
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	440b      	add	r3, r1
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	440b      	add	r3, r1
 80007d2:	4619      	mov	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80007da:	bf00      	nop
 80007dc:	371c      	adds	r7, #28
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	08009b98 	.word	0x08009b98

080007ec <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b087      	sub	sp, #28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80007fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000834 <LL_DMA_SetMemoryIncMode+0x48>)
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	4413      	add	r3, r2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	4413      	add	r3, r2
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000810:	4908      	ldr	r1, [pc, #32]	@ (8000834 <LL_DMA_SetMemoryIncMode+0x48>)
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	440b      	add	r3, r1
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	440b      	add	r3, r1
 800081e:	4619      	mov	r1, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4313      	orrs	r3, r2
 8000824:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000826:	bf00      	nop
 8000828:	371c      	adds	r7, #28
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	08009b98 	.word	0x08009b98

08000838 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000838:	b480      	push	{r7}
 800083a:	b087      	sub	sp, #28
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8000848:	4a0d      	ldr	r2, [pc, #52]	@ (8000880 <LL_DMA_SetPeriphSize+0x48>)
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	4413      	add	r3, r2
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	4413      	add	r3, r2
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800085c:	4908      	ldr	r1, [pc, #32]	@ (8000880 <LL_DMA_SetPeriphSize+0x48>)
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	440b      	add	r3, r1
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	440b      	add	r3, r1
 800086a:	4619      	mov	r1, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4313      	orrs	r3, r2
 8000870:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000872:	bf00      	nop
 8000874:	371c      	adds	r7, #28
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	08009b98 	.word	0x08009b98

08000884 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000884:	b480      	push	{r7}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000894:	4a0d      	ldr	r2, [pc, #52]	@ (80008cc <LL_DMA_SetMemorySize+0x48>)
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	4413      	add	r3, r2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	4413      	add	r3, r2
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80008a8:	4908      	ldr	r1, [pc, #32]	@ (80008cc <LL_DMA_SetMemorySize+0x48>)
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	440b      	add	r3, r1
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	440b      	add	r3, r1
 80008b6:	4619      	mov	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80008be:	bf00      	nop
 80008c0:	371c      	adds	r7, #28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	08009b98 	.word	0x08009b98

080008d0 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80008e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000918 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	4413      	add	r3, r2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	4413      	add	r3, r2
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80008f4:	4908      	ldr	r1, [pc, #32]	@ (8000918 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	440b      	add	r3, r1
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	440b      	add	r3, r1
 8000902:	4619      	mov	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4313      	orrs	r3, r2
 8000908:	600b      	str	r3, [r1, #0]
             Priority);
}
 800090a:	bf00      	nop
 800090c:	371c      	adds	r7, #28
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	08009b98 	.word	0x08009b98

0800091c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	@ 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	33a8      	adds	r3, #168	@ 0xa8
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	210f      	movs	r1, #15
 8000934:	fa01 f303 	lsl.w	r3, r1, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	401a      	ands	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	210f      	movs	r1, #15
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	fa93 f3a3 	rbit	r3, r3
 800094e:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 800095a:	2320      	movs	r3, #32
 800095c:	e003      	b.n	8000966 <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	fab3 f383 	clz	r3, r3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4619      	mov	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	408b      	lsls	r3, r1
 800096c:	68f9      	ldr	r1, [r7, #12]
 800096e:	31a8      	adds	r1, #168	@ 0xa8
 8000970:	4313      	orrs	r3, r2
 8000972:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 8000974:	bf00      	nop
 8000976:	3724      	adds	r7, #36	@ 0x24
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_I2C_EnableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_EnableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableGeneralCall(I2C_TypeDef *I2Cx)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	601a      	str	r2, [r3, #0]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80009d4:	f023 0306 	bic.w	r3, r3, #6
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	430a      	orrs	r2, r1
 80009de:	431a      	orrs	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	60da      	str	r2, [r3, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	60da      	str	r2, [r3, #12]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	605a      	str	r2, [r3, #4]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	0e1a      	lsrs	r2, r3, #24
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <LL_RCC_SetI2CClockSource+0x4c>)
 8000a3e:	4413      	add	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	0c1b      	lsrs	r3, r3, #16
 8000a4a:	f003 031f 	and.w	r3, r3, #31
 8000a4e:	2103      	movs	r1, #3
 8000a50:	fa01 f303 	lsl.w	r3, r1, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	401a      	ands	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	b2d9      	uxtb	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	0c1b      	lsrs	r3, r3, #16
 8000a60:	f003 031f 	and.w	r3, r3, #31
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	601a      	str	r2, [r3, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40021088 	.word	0x40021088

08000a80 <LL_AHB2_GRP1_EnableClock>:
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a88:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a8c:	4907      	ldr	r1, [pc, #28]	@ (8000aac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a94:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000

08000ab0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000aba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000abc:	4907      	ldr	r1, [pc, #28]	@ (8000adc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ac4:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ac6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4013      	ands	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	40021000 	.word	0x40021000

08000ae0 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	@ 0x38
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]
 8000af6:	615a      	str	r2, [r3, #20]
 8000af8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	615a      	str	r2, [r3, #20]

  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8000b0a:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8000b0e:	f7ff ff8f 	bl	8000a30 <LL_RCC_SetI2CClockSource>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000b12:	2002      	movs	r0, #2
 8000b14:	f7ff ffb4 	bl	8000a80 <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000b18:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000b26:	2301      	movs	r3, #1
 8000b28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	4619      	mov	r1, r3
 8000b36:	4851      	ldr	r0, [pc, #324]	@ (8000c7c <MX_I2C1_Init+0x19c>)
 8000b38:	f005 fc8b 	bl	8006452 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000b3c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000b40:	f7ff ffb6 	bl	8000ab0 <LL_APB1_GRP1_EnableClock>

  /* I2C1 DMA Init */

  /* I2C1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_7, LL_DMA_REQUEST_3);
 8000b44:	2203      	movs	r2, #3
 8000b46:	2106      	movs	r1, #6
 8000b48:	484d      	ldr	r0, [pc, #308]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000b4a:	f7ff fee7 	bl	800091c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2106      	movs	r1, #6
 8000b52:	484b      	ldr	r0, [pc, #300]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000b54:	f7ff fdd6 	bl	8000704 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8000b58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b5c:	2106      	movs	r1, #6
 8000b5e:	4848      	ldr	r0, [pc, #288]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000b60:	f7ff feb6 	bl	80008d0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2106      	movs	r1, #6
 8000b68:	4845      	ldr	r0, [pc, #276]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000b6a:	f7ff fdf3 	bl	8000754 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2106      	movs	r1, #6
 8000b72:	4843      	ldr	r0, [pc, #268]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000b74:	f7ff fe14 	bl	80007a0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8000b78:	2280      	movs	r2, #128	@ 0x80
 8000b7a:	2106      	movs	r1, #6
 8000b7c:	4840      	ldr	r0, [pc, #256]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000b7e:	f7ff fe35 	bl	80007ec <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2106      	movs	r1, #6
 8000b86:	483e      	ldr	r0, [pc, #248]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000b88:	f7ff fe56 	bl	8000838 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2106      	movs	r1, #6
 8000b90:	483b      	ldr	r0, [pc, #236]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000b92:	f7ff fe77 	bl	8000884 <LL_DMA_SetMemorySize>

  /* I2C1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_3);
 8000b96:	2203      	movs	r2, #3
 8000b98:	2105      	movs	r1, #5
 8000b9a:	4839      	ldr	r0, [pc, #228]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000b9c:	f7ff febe 	bl	800091c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	2105      	movs	r1, #5
 8000ba4:	4836      	ldr	r0, [pc, #216]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000ba6:	f7ff fdad 	bl	8000704 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8000baa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bae:	2105      	movs	r1, #5
 8000bb0:	4833      	ldr	r0, [pc, #204]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000bb2:	f7ff fe8d 	bl	80008d0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2105      	movs	r1, #5
 8000bba:	4831      	ldr	r0, [pc, #196]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000bbc:	f7ff fdca 	bl	8000754 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2105      	movs	r1, #5
 8000bc4:	482e      	ldr	r0, [pc, #184]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000bc6:	f7ff fdeb 	bl	80007a0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8000bca:	2280      	movs	r2, #128	@ 0x80
 8000bcc:	2105      	movs	r1, #5
 8000bce:	482c      	ldr	r0, [pc, #176]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000bd0:	f7ff fe0c 	bl	80007ec <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2105      	movs	r1, #5
 8000bd8:	4829      	ldr	r0, [pc, #164]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000bda:	f7ff fe2d 	bl	8000838 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2105      	movs	r1, #5
 8000be2:	4827      	ldr	r0, [pc, #156]	@ (8000c80 <MX_I2C1_Init+0x1a0>)
 8000be4:	f7ff fe4e 	bl	8000884 <LL_DMA_SetMemorySize>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000be8:	f7ff fd02 	bl	80005f0 <__NVIC_GetPriorityGrouping>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2105      	movs	r1, #5
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fd52 	bl	800069c <NVIC_EncodePriority>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	201f      	movs	r0, #31
 8000bfe:	f7ff fd23 	bl	8000648 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c02:	201f      	movs	r0, #31
 8000c04:	f7ff fd02 	bl	800060c <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000c08:	f7ff fcf2 	bl	80005f0 <__NVIC_GetPriorityGrouping>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2105      	movs	r1, #5
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fd42 	bl	800069c <NVIC_EncodePriority>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	2020      	movs	r0, #32
 8000c1e:	f7ff fd13 	bl	8000648 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c22:	2020      	movs	r0, #32
 8000c24:	f7ff fcf2 	bl	800060c <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000c28:	4816      	ldr	r0, [pc, #88]	@ (8000c84 <MX_I2C1_Init+0x1a4>)
 8000c2a:	f7ff fef1 	bl	8000a10 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000c2e:	4815      	ldr	r0, [pc, #84]	@ (8000c84 <MX_I2C1_Init+0x1a4>)
 8000c30:	f7ff fede 	bl	80009f0 <LL_I2C_DisableOwnAddress2>
  LL_I2C_EnableGeneralCall(I2C1);
 8000c34:	4813      	ldr	r0, [pc, #76]	@ (8000c84 <MX_I2C1_Init+0x1a4>)
 8000c36:	f7ff feb3 	bl	80009a0 <LL_I2C_EnableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000c3a:	4812      	ldr	r0, [pc, #72]	@ (8000c84 <MX_I2C1_Init+0x1a4>)
 8000c3c:	f7ff fea0 	bl	8000980 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00702991;
 8000c44:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <MX_I2C1_Init+0x1a8>)
 8000c46:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <MX_I2C1_Init+0x1a4>)
 8000c64:	f005 fd06 	bl	8006674 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_I2C1_Init+0x1a4>)
 8000c6e:	f7ff fea7 	bl	80009c0 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3738      	adds	r7, #56	@ 0x38
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	48000400 	.word	0x48000400
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40005400 	.word	0x40005400
 8000c88:	00702991 	.word	0x00702991

08000c8c <LL_RCC_HSE_Enable>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <LL_RCC_HSE_Enable+0x1c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <LL_RCC_HSE_Enable+0x1c>)
 8000c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000

08000cac <LL_RCC_HSE_IsReady>:
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <LL_RCC_HSE_IsReady+0x24>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000cbc:	d101      	bne.n	8000cc2 <LL_RCC_HSE_IsReady+0x16>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <LL_RCC_HSE_IsReady+0x18>
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <LL_RCC_SetSysClkSource>:
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <LL_RCC_SetSysClkSource+0x24>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	f023 0203 	bic.w	r2, r3, #3
 8000ce4:	4904      	ldr	r1, [pc, #16]	@ (8000cf8 <LL_RCC_SetSysClkSource+0x24>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	608b      	str	r3, [r1, #8]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000

08000cfc <LL_RCC_GetSysClkSource>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <LL_RCC_GetSysClkSource+0x18>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f003 030c 	and.w	r3, r3, #12
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000

08000d18 <LL_RCC_SetAHBPrescaler>:
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <LL_RCC_SetAHBPrescaler+0x24>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d28:	4904      	ldr	r1, [pc, #16]	@ (8000d3c <LL_RCC_SetAHBPrescaler+0x24>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	608b      	str	r3, [r1, #8]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	40021000 	.word	0x40021000

08000d40 <LL_RCC_SetAPB1Prescaler>:
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000d50:	4904      	ldr	r1, [pc, #16]	@ (8000d64 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	608b      	str	r3, [r1, #8]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	40021000 	.word	0x40021000

08000d68 <LL_RCC_SetAPB2Prescaler>:
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000d78:	4904      	ldr	r1, [pc, #16]	@ (8000d8c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	608b      	str	r3, [r1, #8]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	40021000 	.word	0x40021000

08000d90 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <LL_RCC_PLL_Enable+0x1c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <LL_RCC_PLL_Enable+0x1c>)
 8000d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000db4:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <LL_RCC_PLL_IsReady+0x24>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000dc0:	d101      	bne.n	8000dc6 <LL_RCC_PLL_IsReady+0x16>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <LL_RCC_PLL_IsReady+0x18>
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	68f9      	ldr	r1, [r7, #12]
 8000df0:	68ba      	ldr	r2, [r7, #8]
 8000df2:	4311      	orrs	r1, r2
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	0212      	lsls	r2, r2, #8
 8000df8:	4311      	orrs	r1, r2
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	4904      	ldr	r1, [pc, #16]	@ (8000e10 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000e00:	4313      	orrs	r3, r2
 8000e02:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40021000 	.word	0x40021000
 8000e14:	f9ff808c 	.word	0xf9ff808c

08000e18 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000e1c:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000

08000e38 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <LL_FLASH_SetLatency+0x24>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f023 0207 	bic.w	r2, r3, #7
 8000e48:	4904      	ldr	r1, [pc, #16]	@ (8000e5c <LL_FLASH_SetLatency+0x24>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40022000 	.word	0x40022000

08000e60 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e64:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <LL_FLASH_GetLatency+0x18>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0307 	and.w	r3, r3, #7
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40022000 	.word	0x40022000

08000e7c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000e8c:	4904      	ldr	r1, [pc, #16]	@ (8000ea0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	600b      	str	r3, [r1, #0]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	40007000 	.word	0x40007000

08000ea4 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eb4:	d101      	bne.n	8000eba <LL_PWR_IsActiveFlag_VOS+0x16>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <LL_PWR_IsActiveFlag_VOS+0x18>
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40007000 	.word	0x40007000

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f003 fc72 	bl	80047b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 f818 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f7ff fb32 	bl	8000540 <MX_GPIO_Init>
  MX_DMA_Init();
 8000edc:	f7ff fa1a 	bl	8000314 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ee0:	f7ff fdfe 	bl	8000ae0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ee4:	f000 fdb8 	bl	8001a58 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000ee8:	f000 f862 	bl	8000fb0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000eec:	f000 f89e 	bl	800102c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000ef0:	f000 fe68 	bl	8001bc4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ef4:	f000 feca 	bl	8001c8c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ef8:	f006 f828 	bl	8006f4c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000efc:	f7ff fa7e 	bl	80003fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f00:	f006 f848 	bl	8006f94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <main+0x38>

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000f0c:	2004      	movs	r0, #4
 8000f0e:	f7ff ff93 	bl	8000e38 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffa4 	bl	8000e60 <LL_FLASH_GetLatency>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d1fa      	bne.n	8000f14 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000f1e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f22:	f7ff ffab 	bl	8000e7c <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffbc 	bl	8000ea4 <LL_PWR_IsActiveFlag_VOS>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1fa      	bne.n	8000f28 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSE_Enable();
 8000f32:	f7ff feab 	bl	8000c8c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000f36:	bf00      	nop
 8000f38:	f7ff feb8 	bl	8000cac <LL_RCC_HSE_IsReady>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d1fa      	bne.n	8000f38 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 20, LL_RCC_PLLR_DIV_2);
 8000f42:	2300      	movs	r3, #0
 8000f44:	2214      	movs	r2, #20
 8000f46:	2100      	movs	r1, #0
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f7ff ff45 	bl	8000dd8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000f4e:	f7ff ff63 	bl	8000e18 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000f52:	f7ff ff1d 	bl	8000d90 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000f56:	bf00      	nop
 8000f58:	f7ff ff2a 	bl	8000db0 <LL_RCC_PLL_IsReady>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d1fa      	bne.n	8000f58 <SystemClock_Config+0x50>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f62:	2003      	movs	r0, #3
 8000f64:	f7ff feb6 	bl	8000cd4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000f68:	bf00      	nop
 8000f6a:	f7ff fec7 	bl	8000cfc <LL_RCC_GetSysClkSource>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b0c      	cmp	r3, #12
 8000f72:	d1fa      	bne.n	8000f6a <SystemClock_Config+0x62>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fecf 	bl	8000d18 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff fee0 	bl	8000d40 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff fef1 	bl	8000d68 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 8000f86:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <SystemClock_Config+0x98>)
 8000f88:	f005 ff9c 	bl	8006ec4 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000f8c:	200f      	movs	r0, #15
 8000f8e:	f003 fc2b 	bl	80047e8 <HAL_InitTick>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f98:	f000 f804 	bl	8000fa4 <Error_Handler>
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	04c4b400 	.word	0x04c4b400

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <Error_Handler+0x8>

08000fb0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001028 <MX_SPI1_Init+0x78>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fba:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fca:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000fce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fe2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <MX_SPI1_Init+0x74>)
 8000ffe:	2207      	movs	r2, #7
 8001000:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <MX_SPI1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <MX_SPI1_Init+0x74>)
 800100a:	2208      	movs	r2, #8
 800100c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	@ (8001024 <MX_SPI1_Init+0x74>)
 8001010:	f004 f892 	bl	8005138 <HAL_SPI_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800101a:	f7ff ffc3 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20001030 	.word	0x20001030
 8001028:	40013000 	.word	0x40013000

0800102c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001030:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001032:	4a1c      	ldr	r2, [pc, #112]	@ (80010a4 <MX_SPI2_Init+0x78>)
 8001034:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001036:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001038:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800103c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800103e:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001044:	4b16      	ldr	r3, [pc, #88]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001046:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800104a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <MX_SPI2_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001052:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <MX_SPI2_Init+0x74>)
 800105a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800105e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001062:	2210      	movs	r2, #16
 8001064:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <MX_SPI2_Init+0x74>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001072:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <MX_SPI2_Init+0x74>)
 800107a:	2207      	movs	r2, #7
 800107c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <MX_SPI2_Init+0x74>)
 8001086:	2208      	movs	r2, #8
 8001088:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800108a:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <MX_SPI2_Init+0x74>)
 800108c:	f004 f854 	bl	8005138 <HAL_SPI_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001096:	f7ff ff85 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20001094 	.word	0x20001094
 80010a4:	40003800 	.word	0x40003800

080010a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	@ 0x30
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a5c      	ldr	r2, [pc, #368]	@ (8001238 <HAL_SPI_MspInit+0x190>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d129      	bne.n	800111e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ca:	4b5c      	ldr	r3, [pc, #368]	@ (800123c <HAL_SPI_MspInit+0x194>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ce:	4a5b      	ldr	r2, [pc, #364]	@ (800123c <HAL_SPI_MspInit+0x194>)
 80010d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80010d6:	4b59      	ldr	r3, [pc, #356]	@ (800123c <HAL_SPI_MspInit+0x194>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b56      	ldr	r3, [pc, #344]	@ (800123c <HAL_SPI_MspInit+0x194>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a55      	ldr	r2, [pc, #340]	@ (800123c <HAL_SPI_MspInit+0x194>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b53      	ldr	r3, [pc, #332]	@ (800123c <HAL_SPI_MspInit+0x194>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010fa:	23e0      	movs	r3, #224	@ 0xe0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800110a:	2305      	movs	r3, #5
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001118:	f003 fe7c 	bl	8004e14 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800111c:	e088      	b.n	8001230 <HAL_SPI_MspInit+0x188>
  else if(spiHandle->Instance==SPI2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a47      	ldr	r2, [pc, #284]	@ (8001240 <HAL_SPI_MspInit+0x198>)
 8001124:	4293      	cmp	r3, r2
 8001126:	f040 8083 	bne.w	8001230 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800112a:	4b44      	ldr	r3, [pc, #272]	@ (800123c <HAL_SPI_MspInit+0x194>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	4a43      	ldr	r2, [pc, #268]	@ (800123c <HAL_SPI_MspInit+0x194>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001134:	6593      	str	r3, [r2, #88]	@ 0x58
 8001136:	4b41      	ldr	r3, [pc, #260]	@ (800123c <HAL_SPI_MspInit+0x194>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b3e      	ldr	r3, [pc, #248]	@ (800123c <HAL_SPI_MspInit+0x194>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a3d      	ldr	r2, [pc, #244]	@ (800123c <HAL_SPI_MspInit+0x194>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b3b      	ldr	r3, [pc, #236]	@ (800123c <HAL_SPI_MspInit+0x194>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800115a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800116c:	2305      	movs	r3, #5
 800116e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4833      	ldr	r0, [pc, #204]	@ (8001244 <HAL_SPI_MspInit+0x19c>)
 8001178:	f003 fe4c 	bl	8004e14 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800117c:	4b32      	ldr	r3, [pc, #200]	@ (8001248 <HAL_SPI_MspInit+0x1a0>)
 800117e:	4a33      	ldr	r2, [pc, #204]	@ (800124c <HAL_SPI_MspInit+0x1a4>)
 8001180:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8001182:	4b31      	ldr	r3, [pc, #196]	@ (8001248 <HAL_SPI_MspInit+0x1a0>)
 8001184:	2201      	movs	r2, #1
 8001186:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001188:	4b2f      	ldr	r3, [pc, #188]	@ (8001248 <HAL_SPI_MspInit+0x1a0>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118e:	4b2e      	ldr	r3, [pc, #184]	@ (8001248 <HAL_SPI_MspInit+0x1a0>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001194:	4b2c      	ldr	r3, [pc, #176]	@ (8001248 <HAL_SPI_MspInit+0x1a0>)
 8001196:	2280      	movs	r2, #128	@ 0x80
 8001198:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119a:	4b2b      	ldr	r3, [pc, #172]	@ (8001248 <HAL_SPI_MspInit+0x1a0>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a0:	4b29      	ldr	r3, [pc, #164]	@ (8001248 <HAL_SPI_MspInit+0x1a0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80011a6:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <HAL_SPI_MspInit+0x1a0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ac:	4b26      	ldr	r3, [pc, #152]	@ (8001248 <HAL_SPI_MspInit+0x1a0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80011b2:	4825      	ldr	r0, [pc, #148]	@ (8001248 <HAL_SPI_MspInit+0x1a0>)
 80011b4:	f003 fc86 	bl	8004ac4 <HAL_DMA_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_SPI_MspInit+0x11a>
      Error_Handler();
 80011be:	f7ff fef1 	bl	8000fa4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a20      	ldr	r2, [pc, #128]	@ (8001248 <HAL_SPI_MspInit+0x1a0>)
 80011c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80011c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001248 <HAL_SPI_MspInit+0x1a0>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80011ce:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <HAL_SPI_MspInit+0x1a8>)
 80011d0:	4a20      	ldr	r2, [pc, #128]	@ (8001254 <HAL_SPI_MspInit+0x1ac>)
 80011d2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80011d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <HAL_SPI_MspInit+0x1a8>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011da:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <HAL_SPI_MspInit+0x1a8>)
 80011dc:	2210      	movs	r2, #16
 80011de:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <HAL_SPI_MspInit+0x1a8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <HAL_SPI_MspInit+0x1a8>)
 80011e8:	2280      	movs	r2, #128	@ 0x80
 80011ea:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ec:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <HAL_SPI_MspInit+0x1a8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f2:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <HAL_SPI_MspInit+0x1a8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <HAL_SPI_MspInit+0x1a8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011fe:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <HAL_SPI_MspInit+0x1a8>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001204:	4812      	ldr	r0, [pc, #72]	@ (8001250 <HAL_SPI_MspInit+0x1a8>)
 8001206:	f003 fc5d 	bl	8004ac4 <HAL_DMA_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_SPI_MspInit+0x16c>
      Error_Handler();
 8001210:	f7ff fec8 	bl	8000fa4 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a0e      	ldr	r2, [pc, #56]	@ (8001250 <HAL_SPI_MspInit+0x1a8>)
 8001218:	655a      	str	r2, [r3, #84]	@ 0x54
 800121a:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <HAL_SPI_MspInit+0x1a8>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2105      	movs	r1, #5
 8001224:	2024      	movs	r0, #36	@ 0x24
 8001226:	f003 fc16 	bl	8004a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800122a:	2024      	movs	r0, #36	@ 0x24
 800122c:	f003 fc2f 	bl	8004a8e <HAL_NVIC_EnableIRQ>
}
 8001230:	bf00      	nop
 8001232:	3730      	adds	r7, #48	@ 0x30
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40013000 	.word	0x40013000
 800123c:	40021000 	.word	0x40021000
 8001240:	40003800 	.word	0x40003800
 8001244:	48000400 	.word	0x48000400
 8001248:	200010f8 	.word	0x200010f8
 800124c:	40020044 	.word	0x40020044
 8001250:	20001140 	.word	0x20001140
 8001254:	40020058 	.word	0x40020058

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001262:	4a10      	ldr	r2, [pc, #64]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6613      	str	r3, [r2, #96]	@ 0x60
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <HAL_MspInit+0x4c>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127a:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <HAL_MspInit+0x4c>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001280:	6593      	str	r3, [r2, #88]	@ 0x58
 8001282:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	210f      	movs	r1, #15
 8001292:	f06f 0001 	mvn.w	r0, #1
 8001296:	f003 fbde 	bl	8004a56 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <NMI_Handler+0x4>

080012b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <MemManage_Handler+0x4>

080012c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <UsageFault_Handler+0x4>

080012d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e2:	f003 fabd 	bl	8004860 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012e6:	f007 fb35 	bl	8008954 <xTaskGetSchedulerState>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d001      	beq.n	80012f4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012f0:	f008 f92a 	bl	8009548 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <DMA1_Channel4_IRQHandler+0x10>)
 80012fe:	f003 fcda 	bl	8004cb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200010f8 	.word	0x200010f8

0800130c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <DMA1_Channel5_IRQHandler+0x10>)
 8001312:	f003 fcd0 	bl	8004cb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20001140 	.word	0x20001140

08001320 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_ER_IRQn 0 */

  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <SPI2_IRQHandler+0x10>)
 800135e:	f004 fc5d 	bl	8005c1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20001094 	.word	0x20001094

0800136c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	@ (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <config_sensors>:
#define VL53L5CX_FORWARD_I2C_ADDRESS            ((uint16_t)(VL53L5CX_DEFAULT_I2C_ADDRESS*4))
#define VL53L5CX_BACKWARD_I2C_ADDRESS            ((uint16_t)(VL53L5CX_FORWARD_I2C_ADDRESS+2))


bool config_sensors(VL53L5CX_Configuration *p_dev, uint16_t new_i2c_address)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
  p_dev->platform.address = VL53L5CX_DEFAULT_I2C_ADDRESS; // use default adress for first use
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2252      	movs	r2, #82	@ 0x52
 80013e8:	801a      	strh	r2, [r3, #0]

  // initialize the sensor
  uint8_t tof_res = vl53l5cx_init(p_dev);   if (tof_res != VL53L5CX_STATUS_OK) return false ;
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f001 fce8 	bl	8002dc0 <vl53l5cx_init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <config_sensors+0x26>
 80013fa:	2300      	movs	r3, #0
 80013fc:	e04a      	b.n	8001494 <config_sensors+0xbc>
  //DEBUG_PRINT("ToF Config Result: %d \n", tof_init_res);

  // Configurations
  //change i2c address
  tof_res = vl53l5cx_set_i2c_address(p_dev, new_i2c_address);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	4619      	mov	r1, r3
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f002 f948 	bl	8003698 <vl53l5cx_set_i2c_address>
 8001408:	4603      	mov	r3, r0
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <config_sensors+0x3e>
 8001412:	2300      	movs	r3, #0
 8001414:	e03e      	b.n	8001494 <config_sensors+0xbc>
  tof_res = vl53l5cx_set_resolution(p_dev, VL53L5CX_RESOLUTION_8X8);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 8001416:	2140      	movs	r1, #64	@ 0x40
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f002 fd7c 	bl	8003f16 <vl53l5cx_set_resolution>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <config_sensors+0x54>
 8001428:	2300      	movs	r3, #0
 800142a:	e033      	b.n	8001494 <config_sensors+0xbc>
  // 1Hz
  tof_res = vl53l5cx_set_ranging_frequency_hz(p_dev, 1);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 800142c:	2101      	movs	r1, #1
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f002 fe45 	bl	80040be <vl53l5cx_set_ranging_frequency_hz>
 8001434:	4603      	mov	r3, r0
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <config_sensors+0x6a>
 800143e:	2300      	movs	r3, #0
 8001440:	e028      	b.n	8001494 <config_sensors+0xbc>
  tof_res = vl53l5cx_set_target_order(p_dev, VL53L5CX_TARGET_ORDER_CLOSEST);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 8001442:	2101      	movs	r1, #1
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f002 fe5b 	bl	8004100 <vl53l5cx_set_target_order>
 800144a:	4603      	mov	r3, r0
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <config_sensors+0x80>
 8001454:	2300      	movs	r3, #0
 8001456:	e01d      	b.n	8001494 <config_sensors+0xbc>
  tof_res = vl53l5cx_set_ranging_mode(p_dev, VL53L5CX_RANGING_MODE_CONTINUOUS);if (tof_res != VL53L5CX_STATUS_OK) return false ;
 8001458:	2101      	movs	r1, #1
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f002 fe7c 	bl	8004158 <vl53l5cx_set_ranging_mode>
 8001460:	4603      	mov	r3, r0
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <config_sensors+0x96>
 800146a:	2300      	movs	r3, #0
 800146c:	e012      	b.n	8001494 <config_sensors+0xbc>
  //tof_res = vl53l5cx_set_ranging_mode(p_dev, VL53L5CX_RANGING_MODE_AUTONOMOUS);if (tof_res != VL53L5CX_STATUS_OK) return false ;// TODO test it

  //Check for sensor to be alive
  uint8_t isAlive;
  tof_res =vl53l5cx_is_alive(p_dev,&isAlive);if (tof_res != VL53L5CX_STATUS_OK) return false;
 800146e:	f107 030e 	add.w	r3, r7, #14
 8001472:	4619      	mov	r1, r3
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f001 fc59 	bl	8002d2c <vl53l5cx_is_alive>
 800147a:	4603      	mov	r3, r0
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <config_sensors+0xb0>
 8001484:	2300      	movs	r3, #0
 8001486:	e005      	b.n	8001494 <config_sensors+0xbc>
  if (isAlive != 1) return false;
 8001488:	7bbb      	ldrb	r3, [r7, #14]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d001      	beq.n	8001492 <config_sensors+0xba>
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <config_sensors+0xbc>

  // All Good!
  return true;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <initialize_sensors_I2C>:


bool initialize_sensors_I2C(VL53L5CX_Configuration *p_dev, uint8_t mode)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	70fb      	strb	r3, [r7, #3]
  bool status = false;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]

  //reset I2C  //configure pins out/in for forward only

  //status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,I2C_RST_BACKWARD_PIN,I2C_RST_FORWARD_PIN);if (status == false)return status;

  if (mode == 1 && p_dev != NULL){
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d11f      	bne.n	80014f2 <initialize_sensors_I2C+0x56>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d01c      	beq.n	80014f2 <initialize_sensors_I2C+0x56>
    //enable forward only and config
    status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,LPN_FORWARD_PIN | LED_FORWARD_PIN );if (status == false)return status;
 80014b8:	2114      	movs	r1, #20
 80014ba:	2001      	movs	r0, #1
 80014bc:	f000 ff5e 	bl	800237c <I2C_expander_set_register>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f083 0301 	eor.w	r3, r3, #1
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <initialize_sensors_I2C+0x38>
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	e043      	b.n	800155c <initialize_sensors_I2C+0xc0>
    status = config_sensors(p_dev,VL53L5CX_FORWARD_I2C_ADDRESS);if (status == false)return status;
 80014d4:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff7d 	bl	80013d8 <config_sensors>
 80014de:	4603      	mov	r3, r0
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	f083 0301 	eor.w	r3, r3, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <initialize_sensors_I2C+0x56>
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	e034      	b.n	800155c <initialize_sensors_I2C+0xc0>
  }
  if (mode == 2 && p_dev != NULL){
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d11f      	bne.n	8001538 <initialize_sensors_I2C+0x9c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d01c      	beq.n	8001538 <initialize_sensors_I2C+0x9c>
    //enable backward only and config
    status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,LPN_BACKWARD_PIN | LED_BACKWARD_PIN); if (status == false)return status;
 80014fe:	2121      	movs	r1, #33	@ 0x21
 8001500:	2001      	movs	r0, #1
 8001502:	f000 ff3b 	bl	800237c <I2C_expander_set_register>
 8001506:	4603      	mov	r3, r0
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	f083 0301 	eor.w	r3, r3, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <initialize_sensors_I2C+0x7e>
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	e020      	b.n	800155c <initialize_sensors_I2C+0xc0>
    status = config_sensors(p_dev,VL53L5CX_BACKWARD_I2C_ADDRESS);if (status == false)return status;
 800151a:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ff5a 	bl	80013d8 <config_sensors>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	f083 0301 	eor.w	r3, r3, #1
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <initialize_sensors_I2C+0x9c>
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	e011      	b.n	800155c <initialize_sensors_I2C+0xc0>
  }
  //status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,0x00); //all off
  if (mode == 3){
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d10d      	bne.n	800155a <initialize_sensors_I2C+0xbe>
    //enable both forward & backward
    status = I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,LPN_BACKWARD_PIN | LED_BACKWARD_PIN|LPN_FORWARD_PIN | LED_FORWARD_PIN); if (status == false)return status;
 800153e:	2135      	movs	r1, #53	@ 0x35
 8001540:	2001      	movs	r0, #1
 8001542:	f000 ff1b 	bl	800237c <I2C_expander_set_register>
 8001546:	4603      	mov	r3, r0
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	f083 0301 	eor.w	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <initialize_sensors_I2C+0xbe>
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	e000      	b.n	800155c <initialize_sensors_I2C+0xc0>
  }
  return status;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <get_sensor_data>:

bool get_sensor_data(VL53L5CX_Configuration *p_dev,VL53L5CX_ResultsData *p_results){
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]

  // Check  for data ready I2c
  uint8_t ranging_ready = 2;
 800156e:	2302      	movs	r3, #2
 8001570:	73bb      	strb	r3, [r7, #14]
  //ranging_ready --> 0 if data is not ready, or 1 if a new data is ready.
  uint8_t status = vl53l5cx_check_data_ready(p_dev, &ranging_ready);if (status != VL53L5CX_STATUS_OK) return false;
 8001572:	f107 030e 	add.w	r3, r7, #14
 8001576:	4619      	mov	r1, r3
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f002 fa3d 	bl	80039f8 <vl53l5cx_check_data_ready>
 800157e:	4603      	mov	r3, r0
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <get_sensor_data+0x28>
 8001588:	2300      	movs	r3, #0
 800158a:	e010      	b.n	80015ae <get_sensor_data+0x4a>

  // 1 Get data in case it is ready
  if (ranging_ready == 1){
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d10a      	bne.n	80015a8 <get_sensor_data+0x44>
    status = vl53l5cx_get_ranging_data(p_dev, p_results);if (status != VL53L5CX_STATUS_OK) return false;
 8001592:	6839      	ldr	r1, [r7, #0]
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f002 fa7f 	bl	8003a98 <vl53l5cx_get_ranging_data>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <get_sensor_data+0x48>
 80015a4:	2300      	movs	r3, #0
 80015a6:	e002      	b.n	80015ae <get_sensor_data+0x4a>
  }else {
    //0  data in not ready yet
    return false;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e000      	b.n	80015ae <get_sensor_data+0x4a>
  }

  // All good then
  //return false;// TODO deleet
  return true;
 80015ac:	2301      	movs	r3, #1
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <__NVIC_GetPriorityGrouping>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015bc:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <__NVIC_GetPriorityGrouping+0x18>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	f003 0307 	and.w	r3, r3, #7
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_EnableIRQ>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	db0b      	blt.n	80015fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	f003 021f 	and.w	r2, r3, #31
 80015ec:	4907      	ldr	r1, [pc, #28]	@ (800160c <__NVIC_EnableIRQ+0x38>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	2001      	movs	r0, #1
 80015f6:	fa00 f202 	lsl.w	r2, r0, r2
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000e100 	.word	0xe000e100

08001610 <__NVIC_SetPriority>:
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	@ (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	@ (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	@ 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	@ 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <LL_DMA_SetDataTransferDirection>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80016dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001718 <LL_DMA_SetDataTransferDirection+0x4c>)
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	4413      	add	r3, r2
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	4413      	add	r3, r2
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80016f0:	f023 0310 	bic.w	r3, r3, #16
 80016f4:	4908      	ldr	r1, [pc, #32]	@ (8001718 <LL_DMA_SetDataTransferDirection+0x4c>)
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	440a      	add	r2, r1
 80016fa:	7812      	ldrb	r2, [r2, #0]
 80016fc:	4611      	mov	r1, r2
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	440a      	add	r2, r1
 8001702:	4611      	mov	r1, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
}
 800170a:	bf00      	nop
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	08009be8 	.word	0x08009be8

0800171c <LL_DMA_SetMode>:
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 800172c:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <LL_DMA_SetMode+0x48>)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	4413      	add	r3, r2
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	4413      	add	r3, r2
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 0220 	bic.w	r2, r3, #32
 8001740:	4908      	ldr	r1, [pc, #32]	@ (8001764 <LL_DMA_SetMode+0x48>)
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	440b      	add	r3, r1
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	440b      	add	r3, r1
 800174e:	4619      	mov	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
}
 8001756:	bf00      	nop
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	08009be8 	.word	0x08009be8

08001768 <LL_DMA_SetPeriphIncMode>:
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8001778:	4a0d      	ldr	r2, [pc, #52]	@ (80017b0 <LL_DMA_SetPeriphIncMode+0x48>)
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	4413      	add	r3, r2
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800178c:	4908      	ldr	r1, [pc, #32]	@ (80017b0 <LL_DMA_SetPeriphIncMode+0x48>)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	440b      	add	r3, r1
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	440b      	add	r3, r1
 800179a:	4619      	mov	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
}
 80017a2:	bf00      	nop
 80017a4:	371c      	adds	r7, #28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	08009be8 	.word	0x08009be8

080017b4 <LL_DMA_SetMemoryIncMode>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 80017c4:	4a0d      	ldr	r2, [pc, #52]	@ (80017fc <LL_DMA_SetMemoryIncMode+0x48>)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	4413      	add	r3, r2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	4413      	add	r3, r2
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80017d8:	4908      	ldr	r1, [pc, #32]	@ (80017fc <LL_DMA_SetMemoryIncMode+0x48>)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	440b      	add	r3, r1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	440b      	add	r3, r1
 80017e6:	4619      	mov	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
}
 80017ee:	bf00      	nop
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	08009be8 	.word	0x08009be8

08001800 <LL_DMA_SetPeriphSize>:
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <LL_DMA_SetPeriphSize+0x48>)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	4413      	add	r3, r2
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	4413      	add	r3, r2
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001824:	4908      	ldr	r1, [pc, #32]	@ (8001848 <LL_DMA_SetPeriphSize+0x48>)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	440b      	add	r3, r1
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	440b      	add	r3, r1
 8001832:	4619      	mov	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
}
 800183a:	bf00      	nop
 800183c:	371c      	adds	r7, #28
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	08009be8 	.word	0x08009be8

0800184c <LL_DMA_SetMemorySize>:
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <LL_DMA_SetMemorySize+0x48>)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	4413      	add	r3, r2
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	4413      	add	r3, r2
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001870:	4908      	ldr	r1, [pc, #32]	@ (8001894 <LL_DMA_SetMemorySize+0x48>)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	440b      	add	r3, r1
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	440b      	add	r3, r1
 800187e:	4619      	mov	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	08009be8 	.word	0x08009be8

08001898 <LL_DMA_SetChannelPriorityLevel>:
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80018a8:	4a0d      	ldr	r2, [pc, #52]	@ (80018e0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	4413      	add	r3, r2
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	4413      	add	r3, r2
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80018bc:	4908      	ldr	r1, [pc, #32]	@ (80018e0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	440b      	add	r3, r1
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4619      	mov	r1, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	440b      	add	r3, r1
 80018ca:	4619      	mov	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]
}
 80018d2:	bf00      	nop
 80018d4:	371c      	adds	r7, #28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	08009be8 	.word	0x08009be8

080018e4 <LL_DMA_SetPeriphRequest>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	@ 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	33a8      	adds	r3, #168	@ 0xa8
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	210f      	movs	r1, #15
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	401a      	ands	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	210f      	movs	r1, #15
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	617b      	str	r3, [r7, #20]
  return result;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <LL_DMA_SetPeriphRequest+0x42>
    return 32U;
 8001922:	2320      	movs	r3, #32
 8001924:	e003      	b.n	800192e <LL_DMA_SetPeriphRequest+0x4a>
  return __builtin_clz(value);
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fab3 f383 	clz	r3, r3
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4619      	mov	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	408b      	lsls	r3, r1
 8001934:	68f9      	ldr	r1, [r7, #12]
 8001936:	31a8      	adds	r1, #168	@ 0xa8
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
}
 800193c:	bf00      	nop
 800193e:	3724      	adds	r7, #36	@ 0x24
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_RCC_SetUSARTClockSource>:
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <LL_RCC_SetUSARTClockSource+0x30>)
 8001952:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	0c1b      	lsrs	r3, r3, #16
 800195a:	43db      	mvns	r3, r3
 800195c:	401a      	ands	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	b29b      	uxth	r3, r3
 8001962:	4905      	ldr	r1, [pc, #20]	@ (8001978 <LL_RCC_SetUSARTClockSource+0x30>)
 8001964:	4313      	orrs	r3, r2
 8001966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <LL_AHB2_GRP1_EnableClock>:
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001984:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001986:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001988:	4907      	ldr	r1, [pc, #28]	@ (80019a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4313      	orrs	r3, r2
 800198e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001990:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4013      	ands	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	40021000 	.word	0x40021000

080019ac <LL_APB1_GRP1_EnableClock>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019b8:	4907      	ldr	r1, [pc, #28]	@ (80019d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4313      	orrs	r3, r2
 80019be:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4013      	ands	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	40021000 	.word	0x40021000

080019dc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80019e4:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019e8:	4907      	ldr	r1, [pc, #28]	@ (8001a08 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <LL_APB2_GRP1_EnableClock+0x2c>)
 80019f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4013      	ands	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40021000 	.word	0x40021000

08001a0c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	601a      	str	r2, [r3, #0]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08e      	sub	sp, #56	@ 0x38
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
 8001a6e:	615a      	str	r2, [r3, #20]
 8001a70:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8001a82:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001a86:	f7ff ff5f 	bl	8001948 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001a8a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a8e:	f7ff ffa5 	bl	80019dc <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001a92:	2002      	movs	r0, #2
 8001a94:	f7ff ff72 	bl	800197c <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PB6   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001a98:	23c0      	movs	r3, #192	@ 0xc0
 8001a9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001aac:	2307      	movs	r3, #7
 8001aae:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4840      	ldr	r0, [pc, #256]	@ (8001bb8 <MX_USART1_UART_Init+0x160>)
 8001ab6:	f004 fccc 	bl	8006452 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_7, LL_DMA_REQUEST_2);
 8001aba:	2202      	movs	r2, #2
 8001abc:	2106      	movs	r1, #6
 8001abe:	483f      	ldr	r0, [pc, #252]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001ac0:	f7ff ff10 	bl	80018e4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2106      	movs	r1, #6
 8001ac8:	483c      	ldr	r0, [pc, #240]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001aca:	f7ff fdff 	bl	80016cc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2106      	movs	r1, #6
 8001ad2:	483a      	ldr	r0, [pc, #232]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001ad4:	f7ff fee0 	bl	8001898 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2106      	movs	r1, #6
 8001adc:	4837      	ldr	r0, [pc, #220]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001ade:	f7ff fe1d 	bl	800171c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2106      	movs	r1, #6
 8001ae6:	4835      	ldr	r0, [pc, #212]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001ae8:	f7ff fe3e 	bl	8001768 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001aec:	2280      	movs	r2, #128	@ 0x80
 8001aee:	2106      	movs	r1, #6
 8001af0:	4832      	ldr	r0, [pc, #200]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001af2:	f7ff fe5f 	bl	80017b4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2106      	movs	r1, #6
 8001afa:	4830      	ldr	r0, [pc, #192]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001afc:	f7ff fe80 	bl	8001800 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2106      	movs	r1, #6
 8001b04:	482d      	ldr	r0, [pc, #180]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001b06:	f7ff fea1 	bl	800184c <LL_DMA_SetMemorySize>

  /* USART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_2);
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	2105      	movs	r1, #5
 8001b0e:	482b      	ldr	r0, [pc, #172]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001b10:	f7ff fee8 	bl	80018e4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001b14:	2210      	movs	r2, #16
 8001b16:	2105      	movs	r1, #5
 8001b18:	4828      	ldr	r0, [pc, #160]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001b1a:	f7ff fdd7 	bl	80016cc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA2, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2105      	movs	r1, #5
 8001b22:	4826      	ldr	r0, [pc, #152]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001b24:	f7ff feb8 	bl	8001898 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2105      	movs	r1, #5
 8001b2c:	4823      	ldr	r0, [pc, #140]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001b2e:	f7ff fdf5 	bl	800171c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2105      	movs	r1, #5
 8001b36:	4821      	ldr	r0, [pc, #132]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001b38:	f7ff fe16 	bl	8001768 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001b3c:	2280      	movs	r2, #128	@ 0x80
 8001b3e:	2105      	movs	r1, #5
 8001b40:	481e      	ldr	r0, [pc, #120]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001b42:	f7ff fe37 	bl	80017b4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2105      	movs	r1, #5
 8001b4a:	481c      	ldr	r0, [pc, #112]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001b4c:	f7ff fe58 	bl	8001800 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2105      	movs	r1, #5
 8001b54:	4819      	ldr	r0, [pc, #100]	@ (8001bbc <MX_USART1_UART_Init+0x164>)
 8001b56:	f7ff fe79 	bl	800184c <LL_DMA_SetMemorySize>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001b5a:	f7ff fd2d 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2200      	movs	r2, #0
 8001b62:	2105      	movs	r1, #5
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fd7d 	bl	8001664 <NVIC_EncodePriority>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	2025      	movs	r0, #37	@ 0x25
 8001b70:	f7ff fd4e 	bl	8001610 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001b74:	2025      	movs	r0, #37	@ 0x25
 8001b76:	f7ff fd2d 	bl	80015d4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001b7a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001b7e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b8c:	230c      	movs	r3, #12
 8001b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b94:	2300      	movs	r3, #0
 8001b96:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4808      	ldr	r0, [pc, #32]	@ (8001bc0 <MX_USART1_UART_Init+0x168>)
 8001ba0:	f005 f92a 	bl	8006df8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001ba4:	4806      	ldr	r0, [pc, #24]	@ (8001bc0 <MX_USART1_UART_Init+0x168>)
 8001ba6:	f7ff ff41 	bl	8001a2c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001baa:	4805      	ldr	r0, [pc, #20]	@ (8001bc0 <MX_USART1_UART_Init+0x168>)
 8001bac:	f7ff ff2e 	bl	8001a0c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	3738      	adds	r7, #56	@ 0x38
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	48000400 	.word	0x48000400
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40013800 	.word	0x40013800

08001bc4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08e      	sub	sp, #56	@ 0x38
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]
 8001bda:	615a      	str	r2, [r3, #20]
 8001bdc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
 8001bec:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001bee:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8001bf2:	f7ff fea9 	bl	8001948 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001bf6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001bfa:	f7ff fed7 	bl	80019ac <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f7ff febc 	bl	800197c <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001c04:	230c      	movs	r3, #12
 8001c06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001c18:	2307      	movs	r3, #7
 8001c1a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c24:	f004 fc15 	bl	8006452 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001c28:	f7ff fcc6 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2105      	movs	r1, #5
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fd16 	bl	8001664 <NVIC_EncodePriority>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	2026      	movs	r0, #38	@ 0x26
 8001c3e:	f7ff fce7 	bl	8001610 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001c42:	2026      	movs	r0, #38	@ 0x26
 8001c44:	f7ff fcc6 	bl	80015d4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001c48:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001c4c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001c5a:	230c      	movs	r3, #12
 8001c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001c62:	2300      	movs	r3, #0
 8001c64:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4806      	ldr	r0, [pc, #24]	@ (8001c88 <MX_USART2_UART_Init+0xc4>)
 8001c6e:	f005 f8c3 	bl	8006df8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001c72:	4805      	ldr	r0, [pc, #20]	@ (8001c88 <MX_USART2_UART_Init+0xc4>)
 8001c74:	f7ff feda 	bl	8001a2c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001c78:	4803      	ldr	r0, [pc, #12]	@ (8001c88 <MX_USART2_UART_Init+0xc4>)
 8001c7a:	f7ff fec7 	bl	8001a0c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	3738      	adds	r7, #56	@ 0x38
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40004400 	.word	0x40004400

08001c8c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08e      	sub	sp, #56	@ 0x38
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	615a      	str	r2, [r3, #20]
 8001ca4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
 8001cb4:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART3_CLKSOURCE_PCLK1);
 8001cb6:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8001cba:	f7ff fe45 	bl	8001948 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001cbe:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8001cc2:	f7ff fe73 	bl	80019ac <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f7ff fe58 	bl	800197c <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8001ccc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001cd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4819      	ldr	r0, [pc, #100]	@ (8001d50 <MX_USART3_UART_Init+0xc4>)
 8001cec:	f004 fbb1 	bl	8006452 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001cf0:	f7ff fc62 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fcb2 	bl	8001664 <NVIC_EncodePriority>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4619      	mov	r1, r3
 8001d04:	2027      	movs	r0, #39	@ 0x27
 8001d06:	f7ff fc83 	bl	8001610 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8001d0a:	2027      	movs	r0, #39	@ 0x27
 8001d0c:	f7ff fc62 	bl	80015d4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001d10:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001d14:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001d22:	230c      	movs	r3, #12
 8001d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	4619      	mov	r1, r3
 8001d34:	4807      	ldr	r0, [pc, #28]	@ (8001d54 <MX_USART3_UART_Init+0xc8>)
 8001d36:	f005 f85f 	bl	8006df8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001d3a:	4806      	ldr	r0, [pc, #24]	@ (8001d54 <MX_USART3_UART_Init+0xc8>)
 8001d3c:	f7ff fe76 	bl	8001a2c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001d40:	4804      	ldr	r0, [pc, #16]	@ (8001d54 <MX_USART3_UART_Init+0xc8>)
 8001d42:	f7ff fe63 	bl	8001a0c <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	3738      	adds	r7, #56	@ 0x38
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	48000400 	.word	0x48000400
 8001d54:	40004800 	.word	0x40004800

08001d58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d5c:	f7ff fb2a 	bl	80013b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d62:	490d      	ldr	r1, [pc, #52]	@ (8001d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d64:	4a0d      	ldr	r2, [pc, #52]	@ (8001d9c <LoopForever+0xe>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d68:	e002      	b.n	8001d70 <LoopCopyDataInit>

08001d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6e:	3304      	adds	r3, #4

08001d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d74:	d3f9      	bcc.n	8001d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d76:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d78:	4c0a      	ldr	r4, [pc, #40]	@ (8001da4 <LoopForever+0x16>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d7c:	e001      	b.n	8001d82 <LoopFillZerobss>

08001d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d80:	3204      	adds	r2, #4

08001d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d84:	d3fb      	bcc.n	8001d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d86:	f007 fe67 	bl	8009a58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d8a:	f7ff f89f 	bl	8000ecc <main>

08001d8e <LoopForever>:

LoopForever:
    b LoopForever
 8001d8e:	e7fe      	b.n	8001d8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d9c:	0801f2fc 	.word	0x0801f2fc
  ldr r2, =_sbss
 8001da0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001da4:	20002a94 	.word	0x20002a94

08001da8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC1_IRQHandler>

08001daa <LL_I2C_EnableDMAReq_TX>:
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_TXDMAEN);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	601a      	str	r2, [r3, #0]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_I2C_EnableDMAReq_RX>:
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXDMAEN);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	601a      	str	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_I2C_DMA_GetRegAddr>:
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
  if (Direction == LL_I2C_DMA_REG_DATA_TRANSMIT)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <LL_I2C_DMA_GetRegAddr+0x18>
    data_reg_addr = (uint32_t) &(I2Cx->TXDR);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3328      	adds	r3, #40	@ 0x28
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	e002      	b.n	8001e08 <LL_I2C_DMA_GetRegAddr+0x1e>
    data_reg_addr = (uint32_t) &(I2Cx->RXDR);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3324      	adds	r3, #36	@ 0x24
 8001e06:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 8001e08:	68fb      	ldr	r3, [r7, #12]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_I2C_IsActiveFlag_TXE>:
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <LL_I2C_IsActiveFlag_TXE+0x18>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <LL_I2C_IsActiveFlag_TXE+0x1a>
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_I2C_IsActiveFlag_STOP>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d101      	bne.n	8001e54 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_I2C_IsActiveFlag_BUSY>:
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e76:	d101      	bne.n	8001e7c <LL_I2C_IsActiveFlag_BUSY+0x1a>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <LL_I2C_IsActiveFlag_BUSY+0x1c>
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_I2C_ClearFlag_STOP>:
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f043 0220 	orr.w	r2, r3, #32
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	61da      	str	r2, [r3, #28]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_I2C_ClearFlag_TXE>:
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  WRITE_REG(I2Cx->ISR, I2C_ISR_TXE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	619a      	str	r2, [r3, #24]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	0d5b      	lsrs	r3, r3, #21
 8001eda:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <LL_I2C_HandleTransfer+0x48>)
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4319      	orrs	r1, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	041b      	lsls	r3, r3, #16
 8001ef0:	4319      	orrs	r1, r3
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	4319      	orrs	r1, r3
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	431a      	orrs	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	03ff7bff 	.word	0x03ff7bff

08001f10 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <LL_DMA_EnableChannel>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001f3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f70 <LL_DMA_EnableChannel+0x40>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4908      	ldr	r1, [pc, #32]	@ (8001f70 <LL_DMA_EnableChannel+0x40>)
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	440a      	add	r2, r1
 8001f54:	7812      	ldrb	r2, [r2, #0]
 8001f56:	4611      	mov	r1, r2
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	440a      	add	r2, r1
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6013      	str	r3, [r2, #0]
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	08009bf0 	.word	0x08009bf0

08001f74 <LL_DMA_DisableChannel>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001f82:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb4 <LL_DMA_DisableChannel+0x40>)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4413      	add	r3, r2
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4908      	ldr	r1, [pc, #32]	@ (8001fb4 <LL_DMA_DisableChannel+0x40>)
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	440a      	add	r2, r1
 8001f98:	7812      	ldrb	r2, [r2, #0]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	440a      	add	r2, r1
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6013      	str	r3, [r2, #0]
}
 8001fa6:	bf00      	nop
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	08009bf0 	.word	0x08009bf0

08001fb8 <LL_DMA_SetDataLength>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002000 <LL_DMA_SetDataLength+0x48>)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	4413      	add	r3, r2
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	041b      	lsls	r3, r3, #16
 8001fdc:	4908      	ldr	r1, [pc, #32]	@ (8002000 <LL_DMA_SetDataLength+0x48>)
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	440a      	add	r2, r1
 8001fe2:	7812      	ldrb	r2, [r2, #0]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	440a      	add	r2, r1
 8001fea:	4611      	mov	r1, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
}
 8001ff2:	bf00      	nop
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	08009bf0 	.word	0x08009bf0

08002004 <LL_DMA_ConfigAddresses>:
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	2b10      	cmp	r3, #16
 800201a:	d114      	bne.n	8002046 <LL_DMA_ConfigAddresses+0x42>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 800201c:	4a17      	ldr	r2, [pc, #92]	@ (800207c <LL_DMA_ConfigAddresses+0x78>)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4413      	add	r3, r2
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	4413      	add	r3, r2
 800202a:	461a      	mov	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8002030:	4a12      	ldr	r2, [pc, #72]	@ (800207c <LL_DMA_ConfigAddresses+0x78>)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	4413      	add	r3, r2
 800203e:	461a      	mov	r2, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	6093      	str	r3, [r2, #8]
}
 8002044:	e013      	b.n	800206e <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8002046:	4a0d      	ldr	r2, [pc, #52]	@ (800207c <LL_DMA_ConfigAddresses+0x78>)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4413      	add	r3, r2
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	4413      	add	r3, r2
 8002054:	461a      	mov	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 800205a:	4a08      	ldr	r2, [pc, #32]	@ (800207c <LL_DMA_ConfigAddresses+0x78>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4413      	add	r3, r2
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	4413      	add	r3, r2
 8002068:	461a      	mov	r2, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	60d3      	str	r3, [r2, #12]
}
 800206e:	bf00      	nop
 8002070:	371c      	adds	r7, #28
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	08009bf0 	.word	0x08009bf0

08002080 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002090:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002094:	d101      	bne.n	800209a <LL_DMA_IsActiveFlag_TC6+0x1a>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <LL_DMA_IsActiveFlag_TC6+0x1c>
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7)) ? 1UL : 0UL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020bc:	d101      	bne.n	80020c2 <LL_DMA_IsActiveFlag_TC7+0x1a>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <LL_DMA_IsActiveFlag_TC7+0x1c>
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <i2cdevWriteReg8>:
 *         - SUCCESS:
 *         - ERROR:   Not applicable
 * */

ErrorStatus i2cdevWriteReg8(I2C_TypeDef *I2Cx , uint8_t SlaveAddr_IC , uint8_t target_reg , uint8_t value)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	4608      	mov	r0, r1
 80020da:	4611      	mov	r1, r2
 80020dc:	461a      	mov	r2, r3
 80020de:	4603      	mov	r3, r0
 80020e0:	70fb      	strb	r3, [r7, #3]
 80020e2:	460b      	mov	r3, r1
 80020e4:	70bb      	strb	r3, [r7, #2]
 80020e6:	4613      	mov	r3, r2
 80020e8:	707b      	strb	r3, [r7, #1]
	//Address process
	SlaveAddr_IC = SlaveAddr_IC<<1;
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	70fb      	strb	r3, [r7, #3]

	//I2C wait for : BUS BUSY
	uint32_t counter = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
	while(LL_I2C_IsActiveFlag_BUSY(I2Cx) == SET){
 80020f4:	e00b      	b.n	800210e <i2cdevWriteReg8+0x3e>
		counter++;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	3301      	adds	r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
		if( counter == 25000 ) {
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002102:	4293      	cmp	r3, r2
 8002104:	d103      	bne.n	800210e <i2cdevWriteReg8+0x3e>
			Error_Handler();
 8002106:	f7fe ff4d 	bl	8000fa4 <Error_Handler>
			return 0xFF;
 800210a:	23ff      	movs	r3, #255	@ 0xff
 800210c:	e04b      	b.n	80021a6 <i2cdevWriteReg8+0xd6>
	while(LL_I2C_IsActiveFlag_BUSY(I2Cx) == SET){
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fea7 	bl	8001e62 <LL_I2C_IsActiveFlag_BUSY>
 8002114:	4603      	mov	r3, r0
 8002116:	2b01      	cmp	r3, #1
 8002118:	d0ed      	beq.n	80020f6 <i2cdevWriteReg8+0x26>
		}
	}

	LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800211a:	78f9      	ldrb	r1, [r7, #3]
 800211c:	4b24      	ldr	r3, [pc, #144]	@ (80021b0 <i2cdevWriteReg8+0xe0>)
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	2302      	movs	r3, #2
 8002128:	2200      	movs	r2, #0
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff feca 	bl	8001ec4 <LL_I2C_HandleTransfer>

	//I2C wait for : TX REG BUSY AND CLEAR
	while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);
 8002130:	bf00      	nop
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff fe6f 	bl	8001e16 <LL_I2C_IsActiveFlag_TXE>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f9      	beq.n	8002132 <i2cdevWriteReg8+0x62>

    LL_I2C_TransmitData8(I2Cx, target_reg);
 800213e:	78bb      	ldrb	r3, [r7, #2]
 8002140:	4619      	mov	r1, r3
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fee4 	bl	8001f10 <LL_I2C_TransmitData8>

	//I2C wait for : TX REG BUSY AND CLEAR
    counter=0;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
 800214c:	e00e      	b.n	800216c <i2cdevWriteReg8+0x9c>
        counter++;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3301      	adds	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
        if( counter == 25000 ){
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800215a:	4293      	cmp	r3, r2
 800215c:	d106      	bne.n	800216c <i2cdevWriteReg8+0x9c>
            LL_I2C_ClearFlag_TXE(I2Cx);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fea3 	bl	8001eaa <LL_I2C_ClearFlag_TXE>
            Error_Handler();
 8002164:	f7fe ff1e 	bl	8000fa4 <Error_Handler>
            return ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e01c      	b.n	80021a6 <i2cdevWriteReg8+0xd6>
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET){
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fe52 	bl	8001e16 <LL_I2C_IsActiveFlag_TXE>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0ea      	beq.n	800214e <i2cdevWriteReg8+0x7e>
        }
    }

    LL_I2C_TransmitData8(I2Cx, value);
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	4619      	mov	r1, r3
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff fec7 	bl	8001f10 <LL_I2C_TransmitData8>

	//I2C wait for : TX REG BUSY AND CLEAR
    while(LL_I2C_IsActiveFlag_TXE(I2Cx)==RESET);
 8002182:	bf00      	nop
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff fe46 	bl	8001e16 <LL_I2C_IsActiveFlag_TXE>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f9      	beq.n	8002184 <i2cdevWriteReg8+0xb4>

    //I2C wait for : STOP CLEAR
    while(LL_I2C_IsActiveFlag_STOP(I2Cx)==RESET);
 8002190:	bf00      	nop
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fe52 	bl	8001e3c <LL_I2C_IsActiveFlag_STOP>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f9      	beq.n	8002192 <i2cdevWriteReg8+0xc2>

    LL_I2C_ClearFlag_STOP(I2Cx);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fe73 	bl	8001e8a <LL_I2C_ClearFlag_STOP>

    return SUCCESS;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	80002000 	.word	0x80002000

080021b4 <i2cdevReadReg16>:
 * */
void i2cdevReadReg16(I2C_TypeDef *I2Cx ,
						uint8_t SlaveAddr_IC ,
						uint16_t target_reg,
						uint8_t *p_values,
						uint32_t size){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	72fb      	strb	r3, [r7, #11]
 80021c2:	4613      	mov	r3, r2
 80021c4:	813b      	strh	r3, [r7, #8]

	//Address process
	SlaveAddr_IC = SlaveAddr_IC<<1;
 80021c6:	7afb      	ldrb	r3, [r7, #11]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	72fb      	strb	r3, [r7, #11]

	LL_I2C_IsActiveFlag_BUSY(I2Cx);
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7ff fe48 	bl	8001e62 <LL_I2C_IsActiveFlag_BUSY>
	LL_I2C_HandleTransfer(I2Cx , SlaveAddr_IC , LL_I2C_ADDRSLAVE_7BIT , 2 , LL_I2C_MODE_AUTOEND , LL_I2C_GENERATE_START_WRITE);
 80021d2:	7af9      	ldrb	r1, [r7, #11]
 80021d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002290 <i2cdevReadReg16+0xdc>)
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	2302      	movs	r3, #2
 80021e0:	2200      	movs	r2, #0
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7ff fe6e 	bl	8001ec4 <LL_I2C_HandleTransfer>
	//Send the Address
	LL_I2C_TransmitData8(I2Cx, (uint8_t)(target_reg >> 8));
 80021e8:	893b      	ldrh	r3, [r7, #8]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4619      	mov	r1, r3
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff fe8c 	bl	8001f10 <LL_I2C_TransmitData8>

	while (!LL_I2C_IsActiveFlag_TXE(I2Cx));
 80021f8:	bf00      	nop
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7ff fe0b 	bl	8001e16 <LL_I2C_IsActiveFlag_TXE>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f9      	beq.n	80021fa <i2cdevReadReg16+0x46>

	LL_I2C_TransmitData8(I2Cx, (uint8_t)(target_reg & 0xFF));
 8002206:	893b      	ldrh	r3, [r7, #8]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	4619      	mov	r1, r3
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f7ff fe7f 	bl	8001f10 <LL_I2C_TransmitData8>

	while (!LL_I2C_IsActiveFlag_TXE(I2Cx));
 8002212:	bf00      	nop
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff fdfe 	bl	8001e16 <LL_I2C_IsActiveFlag_TXE>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f9      	beq.n	8002214 <i2cdevReadReg16+0x60>

	//Send the Data
	LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC, LL_I2C_ADDRSLAVE_7BIT, size ,LL_I2C_MODE_AUTOEND ,LL_I2C_GENERATE_START_READ);
 8002220:	7af9      	ldrb	r1, [r7, #11]
 8002222:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <i2cdevReadReg16+0xe0>)
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2200      	movs	r2, #0
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff fe47 	bl	8001ec4 <LL_I2C_HandleTransfer>

	//I2C DMA Transfer
	LL_DMA_ConfigAddresses(DMA1,
 8002236:	2101      	movs	r1, #1
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f7ff fdd6 	bl	8001dea <LL_I2C_DMA_GetRegAddr>
 800223e:	4602      	mov	r2, r0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2100      	movs	r1, #0
 8002244:	9100      	str	r1, [sp, #0]
 8002246:	2106      	movs	r1, #6
 8002248:	4813      	ldr	r0, [pc, #76]	@ (8002298 <i2cdevReadReg16+0xe4>)
 800224a:	f7ff fedb 	bl	8002004 <LL_DMA_ConfigAddresses>
						   LL_DMA_CHANNEL_7,
						   LL_I2C_DMA_GetRegAddr(I2Cx,LL_I2C_DMA_REG_DATA_RECEIVE),
						   (uint32_t)p_values,
						   LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, size);
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	2106      	movs	r1, #6
 8002252:	4811      	ldr	r0, [pc, #68]	@ (8002298 <i2cdevReadReg16+0xe4>)
 8002254:	f7ff feb0 	bl	8001fb8 <LL_DMA_SetDataLength>
    LL_I2C_EnableDMAReq_RX(I2Cx);
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f7ff fdb6 	bl	8001dca <LL_I2C_EnableDMAReq_RX>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 800225e:	2106      	movs	r1, #6
 8002260:	480d      	ldr	r0, [pc, #52]	@ (8002298 <i2cdevReadReg16+0xe4>)
 8002262:	f7ff fe65 	bl	8001f30 <LL_DMA_EnableChannel>

    //Debug problem :TBD
    osDelay(10);
 8002266:	200a      	movs	r0, #10
 8002268:	f004 ff4c 	bl	8007104 <osDelay>
    while(!LL_DMA_IsActiveFlag_TC7(DMA1));
 800226c:	bf00      	nop
 800226e:	480a      	ldr	r0, [pc, #40]	@ (8002298 <i2cdevReadReg16+0xe4>)
 8002270:	f7ff ff1a 	bl	80020a8 <LL_DMA_IsActiveFlag_TC7>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f9      	beq.n	800226e <i2cdevReadReg16+0xba>
    //TBD: double check if need Stop clear here.
    LL_I2C_ClearFlag_STOP(I2Cx);
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7ff fe05 	bl	8001e8a <LL_I2C_ClearFlag_STOP>
    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002280:	2106      	movs	r1, #6
 8002282:	4805      	ldr	r0, [pc, #20]	@ (8002298 <i2cdevReadReg16+0xe4>)
 8002284:	f7ff fe76 	bl	8001f74 <LL_DMA_DisableChannel>

}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	80002000 	.word	0x80002000
 8002294:	80002400 	.word	0x80002400
 8002298:	40020000 	.word	0x40020000

0800229c <i2cdevWriteReg16>:

void i2cdevWriteReg16(I2C_TypeDef *I2Cx,
                      uint8_t SlaveAddr_IC,
                      uint16_t target_reg,
                      uint8_t *p_values,
                      uint32_t size) {
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b087      	sub	sp, #28
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	72fb      	strb	r3, [r7, #11]
 80022aa:	4613      	mov	r3, r2
 80022ac:	813b      	strh	r3, [r7, #8]
    // Shift the Slave Address left by 1
    SlaveAddr_IC = SlaveAddr_IC << 1;
 80022ae:	7afb      	ldrb	r3, [r7, #11]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	72fb      	strb	r3, [r7, #11]

    // Ensure the I2C bus is not busy before starting a new transfer
    while (LL_I2C_IsActiveFlag_BUSY(I2Cx));
 80022b4:	bf00      	nop
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f7ff fdd3 	bl	8001e62 <LL_I2C_IsActiveFlag_BUSY>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f9      	bne.n	80022b6 <i2cdevWriteReg16+0x1a>

    // Begin the I2C write transfer to send the target register address
    LL_I2C_HandleTransfer(I2Cx, SlaveAddr_IC, LL_I2C_ADDRSLAVE_7BIT, 2+size, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80022c2:	7af9      	ldrb	r1, [r7, #11]
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	3302      	adds	r3, #2
 80022c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002374 <i2cdevWriteReg16+0xd8>)
 80022ca:	9201      	str	r2, [sp, #4]
 80022cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022d0:	9200      	str	r2, [sp, #0]
 80022d2:	2200      	movs	r2, #0
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f7ff fdf5 	bl	8001ec4 <LL_I2C_HandleTransfer>

    // Send the high byte of the register address
    LL_I2C_TransmitData8(I2Cx, (uint8_t)(target_reg >> 8));
 80022da:	893b      	ldrh	r3, [r7, #8]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	b29b      	uxth	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	4619      	mov	r1, r3
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f7ff fe13 	bl	8001f10 <LL_I2C_TransmitData8>

    // Wait until the data transmission is complete
    while (!LL_I2C_IsActiveFlag_TXE(I2Cx));
 80022ea:	bf00      	nop
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff fd92 	bl	8001e16 <LL_I2C_IsActiveFlag_TXE>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f9      	beq.n	80022ec <i2cdevWriteReg16+0x50>

    // Send the low byte of the register address
    LL_I2C_TransmitData8(I2Cx, (uint8_t)(target_reg & 0xFF));
 80022f8:	893b      	ldrh	r3, [r7, #8]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	4619      	mov	r1, r3
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f7ff fe06 	bl	8001f10 <LL_I2C_TransmitData8>

    // Wait until the data transmission is complete
    while (!LL_I2C_IsActiveFlag_TXE(I2Cx));
 8002304:	bf00      	nop
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff fd85 	bl	8001e16 <LL_I2C_IsActiveFlag_TXE>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f9      	beq.n	8002306 <i2cdevWriteReg16+0x6a>
//    //I2C wait for : STOP CLEAR
//    while(LL_I2C_IsActiveFlag_STOP(I2Cx)==RESET);


    // Initiate the I2C transfer to send data with DMA
    LL_DMA_ConfigAddresses(DMA1,
 8002312:	687c      	ldr	r4, [r7, #4]
 8002314:	2100      	movs	r1, #0
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f7ff fd67 	bl	8001dea <LL_I2C_DMA_GetRegAddr>
 800231c:	4603      	mov	r3, r0
 800231e:	2210      	movs	r2, #16
 8002320:	9200      	str	r2, [sp, #0]
 8002322:	4622      	mov	r2, r4
 8002324:	2105      	movs	r1, #5
 8002326:	4814      	ldr	r0, [pc, #80]	@ (8002378 <i2cdevWriteReg16+0xdc>)
 8002328:	f7ff fe6c 	bl	8002004 <LL_DMA_ConfigAddresses>
                           LL_DMA_CHANNEL_6,
                           (uint32_t)p_values,
                           LL_I2C_DMA_GetRegAddr(I2Cx, LL_I2C_DMA_REG_DATA_TRANSMIT),
                           LL_DMA_DIRECTION_MEMORY_TO_PERIPH);

    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, size);
 800232c:	6a3a      	ldr	r2, [r7, #32]
 800232e:	2105      	movs	r1, #5
 8002330:	4811      	ldr	r0, [pc, #68]	@ (8002378 <i2cdevWriteReg16+0xdc>)
 8002332:	f7ff fe41 	bl	8001fb8 <LL_DMA_SetDataLength>
    LL_I2C_EnableDMAReq_TX(I2Cx);
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7ff fd37 	bl	8001daa <LL_I2C_EnableDMAReq_TX>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800233c:	2105      	movs	r1, #5
 800233e:	480e      	ldr	r0, [pc, #56]	@ (8002378 <i2cdevWriteReg16+0xdc>)
 8002340:	f7ff fdf6 	bl	8001f30 <LL_DMA_EnableChannel>

    osDelay(10);
 8002344:	200a      	movs	r0, #10
 8002346:	f004 fedd 	bl	8007104 <osDelay>
    // Wait briefly to ensure DMA starts properly
    while(!LL_DMA_IsActiveFlag_TC6(DMA1));
 800234a:	bf00      	nop
 800234c:	480a      	ldr	r0, [pc, #40]	@ (8002378 <i2cdevWriteReg16+0xdc>)
 800234e:	f7ff fe97 	bl	8002080 <LL_DMA_IsActiveFlag_TC6>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f9      	beq.n	800234c <i2cdevWriteReg16+0xb0>

    // Clear STOP flag to avoid any unwanted stoppage
    LL_I2C_ClearFlag_STOP(I2Cx);
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f7ff fd96 	bl	8001e8a <LL_I2C_ClearFlag_STOP>

    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 800235e:	2105      	movs	r1, #5
 8002360:	4805      	ldr	r0, [pc, #20]	@ (8002378 <i2cdevWriteReg16+0xdc>)
 8002362:	f7ff fe07 	bl	8001f74 <LL_DMA_DisableChannel>

    // Clear STOP flag at the end of the transfer
    LL_I2C_ClearFlag_STOP(I2Cx);
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f7ff fd8f 	bl	8001e8a <LL_I2C_ClearFlag_STOP>
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bd90      	pop	{r4, r7, pc}
 8002374:	80002000 	.word	0x80002000
 8002378:	40020000 	.word	0x40020000

0800237c <I2C_expander_set_register>:
#include "i2c_drv.h"

#include "tca6408a.h"

bool I2C_expander_set_register(uint8_t reg_address,uint8_t reg_value)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	460a      	mov	r2, r1
 8002386:	71fb      	strb	r3, [r7, #7]
 8002388:	4613      	mov	r3, r2
 800238a:	71bb      	strb	r3, [r7, #6]
	i2cdevWriteReg8(I2C1, I2C_EXPANDER_DEFAULT_I2C_ADDRESS, reg_address, reg_value);
 800238c:	79bb      	ldrb	r3, [r7, #6]
 800238e:	79fa      	ldrb	r2, [r7, #7]
 8002390:	2120      	movs	r1, #32
 8002392:	4804      	ldr	r0, [pc, #16]	@ (80023a4 <I2C_expander_set_register+0x28>)
 8002394:	f7ff fe9c 	bl	80020d0 <i2cdevWriteReg8>

	return true;
 8002398:	2301      	movs	r3, #1
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40005400 	.word	0x40005400

080023a8 <I2C_expander_initialize>:

    return true;
}

bool I2C_expander_initialize()
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
    uint8_t reg_value;

    //set all outputs zero
    reg_value = 0x30; // 1-->on, 0-->off
 80023ae:	2330      	movs	r3, #48	@ 0x30
 80023b0:	71fb      	strb	r3, [r7, #7]
    I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,0x00);
 80023b2:	2100      	movs	r1, #0
 80023b4:	2001      	movs	r0, #1
 80023b6:	f7ff ffe1 	bl	800237c <I2C_expander_set_register>

    //configure inversion all 0
    reg_value = 0x00; // 1-->inveritng, 0-->non-inveritng
 80023ba:	2300      	movs	r3, #0
 80023bc:	71fb      	strb	r3, [r7, #7]
    i2cdevWriteReg8(I2C1, I2C_EXPANDER_DEFAULT_I2C_ADDRESS, POLARITY_INVERSION_REG_ADDRESS, reg_value);
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	2202      	movs	r2, #2
 80023c2:	2120      	movs	r1, #32
 80023c4:	480a      	ldr	r0, [pc, #40]	@ (80023f0 <I2C_expander_initialize+0x48>)
 80023c6:	f7ff fe83 	bl	80020d0 <i2cdevWriteReg8>

    //configure pins out/in
    reg_value = INTERRUPT_SENSE_BACKWARD_PIN|INTERRUPT_SENSE_FORWARD_PIN; // 1-->input, 0-->output
 80023ca:	23c0      	movs	r3, #192	@ 0xc0
 80023cc:	71fb      	strb	r3, [r7, #7]
    i2cdevWriteReg8(I2C1, I2C_EXPANDER_DEFAULT_I2C_ADDRESS, CONFIGURATION_REG_ADDRESS, reg_value);
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	2203      	movs	r2, #3
 80023d2:	2120      	movs	r1, #32
 80023d4:	4806      	ldr	r0, [pc, #24]	@ (80023f0 <I2C_expander_initialize+0x48>)
 80023d6:	f7ff fe7b 	bl	80020d0 <i2cdevWriteReg8>

    reg_value=LPN_FORWARD_PIN | LED_FORWARD_PIN;
 80023da:	2314      	movs	r3, #20
 80023dc:	71fb      	strb	r3, [r7, #7]
    I2C_expander_set_register(OUTPUT_PORT_REG_ADDRESS,LPN_FORWARD_PIN | LED_FORWARD_PIN );
 80023de:	2114      	movs	r1, #20
 80023e0:	2001      	movs	r0, #1
 80023e2:	f7ff ffcb 	bl	800237c <I2C_expander_set_register>

    return true;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40005400 	.word	0x40005400

080023f4 <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	460b      	mov	r3, r1
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	817b      	strh	r3, [r7, #10]
	uint16_t Address= (p_platform->address)>>1;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	085b      	lsrs	r3, r3, #1
 8002408:	82fb      	strh	r3, [r7, #22]
	i2cdevReadReg16(I2C1, Address, RegisterAdress, p_value, 1);
 800240a:	8afb      	ldrh	r3, [r7, #22]
 800240c:	b2d9      	uxtb	r1, r3
 800240e:	897a      	ldrh	r2, [r7, #10]
 8002410:	2301      	movs	r3, #1
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4804      	ldr	r0, [pc, #16]	@ (8002428 <RdByte+0x34>)
 8002418:	f7ff fecc 	bl	80021b4 <i2cdevReadReg16>
	return 0;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40005400 	.word	0x40005400

0800242c <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af02      	add	r7, sp, #8
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
	uint8_t rx_buffer[1];
	rx_buffer[0]=value;
 800243c:	787b      	ldrb	r3, [r7, #1]
 800243e:	733b      	strb	r3, [r7, #12]
	uint16_t Address= (p_platform->address)>>1;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	81fb      	strh	r3, [r7, #14]
	i2cdevWriteReg16(I2C1, Address, RegisterAdress, rx_buffer, 1);
 8002448:	89fb      	ldrh	r3, [r7, #14]
 800244a:	b2d9      	uxtb	r1, r3
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	887a      	ldrh	r2, [r7, #2]
 8002452:	2001      	movs	r0, #1
 8002454:	9000      	str	r0, [sp, #0]
 8002456:	4804      	ldr	r0, [pc, #16]	@ (8002468 <WrByte+0x3c>)
 8002458:	f7ff ff20 	bl	800229c <i2cdevWriteReg16>
	return 0;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40005400 	.word	0x40005400

0800246c <WrMulti>:
uint8_t WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	@ 0x28
 8002470:	af02      	add	r7, sp, #8
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	460b      	mov	r3, r1
 800247a:	817b      	strh	r3, [r7, #10]
	uint16_t Address= (p_platform->address)>>1;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	833b      	strh	r3, [r7, #24]
	uint32_t remaining_size = size;  // Calculate remaining size to write
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	61fb      	str	r3, [r7, #28]
    uint16_t current_address =RegisterAdress;  // Initialize current address
 8002488:	897b      	ldrh	r3, [r7, #10]
 800248a:	837b      	strh	r3, [r7, #26]
	while(remaining_size> 0){
 800248c:	e01d      	b.n	80024ca <WrMulti+0x5e>
		uint32_t current_chunk_size = (remaining_size > chunk_size) ? chunk_size : remaining_size;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	2b80      	cmp	r3, #128	@ 0x80
 8002492:	bf28      	it	cs
 8002494:	2380      	movcs	r3, #128	@ 0x80
 8002496:	617b      	str	r3, [r7, #20]
		i2cdevWriteReg16(I2C1, Address, current_address, p_values, current_chunk_size);
 8002498:	8b3b      	ldrh	r3, [r7, #24]
 800249a:	b2d9      	uxtb	r1, r3
 800249c:	8b7a      	ldrh	r2, [r7, #26]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	480d      	ldr	r0, [pc, #52]	@ (80024dc <WrMulti+0x70>)
 80024a6:	f7ff fef9 	bl	800229c <i2cdevWriteReg16>
		remaining_size-= current_chunk_size;
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	61fb      	str	r3, [r7, #28]
		current_address+=current_chunk_size;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	8b7b      	ldrh	r3, [r7, #26]
 80024b8:	4413      	add	r3, r2
 80024ba:	837b      	strh	r3, [r7, #26]
		p_values+= current_chunk_size;
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	4413      	add	r3, r2
 80024c2:	607b      	str	r3, [r7, #4]
		osDelay(10);
 80024c4:	200a      	movs	r0, #10
 80024c6:	f004 fe1d 	bl	8007104 <osDelay>
	while(remaining_size> 0){
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1de      	bne.n	800248e <WrMulti+0x22>
	}

	return 0;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40005400 	.word	0x40005400

080024e0 <RdMulti>:
uint8_t RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	@ 0x28
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	460b      	mov	r3, r1
 80024ee:	817b      	strh	r3, [r7, #10]
	uint16_t Address= (p_platform->address)>>1;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	833b      	strh	r3, [r7, #24]
	uint32_t remaining_size = size;  // Calculate remaining size to write
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	61fb      	str	r3, [r7, #28]
	uint16_t current_address =RegisterAdress;  // Initialize current address
 80024fc:	897b      	ldrh	r3, [r7, #10]
 80024fe:	837b      	strh	r3, [r7, #26]
	while(remaining_size> 0){
 8002500:	e01d      	b.n	800253e <RdMulti+0x5e>
		uint32_t current_chunk_size = (remaining_size > chunk_size) ? chunk_size : remaining_size;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	2b80      	cmp	r3, #128	@ 0x80
 8002506:	bf28      	it	cs
 8002508:	2380      	movcs	r3, #128	@ 0x80
 800250a:	617b      	str	r3, [r7, #20]
		i2cdevReadReg16(I2C1, Address, current_address, p_values, current_chunk_size);
 800250c:	8b3b      	ldrh	r3, [r7, #24]
 800250e:	b2d9      	uxtb	r1, r3
 8002510:	8b7a      	ldrh	r2, [r7, #26]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	480d      	ldr	r0, [pc, #52]	@ (8002550 <RdMulti+0x70>)
 800251a:	f7ff fe4b 	bl	80021b4 <i2cdevReadReg16>
		remaining_size-= current_chunk_size;
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	61fb      	str	r3, [r7, #28]
		current_address+=current_chunk_size;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	b29a      	uxth	r2, r3
 800252a:	8b7b      	ldrh	r3, [r7, #26]
 800252c:	4413      	add	r3, r2
 800252e:	837b      	strh	r3, [r7, #26]
		p_values+= current_chunk_size;
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	4413      	add	r3, r2
 8002536:	607b      	str	r3, [r7, #4]
		osDelay(10);
 8002538:	200a      	movs	r0, #10
 800253a:	f004 fde3 	bl	8007104 <osDelay>
	while(remaining_size> 0){
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1de      	bne.n	8002502 <RdMulti+0x22>
	}
	return 0;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40005400 	.word	0x40005400

08002554 <SwapBuffer>:
}

void SwapBuffer(
		uint8_t 		*buffer,
		uint16_t 	 	 size)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
	uint32_t i, tmp;

	/* Example of possible implementation using <string.h> */
	for(i = 0; i < size; i = i + 4)
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	e021      	b.n	80025aa <SwapBuffer+0x56>
	{
		tmp = (
		  buffer[i]<<24)
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	061a      	lsls	r2, r3, #24
		|(buffer[i+1]<<16)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3301      	adds	r3, #1
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	440b      	add	r3, r1
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	041b      	lsls	r3, r3, #16
 800257c:	431a      	orrs	r2, r3
		|(buffer[i+2]<<8)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	3302      	adds	r3, #2
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	440b      	add	r3, r1
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	4313      	orrs	r3, r2
		|(buffer[i+3]);
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	3203      	adds	r2, #3
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	440a      	add	r2, r1
 8002594:	7812      	ldrb	r2, [r2, #0]
 8002596:	4313      	orrs	r3, r2
		tmp = (
 8002598:	60bb      	str	r3, [r7, #8]

		memcpy(&(buffer[i]), &tmp, 4);
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	601a      	str	r2, [r3, #0]
	for(i = 0; i < size; i = i + 4)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3304      	adds	r3, #4
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d3d9      	bcc.n	8002566 <SwapBuffer+0x12>
	}
}
 80025b2:	bf00      	nop
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <WaitMs>:

uint8_t WaitMs(
		VL53L5CX_Platform *p_platform,
               uint32_t TimeMs)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
	osDelay(TimeMs);
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f004 fd9a 	bl	8007104 <osDelay>
	return 0;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	4608      	mov	r0, r1
 80025e4:	4611      	mov	r1, r2
 80025e6:	461a      	mov	r2, r3
 80025e8:	4603      	mov	r3, r0
 80025ea:	70fb      	strb	r3, [r7, #3]
 80025ec:	460b      	mov	r3, r1
 80025ee:	70bb      	strb	r3, [r7, #2]
 80025f0:	4613      	mov	r3, r2
 80025f2:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 80025fc:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= RdMulti(&(p_dev->platform), address,
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	8839      	ldrh	r1, [r7, #0]
 8002608:	f7ff ff6a 	bl	80024e0 <RdMulti>
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	4313      	orrs	r3, r2
 8002614:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	210a      	movs	r1, #10
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ffd0 	bl	80025c0 <WaitMs>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	4313      	orrs	r3, r2
 8002628:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 800262a:	7bbb      	ldrb	r3, [r7, #14]
 800262c:	2bc7      	cmp	r3, #199	@ 0xc7
 800262e:	d904      	bls.n	800263a <_vl53l5cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
			break;
 8002638:	e01a      	b.n	8002670 <_vl53l5cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	2b03      	cmp	r3, #3
 800263e:	d909      	bls.n	8002654 <_vl53l5cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 8002646:	2b7e      	cmp	r3, #126	@ 0x7e
 8002648:	d904      	bls.n	8002654 <_vl53l5cx_poll_for_answer+0x7a>
		{
			status |= VL53L5CX_MCU_ERROR;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002650:	73fb      	strb	r3, [r7, #15]
			break;
 8002652:	e00d      	b.n	8002670 <_vl53l5cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8002654:	7bbb      	ldrb	r3, [r7, #14]
 8002656:	3301      	adds	r3, #1
 8002658:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 800265a:	78bb      	ldrb	r3, [r7, #2]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	4413      	add	r3, r2
 8002660:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8002664:	7e3b      	ldrb	r3, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	b2db      	uxtb	r3, r3
 800266a:	7f3a      	ldrb	r2, [r7, #28]
 800266c:	429a      	cmp	r2, r3
 800266e:	d1c5      	bne.n	80025fc <_vl53l5cx_poll_for_answer+0x22>

	return status;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f107 020b 	add.w	r2, r7, #11
 8002690:	2106      	movs	r1, #6
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff feae 	bl	80023f4 <RdByte>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	4313      	orrs	r3, r2
 80026a0:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 80026a2:	7afb      	ldrb	r3, [r7, #11]
 80026a4:	b25b      	sxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	da10      	bge.n	80026cc <_vl53l5cx_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f107 020a 	add.w	r2, r7, #10
 80026b0:	2107      	movs	r1, #7
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fe9e 	bl	80023f4 <RdByte>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	4313      	orrs	r3, r2
 80026c0:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 80026c2:	7aba      	ldrb	r2, [r7, #10]
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	73fb      	strb	r3, [r7, #15]
			break;
 80026ca:	e012      	b.n	80026f2 <_vl53l5cx_poll_for_mcu_boot+0x78>
		}
		(void)WaitMs(&(p_dev->platform), 1);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2101      	movs	r1, #1
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff75 	bl	80025c0 <WaitMs>
		timeout++;
 80026d6:	89bb      	ldrh	r3, [r7, #12]
 80026d8:	3301      	adds	r3, #1
 80026da:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 80026dc:	7afb      	ldrb	r3, [r7, #11]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d104      	bne.n	80026f0 <_vl53l5cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 80026e6:	89bb      	ldrh	r3, [r7, #12]
 80026e8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80026ec:	d3cd      	bcc.n	800268a <_vl53l5cx_poll_for_mcu_boot+0x10>
 80026ee:	e000      	b.n	80026f2 <_vl53l5cx_poll_for_mcu_boot+0x78>
			break;
 80026f0:	bf00      	nop

   return status;
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b0ea      	sub	sp, #424	@ 0x1a8
 8002700:	af02      	add	r7, sp, #8
 8002702:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002706:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800270a:	6018      	str	r0, [r3, #0]
 800270c:	460a      	mov	r2, r1
 800270e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002712:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8002716:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 800271e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002722:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002726:	4ad9      	ldr	r2, [pc, #868]	@ (8002a8c <_vl53l5cx_send_offset_data+0x390>)
 8002728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800272c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8002730:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002734:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002738:	4ad5      	ldr	r2, [pc, #852]	@ (8002a90 <_vl53l5cx_send_offset_data+0x394>)
 800273a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800273e:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8002742:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002746:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 8002750:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002754:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3310      	adds	r3, #16
	(void)memcpy(p_dev->temp_buffer,
 800275c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8002760:	4619      	mov	r1, r3
 8002762:	f007 f99d 	bl	8009aa0 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 8002766:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800276a:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b10      	cmp	r3, #16
 8002772:	f040 8122 	bne.w	80029ba <_vl53l5cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8002776:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800277a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8002784:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002788:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800278c:	cb03      	ldmia	r3!, {r0, r1}
 800278e:	6010      	str	r0, [r2, #0]
 8002790:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8002792:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002796:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a0:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fed5 	bl	8002554 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 80027aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80027ae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f203 513c 	addw	r1, r3, #1340	@ 0x53c
 80027b8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80027bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027c0:	4618      	mov	r0, r3
 80027c2:	f007 f96d 	bl	8009aa0 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 80027c6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80027ca:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f503 61c8 	add.w	r1, r3, #1600	@ 0x640
 80027d4:	f107 0318 	add.w	r3, r7, #24
 80027d8:	2280      	movs	r2, #128	@ 0x80
 80027da:	4618      	mov	r0, r3
 80027dc:	f007 f960 	bl	8009aa0 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 80027e6:	e0ac      	b.n	8002942 <_vl53l5cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80027e8:	2300      	movs	r3, #0
 80027ea:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 80027ee:	e09c      	b.n	800292a <_vl53l5cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 80027f0:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80027f4:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	005a      	lsls	r2, r3, #1
 80027fe:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002806:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 800280a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800280e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	440b      	add	r3, r1
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	1c59      	adds	r1, r3, #1
 800281a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800281e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002822:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002826:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8002828:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800282c:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	3304      	adds	r3, #4
 8002836:	0059      	lsls	r1, r3, #1
 8002838:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800283c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002840:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002844:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8002846:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800284a:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	f103 0109 	add.w	r1, r3, #9
 8002858:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800285c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002860:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002864:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8002866:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800286a:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8002872:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8002874:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800287c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8002880:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002884:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4413      	add	r3, r2
 800288c:	005a      	lsls	r2, r3, #1
 800288e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002892:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002896:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800289a:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 800289c:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 80028a0:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80028b0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80028b4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80028b8:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 80028ba:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80028be:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80028c2:	00d2      	lsls	r2, r2, #3
 80028c4:	440a      	add	r2, r1
 80028c6:	3204      	adds	r2, #4
 80028c8:	0051      	lsls	r1, r2, #1
 80028ca:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80028ce:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80028d2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80028d6:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 80028d8:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80028dc:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80028e0:	00d2      	lsls	r2, r2, #3
 80028e2:	440a      	add	r2, r1
 80028e4:	0052      	lsls	r2, r2, #1
 80028e6:	f102 0109 	add.w	r1, r2, #9
 80028ea:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80028ee:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 80028f2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80028f6:	4413      	add	r3, r2
                                  /(int16_t)4;
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	da00      	bge.n	80028fe <_vl53l5cx_send_offset_data+0x202>
 80028fc:	3303      	adds	r3, #3
 80028fe:	109b      	asrs	r3, r3, #2
 8002900:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8002902:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8002906:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	441a      	add	r2, r3
 800290e:	b209      	sxth	r1, r1
 8002910:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002914:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002918:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 800291c:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 8002920:	b2db      	uxtb	r3, r3
 8002922:	3301      	adds	r3, #1
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 800292a:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 800292e:	2b03      	cmp	r3, #3
 8002930:	f77f af5e 	ble.w	80027f0 <_vl53l5cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8002934:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3301      	adds	r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8002942:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8002946:	2b03      	cmp	r3, #3
 8002948:	f77f af4e 	ble.w	80027e8 <_vl53l5cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 800294c:	f107 0318 	add.w	r3, r7, #24
 8002950:	3320      	adds	r3, #32
 8002952:	2260      	movs	r2, #96	@ 0x60
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f007 f876 	bl	8009a48 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 800295c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002960:	3340      	adds	r3, #64	@ 0x40
 8002962:	22c0      	movs	r2, #192	@ 0xc0
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f007 f86e 	bl	8009a48 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 800296c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002970:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f203 533c 	addw	r3, r3, #1340	@ 0x53c
 800297a:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800297e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002982:	4618      	mov	r0, r3
 8002984:	f007 f88c 	bl	8009aa0 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8002988:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800298c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8002996:	f107 0118 	add.w	r1, r7, #24
 800299a:	2280      	movs	r2, #128	@ 0x80
 800299c:	4618      	mov	r0, r3
 800299e:	f007 f87f 	bl	8009aa0 <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 80029a2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80029a6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b0:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fdcd 	bl	8002554 <SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 80029c0:	e01b      	b.n	80029fa <_vl53l5cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 80029c2:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80029c6:	f103 0208 	add.w	r2, r3, #8
 80029ca:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80029ce:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 80029d2:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 80029d6:	6809      	ldr	r1, [r1, #0]
 80029d8:	440a      	add	r2, r1
 80029da:	f892 1500 	ldrb.w	r1, [r2, #1280]	@ 0x500
 80029de:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80029e2:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	460a      	mov	r2, r1
 80029ec:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 80029f0:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80029f4:	3301      	adds	r3, #1
 80029f6:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 80029fa:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 80029fe:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 8002a02:	d3de      	bcc.n	80029c2 <_vl53l5cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8002a04:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002a08:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f503 62dc 	add.w	r2, r3, #1760	@ 0x6e0
 8002a12:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002a16:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002a1a:	cb03      	ldmia	r3!, {r0, r1}
 8002a1c:	6010      	str	r0, [r2, #0]
 8002a1e:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8002a20:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002a24:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002a2e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8002a38:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8002a3c:	f642 6118 	movw	r1, #11800	@ 0x2e18
 8002a40:	f7ff fd14 	bl	800246c <WrMulti>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002a52:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002a56:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	23ff      	movs	r3, #255	@ 0xff
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002a66:	2201      	movs	r2, #1
 8002a68:	2104      	movs	r1, #4
 8002a6a:	6800      	ldr	r0, [r0, #0]
 8002a6c:	f7ff fdb5 	bl	80025da <_vl53l5cx_poll_for_answer>
 8002a70:	4603      	mov	r3, r0
 8002a72:	461a      	mov	r2, r3
 8002a74:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8002a7e:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	08009af0 	.word	0x08009af0
 8002a90:	08009af8 	.word	0x08009af8

08002a94 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b0ca      	sub	sp, #296	@ 0x128
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a9e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002aa2:	6018      	str	r0, [r3, #0]
 8002aa4:	460a      	mov	r2, r1
 8002aa6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002aaa:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8002aae:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8002ab6:	4a9a      	ldr	r2, [pc, #616]	@ (8002d20 <_vl53l5cx_send_xtalk_data+0x28c>)
 8002ab8:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002abc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ac0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8002ac4:	4a97      	ldr	r2, [pc, #604]	@ (8002d24 <_vl53l5cx_send_xtalk_data+0x290>)
 8002ac6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002aca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ace:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8002ad2:	4b95      	ldr	r3, [pc, #596]	@ (8002d28 <_vl53l5cx_send_xtalk_data+0x294>)
 8002ad4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8002ad8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002adc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f503 60a0 	add.w	r0, r3, #1280	@ 0x500
 8002ae6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002aea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8002af4:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8002af8:	4619      	mov	r1, r3
 8002afa:	f006 ffd1 	bl	8009aa0 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 8002afe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b02:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	f040 80d2 	bne.w	8002cb2 <_vl53l5cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8002b0e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b12:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002b22:	cb03      	ldmia	r3!, {r0, r1}
 8002b24:	6010      	str	r0, [r2, #0]
 8002b26:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8002b28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b2c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 8002b36:	461a      	mov	r2, r3
 8002b38:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b3c:	cb03      	ldmia	r3!, {r0, r1}
 8002b3e:	6010      	str	r0, [r2, #0]
 8002b40:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8002b42:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b46:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b50:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fcfd 	bl	8002554 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8002b5a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b5e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f203 5134 	addw	r1, r3, #1332	@ 0x534
 8002b68:	f107 0308 	add.w	r3, r7, #8
 8002b6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b70:	4618      	mov	r0, r3
 8002b72:	f006 ff95 	bl	8009aa0 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8002b7c:	e05d      	b.n	8002c3a <_vl53l5cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8002b84:	e04e      	b.n	8002c24 <_vl53l5cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8002b86:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 8002b8a:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	005a      	lsls	r2, r3, #1
 8002b94:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8002ba0:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8002ba4:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	1c59      	adds	r1, r3, #1
 8002bb0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002bb4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002bb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002bbc:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8002bbe:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8002bc2:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	440b      	add	r3, r1
 8002bca:	3304      	adds	r3, #4
 8002bcc:	0059      	lsls	r1, r3, #1
 8002bce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002bd2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002bd6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002bda:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8002bdc:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8002be0:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	f103 0109 	add.w	r1, r3, #9
 8002bee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002bf2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002bf6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002bfa:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8002bfc:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8002c00:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 8002c04:	0092      	lsls	r2, r2, #2
 8002c06:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8002c08:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8002c0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c0e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8002c16:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8002c24:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	ddac      	ble.n	8002b86 <_vl53l5cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8002c2c:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8002c3a:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	dd9d      	ble.n	8002b7e <_vl53l5cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8002c42:	f107 0308 	add.w	r3, r7, #8
 8002c46:	3340      	adds	r3, #64	@ 0x40
 8002c48:	22c0      	movs	r2, #192	@ 0xc0
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f006 fefb 	bl	8009a48 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8002c52:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c56:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f203 5334 	addw	r3, r3, #1332	@ 0x534
 8002c60:	f107 0108 	add.w	r1, r7, #8
 8002c64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f006 ff19 	bl	8009aa0 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8002c6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c72:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c7c:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fc67 	bl	8002554 <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8002c86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c8a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8002c94:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002c98:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8002c9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c9e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f503 63af 	add.w	r3, r3, #1400	@ 0x578
 8002ca8:	2204      	movs	r2, #4
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f006 fecb 	bl	8009a48 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8002cb2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002cb6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002cba:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8002cbc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002cc0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8002cca:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8002cce:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 8002cd2:	f7ff fbcb 	bl	800246c <WrMulti>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002ce4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ce8:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8002cec:	2303      	movs	r3, #3
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	23ff      	movs	r3, #255	@ 0xff
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	6800      	ldr	r0, [r0, #0]
 8002cfe:	f7ff fc6c 	bl	80025da <_vl53l5cx_poll_for_answer>
 8002d02:	4603      	mov	r3, r0
 8002d04:	461a      	mov	r2, r3
 8002d06:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8002d10:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	08009b00 	.word	0x08009b00
 8002d24:	08009b08 	.word	0x08009b08
 8002d28:	0001fca0 	.word	0x0001fca0

08002d2c <vl53l5cx_is_alive>:

uint8_t vl53l5cx_is_alive(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_is_alive)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
	uint8_t device_id, revision_id;

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fb72 	bl	800242c <WrByte>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0, &device_id);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f107 020e 	add.w	r2, r7, #14
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fb4a 	bl	80023f4 <RdByte>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 1, &revision_id);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f107 020d 	add.w	r2, r7, #13
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fb3e 	bl	80023f4 <RdByte>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2202      	movs	r2, #2
 8002d86:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fb4e 	bl	800242c <WrByte>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461a      	mov	r2, r3
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	73fb      	strb	r3, [r7, #15]

	if((device_id == (uint8_t)0xF0) && (revision_id == (uint8_t)0x02))
 8002d9a:	7bbb      	ldrb	r3, [r7, #14]
 8002d9c:	2bf0      	cmp	r3, #240	@ 0xf0
 8002d9e:	d106      	bne.n	8002dae <vl53l5cx_is_alive+0x82>
 8002da0:	7b7b      	ldrb	r3, [r7, #13]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d103      	bne.n	8002dae <vl53l5cx_is_alive+0x82>
	{
		*p_is_alive = 1;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2201      	movs	r2, #1
 8002daa:	701a      	strb	r2, [r3, #0]
 8002dac:	e002      	b.n	8002db4 <vl53l5cx_is_alive+0x88>
	}
	else
	{
		*p_is_alive = 0;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <vl53l5cx_init>:

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	@ 0x28
 8002dc4:	af04      	add	r7, sp, #16
 8002dc6:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8002dcc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002dd0:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a80      	ldr	r2, [pc, #512]	@ (8002fdc <vl53l5cx_init+0x21c>)
 8002dda:	60da      	str	r2, [r3, #12]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a80      	ldr	r2, [pc, #512]	@ (8002fe0 <vl53l5cx_init+0x220>)
 8002de0:	609a      	str	r2, [r3, #8]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2aac 	strb.w	r2, [r3, #2732]	@ 0xaac

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fb1a 	bl	800242c <WrByte>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2204      	movs	r2, #4
 8002e06:	2109      	movs	r1, #9
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fb0f 	bl	800242c <WrByte>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461a      	mov	r2, r3
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2240      	movs	r2, #64	@ 0x40
 8002e1c:	210f      	movs	r1, #15
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fb04 	bl	800242c <WrByte>
 8002e24:	4603      	mov	r3, r0
 8002e26:	461a      	mov	r2, r3
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2203      	movs	r2, #3
 8002e32:	210a      	movs	r1, #10
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff faf9 	bl	800242c <WrByte>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	7dfb      	ldrb	r3, [r7, #23]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f107 0216 	add.w	r2, r7, #22
 8002e4a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fad0 	bl	80023f4 <RdByte>
 8002e54:	4603      	mov	r3, r0
 8002e56:	461a      	mov	r2, r3
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	210c      	movs	r1, #12
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fae1 	bl	800242c <WrByte>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f240 1101 	movw	r1, #257	@ 0x101
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fad5 	bl	800242c <WrByte>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fac9 	bl	800242c <WrByte>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fabd 	bl	800242c <WrByte>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	7dfb      	ldrb	r3, [r7, #23]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fab1 	bl	800242c <WrByte>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	461a      	mov	r2, r3
 8002ece:	7dfb      	ldrb	r3, [r7, #23]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f244 0102 	movw	r1, #16386	@ 0x4002
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff faa5 	bl	800242c <WrByte>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2203      	movs	r2, #3
 8002ef0:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fa99 	bl	800242c <WrByte>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f240 1103 	movw	r1, #259	@ 0x103
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fa8d 	bl	800242c <WrByte>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	210c      	movs	r1, #12
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fa82 	bl	800242c <WrByte>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2243      	movs	r2, #67	@ 0x43
 8002f36:	210f      	movs	r1, #15
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fa77 	bl	800242c <WrByte>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	461a      	mov	r2, r3
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fb37 	bl	80025c0 <WaitMs>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2240      	movs	r2, #64	@ 0x40
 8002f60:	210f      	movs	r1, #15
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fa62 	bl	800242c <WrByte>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	210a      	movs	r1, #10
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fa57 	bl	800242c <WrByte>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2164      	movs	r1, #100	@ 0x64
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fb17 	bl	80025c0 <WaitMs>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fa41 	bl	800242c <WrByte>
 8002faa:	4603      	mov	r3, r0
 8002fac:	461a      	mov	r2, r3
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	23ff      	movs	r3, #255	@ 0xff
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	2306      	movs	r3, #6
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fb09 	bl	80025da <_vl53l5cx_poll_for_answer>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f040 8354 	bne.w	8003682 <vl53l5cx_init+0x8c2>
 8002fda:	e003      	b.n	8002fe4 <vl53l5cx_init+0x224>
 8002fdc:	0801efc4 	.word	0x0801efc4
 8002fe0:	0801ebf8 	.word	0x0801ebf8
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	210e      	movs	r1, #14
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fa1e 	bl	800242c <WrByte>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fa12 	bl	800242c <WrByte>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	4313      	orrs	r3, r2
 8003010:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	220d      	movs	r2, #13
 8003016:	2103      	movs	r1, #3
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fa07 	bl	800242c <WrByte>
 800301e:	4603      	mov	r3, r0
 8003020:	461a      	mov	r2, r3
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	4313      	orrs	r3, r2
 8003026:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff f9fb 	bl	800242c <WrByte>
 8003036:	4603      	mov	r3, r0
 8003038:	461a      	mov	r2, r3
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	4313      	orrs	r3, r2
 800303e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8003040:	2310      	movs	r3, #16
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	2310      	movs	r3, #16
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	2321      	movs	r3, #33	@ 0x21
 800304a:	2200      	movs	r2, #0
 800304c:	2101      	movs	r1, #1
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff fac3 	bl	80025da <_vl53l5cx_poll_for_answer>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	4313      	orrs	r3, r2
 800305c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff f9e0 	bl	800242c <WrByte>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	4313      	orrs	r3, r2
 8003074:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f107 0216 	add.w	r2, r7, #22
 800307c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff f9b7 	bl	80023f4 <RdByte>
 8003086:	4603      	mov	r3, r0
 8003088:	461a      	mov	r2, r3
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	4313      	orrs	r3, r2
 800308e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	210c      	movs	r1, #12
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff f9c8 	bl	800242c <WrByte>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff f9bc 	bl	800242c <WrByte>
 80030b4:	4603      	mov	r3, r0
 80030b6:	461a      	mov	r2, r3
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f240 1101 	movw	r1, #257	@ 0x101
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff f9b0 	bl	800242c <WrByte>
 80030cc:	4603      	mov	r3, r0
 80030ce:	461a      	mov	r2, r3
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff f9a4 	bl	800242c <WrByte>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff f998 	bl	800242c <WrByte>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461a      	mov	r2, r3
 8003100:	7dfb      	ldrb	r3, [r7, #23]
 8003102:	4313      	orrs	r3, r2
 8003104:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f244 0102 	movw	r1, #16386	@ 0x4002
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff f98c 	bl	800242c <WrByte>
 8003114:	4603      	mov	r3, r0
 8003116:	461a      	mov	r2, r3
 8003118:	7dfb      	ldrb	r3, [r7, #23]
 800311a:	4313      	orrs	r3, r2
 800311c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f244 0102 	movw	r1, #16386	@ 0x4002
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff f980 	bl	800242c <WrByte>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	7dfb      	ldrb	r3, [r7, #23]
 8003132:	4313      	orrs	r3, r2
 8003134:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2203      	movs	r2, #3
 800313a:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff f974 	bl	800242c <WrByte>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	4313      	orrs	r3, r2
 800314c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f240 1103 	movw	r1, #259	@ 0x103
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff f968 	bl	800242c <WrByte>
 800315c:	4603      	mov	r3, r0
 800315e:	461a      	mov	r2, r3
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	4313      	orrs	r3, r2
 8003164:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f244 010f 	movw	r1, #16399	@ 0x400f
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff f95c 	bl	800242c <WrByte>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	4313      	orrs	r3, r2
 800317c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2243      	movs	r2, #67	@ 0x43
 8003182:	f240 211a 	movw	r1, #538	@ 0x21a
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff f950 	bl	800242c <WrByte>
 800318c:	4603      	mov	r3, r0
 800318e:	461a      	mov	r2, r3
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	4313      	orrs	r3, r2
 8003194:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2203      	movs	r2, #3
 800319a:	f240 211a 	movw	r1, #538	@ 0x21a
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff f944 	bl	800242c <WrByte>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461a      	mov	r2, r3
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f240 211a 	movw	r1, #538	@ 0x21a
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff f938 	bl	800242c <WrByte>
 80031bc:	4603      	mov	r3, r0
 80031be:	461a      	mov	r2, r3
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f240 211a 	movw	r1, #538	@ 0x21a
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff f92c 	bl	800242c <WrByte>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	4313      	orrs	r3, r2
 80031dc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f240 2119 	movw	r1, #537	@ 0x219
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff f920 	bl	800242c <WrByte>
 80031ec:	4603      	mov	r3, r0
 80031ee:	461a      	mov	r2, r3
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f240 211b 	movw	r1, #539	@ 0x21b
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff f914 	bl	800242c <WrByte>
 8003204:	4603      	mov	r3, r0
 8003206:	461a      	mov	r2, r3
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	4313      	orrs	r3, r2
 800320c:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff f908 	bl	800242c <WrByte>
 800321c:	4603      	mov	r3, r0
 800321e:	461a      	mov	r2, r3
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	4313      	orrs	r3, r2
 8003224:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f107 0216 	add.w	r2, r7, #22
 800322c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff f8df 	bl	80023f4 <RdByte>
 8003236:	4603      	mov	r3, r0
 8003238:	461a      	mov	r2, r3
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	4313      	orrs	r3, r2
 800323e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	210c      	movs	r1, #12
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff f8f0 	bl	800242c <WrByte>
 800324c:	4603      	mov	r3, r0
 800324e:	461a      	mov	r2, r3
 8003250:	7dfb      	ldrb	r3, [r7, #23]
 8003252:	4313      	orrs	r3, r2
 8003254:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff f8e4 	bl	800242c <WrByte>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	4313      	orrs	r3, r2
 800326c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2207      	movs	r2, #7
 8003272:	2120      	movs	r1, #32
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff f8d9 	bl	800242c <WrByte>
 800327a:	4603      	mov	r3, r0
 800327c:	461a      	mov	r2, r3
 800327e:	7dfb      	ldrb	r3, [r7, #23]
 8003280:	4313      	orrs	r3, r2
 8003282:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2206      	movs	r2, #6
 8003288:	2120      	movs	r1, #32
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff f8ce 	bl	800242c <WrByte>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	4313      	orrs	r3, r2
 8003298:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2209      	movs	r2, #9
 800329e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff f8c2 	bl	800242c <WrByte>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032b8:	4ae1      	ldr	r2, [pc, #900]	@ (8003640 <vl53l5cx_init+0x880>)
 80032ba:	2100      	movs	r1, #0
 80032bc:	f7ff f8d6 	bl	800246c <WrMulti>
 80032c0:	4603      	mov	r3, r0
 80032c2:	461a      	mov	r2, r3
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	220a      	movs	r2, #10
 80032ce:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff f8aa 	bl	800242c <WrByte>
 80032d8:	4603      	mov	r3, r0
 80032da:	461a      	mov	r2, r3
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
 80032de:	4313      	orrs	r3, r2
 80032e0:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032e8:	4ad6      	ldr	r2, [pc, #856]	@ (8003644 <vl53l5cx_init+0x884>)
 80032ea:	2100      	movs	r1, #0
 80032ec:	f7ff f8be 	bl	800246c <WrMulti>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461a      	mov	r2, r3
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	220b      	movs	r2, #11
 80032fe:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff f892 	bl	800242c <WrByte>
 8003308:	4603      	mov	r3, r0
 800330a:	461a      	mov	r2, r3
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	4313      	orrs	r3, r2
 8003310:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8003318:	4acb      	ldr	r2, [pc, #812]	@ (8003648 <vl53l5cx_init+0x888>)
 800331a:	2100      	movs	r1, #0
 800331c:	f7ff f8a6 	bl	800246c <WrMulti>
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	4313      	orrs	r3, r2
 8003328:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff f87a 	bl	800242c <WrByte>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	4313      	orrs	r3, r2
 8003340:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff f86e 	bl	800242c <WrByte>
 8003350:	4603      	mov	r3, r0
 8003352:	461a      	mov	r2, r3
 8003354:	7dfb      	ldrb	r3, [r7, #23]
 8003356:	4313      	orrs	r3, r2
 8003358:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	220d      	movs	r2, #13
 800335e:	2103      	movs	r1, #3
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff f863 	bl	800242c <WrByte>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	4313      	orrs	r3, r2
 800336e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f857 	bl	800242c <WrByte>
 800337e:	4603      	mov	r3, r0
 8003380:	461a      	mov	r2, r3
 8003382:	7dfb      	ldrb	r3, [r7, #23]
 8003384:	4313      	orrs	r3, r2
 8003386:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8003388:	2310      	movs	r3, #16
 800338a:	9301      	str	r3, [sp, #4]
 800338c:	2310      	movs	r3, #16
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	2321      	movs	r3, #33	@ 0x21
 8003392:	2200      	movs	r2, #0
 8003394:	2101      	movs	r1, #1
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff f91f 	bl	80025da <_vl53l5cx_poll_for_answer>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f040 816c 	bne.w	8003686 <vl53l5cx_init+0x8c6>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff f838 	bl	800242c <WrByte>
 80033bc:	4603      	mov	r3, r0
 80033be:	461a      	mov	r2, r3
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f107 0216 	add.w	r2, r7, #22
 80033cc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff f80f 	bl	80023f4 <RdByte>
 80033d6:	4603      	mov	r3, r0
 80033d8:	461a      	mov	r2, r3
 80033da:	7dfb      	ldrb	r3, [r7, #23]
 80033dc:	4313      	orrs	r3, r2
 80033de:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	210c      	movs	r1, #12
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff f820 	bl	800242c <WrByte>
 80033ec:	4603      	mov	r3, r0
 80033ee:	461a      	mov	r2, r3
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff f814 	bl	800242c <WrByte>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	7dfb      	ldrb	r3, [r7, #23]
 800340a:	4313      	orrs	r3, r2
 800340c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff f808 	bl	800242c <WrByte>
 800341c:	4603      	mov	r3, r0
 800341e:	461a      	mov	r2, r3
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	4313      	orrs	r3, r2
 8003424:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f240 1115 	movw	r1, #277	@ 0x115
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe fffc 	bl	800242c <WrByte>
 8003434:	4603      	mov	r3, r0
 8003436:	461a      	mov	r2, r3
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	4313      	orrs	r3, r2
 800343c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2242      	movs	r2, #66	@ 0x42
 8003442:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe fff0 	bl	800242c <WrByte>
 800344c:	4603      	mov	r3, r0
 800344e:	461a      	mov	r2, r3
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	4313      	orrs	r3, r2
 8003454:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f240 1117 	movw	r1, #279	@ 0x117
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe ffe4 	bl	800242c <WrByte>
 8003464:	4603      	mov	r3, r0
 8003466:	461a      	mov	r2, r3
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	4313      	orrs	r3, r2
 800346c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	210b      	movs	r1, #11
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe ffd9 	bl	800242c <WrByte>
 800347a:	4603      	mov	r3, r0
 800347c:	461a      	mov	r2, r3
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	4313      	orrs	r3, r2
 8003482:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f107 0216 	add.w	r2, r7, #22
 800348a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe ffb0 	bl	80023f4 <RdByte>
 8003494:	4603      	mov	r3, r0
 8003496:	461a      	mov	r2, r3
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	4313      	orrs	r3, r2
 800349c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	210c      	movs	r1, #12
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe ffc1 	bl	800242c <WrByte>
 80034aa:	4603      	mov	r3, r0
 80034ac:	461a      	mov	r2, r3
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	210b      	movs	r1, #11
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe ffb6 	bl	800242c <WrByte>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff f8d5 	bl	800267a <_vl53l5cx_poll_for_mcu_boot>
 80034d0:	4603      	mov	r3, r0
 80034d2:	461a      	mov	r2, r3
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80034da:	7dfb      	ldrb	r3, [r7, #23]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f040 80d4 	bne.w	800368a <vl53l5cx_init+0x8ca>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe ff9e 	bl	800242c <WrByte>
 80034f0:	4603      	mov	r3, r0
 80034f2:	461a      	mov	r2, r3
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	2328      	movs	r3, #40	@ 0x28
 80034fe:	4a53      	ldr	r2, [pc, #332]	@ (800364c <vl53l5cx_init+0x88c>)
 8003500:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8003504:	f7fe ffb2 	bl	800246c <WrMulti>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	7dfb      	ldrb	r3, [r7, #23]
 800350e:	4313      	orrs	r3, r2
 8003510:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8003512:	2302      	movs	r3, #2
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	23ff      	movs	r3, #255	@ 0xff
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800351e:	2200      	movs	r2, #0
 8003520:	2104      	movs	r1, #4
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff f859 	bl	80025da <_vl53l5cx_poll_for_answer>
 8003528:	4603      	mov	r3, r0
 800352a:	461a      	mov	r2, r3
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	4313      	orrs	r3, r2
 8003530:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8003532:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 800353a:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 800353e:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8003542:	f7fe ffcd 	bl	80024e0 <RdMulti>
 8003546:	4603      	mov	r3, r0
 8003548:	461a      	mov	r2, r3
 800354a:	7dfb      	ldrb	r3, [r7, #23]
 800354c:	4313      	orrs	r3, r2
 800354e:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f103 0010 	add.w	r0, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800355c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8003560:	4619      	mov	r1, r3
 8003562:	f006 fa9d 	bl	8009aa0 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8003566:	2110      	movs	r1, #16
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff f8c7 	bl	80026fc <_vl53l5cx_send_offset_data>
 800356e:	4603      	mov	r3, r0
 8003570:	461a      	mov	r2, r3
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	4313      	orrs	r3, r2
 8003576:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800357e:	4a34      	ldr	r2, [pc, #208]	@ (8003650 <vl53l5cx_init+0x890>)
 8003580:	4618      	mov	r0, r3
 8003582:	4611      	mov	r1, r2
 8003584:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8003588:	461a      	mov	r2, r3
 800358a:	f006 fa89 	bl	8009aa0 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 800358e:	2110      	movs	r1, #16
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff fa7f 	bl	8002a94 <_vl53l5cx_send_xtalk_data>
 8003596:	4603      	mov	r3, r0
 8003598:	461a      	mov	r2, r3
 800359a:	7dfb      	ldrb	r3, [r7, #23]
 800359c:	4313      	orrs	r3, r2
 800359e:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 80035aa:	f642 4134 	movw	r1, #11316	@ 0x2c34
 80035ae:	f7fe ff5d 	bl	800246c <WrMulti>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461a      	mov	r2, r3
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80035bc:	2303      	movs	r3, #3
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	23ff      	movs	r3, #255	@ 0xff
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80035c8:	2201      	movs	r2, #1
 80035ca:	2104      	movs	r1, #4
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff f804 	bl	80025da <_vl53l5cx_poll_for_answer>
 80035d2:	4603      	mov	r3, r0
 80035d4:	461a      	mov	r2, r3
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
 80035d8:	4313      	orrs	r3, r2
 80035da:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 80035dc:	f107 0110 	add.w	r1, r7, #16
 80035e0:	2304      	movs	r3, #4
 80035e2:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fe98 	bl	800431c <vl53l5cx_dci_write_data>
 80035ec:	4603      	mov	r3, r0
 80035ee:	461a      	mov	r2, r3
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80035f6:	f107 010c 	add.w	r1, r7, #12
 80035fa:	2304      	movs	r3, #4
 80035fc:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fe8b 	bl	800431c <vl53l5cx_dci_write_data>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	7dfb      	ldrb	r3, [r7, #23]
 800360c:	4313      	orrs	r3, r2
 800360e:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 8003610:	2301      	movs	r3, #1
 8003612:	75bb      	strb	r3, [r7, #22]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 800361a:	2326      	movs	r3, #38	@ 0x26
 800361c:	9302      	str	r3, [sp, #8]
 800361e:	2301      	movs	r3, #1
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	f107 0316 	add.w	r3, r7, #22
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	2328      	movs	r3, #40	@ 0x28
 800362a:	f24e 1208 	movw	r2, #57608	@ 0xe108
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 ff12 	bl	8004458 <vl53l5cx_dci_replace_data>
 8003634:	4603      	mov	r3, r0
 8003636:	461a      	mov	r2, r3
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	4313      	orrs	r3, r2
 800363c:	e00a      	b.n	8003654 <vl53l5cx_init+0x894>
 800363e:	bf00      	nop
 8003640:	08009bf8 	.word	0x08009bf8
 8003644:	08011bf8 	.word	0x08011bf8
 8003648:	08019bf8 	.word	0x08019bf8
 800364c:	0801f2cc 	.word	0x0801f2cc
 8003650:	0801efc4 	.word	0x0801efc4
 8003654:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 800365c:	2325      	movs	r3, #37	@ 0x25
 800365e:	9302      	str	r3, [sp, #8]
 8003660:	2301      	movs	r3, #1
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	f107 0316 	add.w	r3, r7, #22
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2328      	movs	r3, #40	@ 0x28
 800366c:	f24e 1208 	movw	r2, #57608	@ 0xe108
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fef1 	bl	8004458 <vl53l5cx_dci_replace_data>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	4313      	orrs	r3, r2
 800367e:	75fb      	strb	r3, [r7, #23]
 8003680:	e004      	b.n	800368c <vl53l5cx_init+0x8cc>
		goto exit;
 8003682:	bf00      	nop
 8003684:	e002      	b.n	800368c <vl53l5cx_init+0x8cc>
		goto exit;
 8003686:	bf00      	nop
 8003688:	e000      	b.n	800368c <vl53l5cx_init+0x8cc>
		goto exit;
 800368a:	bf00      	nop
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 800368c:	7dfb      	ldrb	r3, [r7, #23]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop

08003698 <vl53l5cx_set_i2c_address>:

uint8_t vl53l5cx_set_i2c_address(
		VL53L5CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fe febb 	bl	800242c <WrByte>
 80036b6:	4603      	mov	r3, r0
 80036b8:	461a      	mov	r2, r3
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	4313      	orrs	r3, r2
 80036be:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	2104      	movs	r1, #4
 80036ce:	f7fe fead 	bl	800242c <WrByte>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	4313      	orrs	r3, r2
 80036da:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	887a      	ldrh	r2, [r7, #2]
 80036e0:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe fe9e 	bl	800242c <WrByte>
 80036f0:	4603      	mov	r3, r0
 80036f2:	461a      	mov	r2, r3
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	73fb      	strb	r3, [r7, #15]

	return status;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <vl53l5cx_start_ranging>:
	return status;
}

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8003704:	b5b0      	push	{r4, r5, r7, lr}
 8003706:	b09c      	sub	sp, #112	@ 0x70
 8003708:	af02      	add	r7, sp, #8
 800370a:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8003712:	2300      	movs	r3, #0
 8003714:	653b      	str	r3, [r7, #80]	@ 0x50
 8003716:	2300      	movs	r3, #0
 8003718:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 800371a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800371e:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8003720:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fbd0 	bl	8003ecc <vl53l5cx_get_resolution>
 800372c:	4603      	mov	r3, r0
 800372e:	461a      	mov	r2, r3
 8003730:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003734:	4313      	orrs	r3, r2
 8003736:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	605a      	str	r2, [r3, #4]
	p_dev->streamcount = 255;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	22ff      	movs	r2, #255	@ 0xff
 8003744:	709a      	strb	r2, [r3, #2]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8003746:	4baa      	ldr	r3, [pc, #680]	@ (80039f0 <vl53l5cx_start_ranging+0x2ec>)
 8003748:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800374c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800374e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 8003752:	4ba8      	ldr	r3, [pc, #672]	@ (80039f4 <vl53l5cx_start_ranging+0x2f0>)
 8003754:	f107 040c 	add.w	r4, r7, #12
 8003758:	461d      	mov	r5, r3
 800375a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800375c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800375e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003762:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003766:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 800376a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800376c:	3308      	adds	r3, #8
 800376e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8003770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003772:	3310      	adds	r3, #16
 8003774:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8003776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003778:	3320      	adds	r3, #32
 800377a:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 800377c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800377e:	3340      	adds	r3, #64	@ 0x40
 8003780:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 8003782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003784:	3380      	adds	r3, #128	@ 0x80
 8003786:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8003788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800378a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800378e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8003790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003792:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003796:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8003798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800379a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800379e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 80037a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 80037a8:	2300      	movs	r3, #0
 80037aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80037ac:	e073      	b.n	8003896 <vl53l5cx_start_ranging+0x192>
	{
		if ((output[i] == (uint8_t)0) 
 80037ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	3368      	adds	r3, #104	@ 0x68
 80037b4:	443b      	add	r3, r7
 80037b6:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d067      	beq.n	800388e <vl53l5cx_start_ranging+0x18a>
                    || ((output_bh_enable[i/(uint32_t)32]
 80037be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	3368      	adds	r3, #104	@ 0x68
 80037c6:	443b      	add	r3, r7
 80037c8:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 80037cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d057      	beq.n	800388e <vl53l5cx_start_ranging+0x18a>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 80037de:	f107 020c 	add.w	r2, r7, #12
 80037e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 80037ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d03a      	beq.n	800386e <vl53l5cx_start_ranging+0x16a>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 80037f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b0c      	cmp	r3, #12
 8003804:	d833      	bhi.n	800386e <vl53l5cx_start_ranging+0x16a>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8003806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003808:	885b      	ldrh	r3, [r3, #2]
 800380a:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 800380e:	4293      	cmp	r3, r2
 8003810:	d910      	bls.n	8003834 <vl53l5cx_start_ranging+0x130>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8003812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003814:	885b      	ldrh	r3, [r3, #2]
 8003816:	f645 028f 	movw	r2, #22671	@ 0x588f
 800381a:	4293      	cmp	r3, r2
 800381c:	d80a      	bhi.n	8003834 <vl53l5cx_start_ranging+0x130>
			{
				bh_ptr->size = resolution;
 800381e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003826:	b299      	uxth	r1, r3
 8003828:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800382a:	8813      	ldrh	r3, [r2, #0]
 800382c:	f361 130f 	bfi	r3, r1, #4, #12
 8003830:	8013      	strh	r3, [r2, #0]
 8003832:	e009      	b.n	8003848 <vl53l5cx_start_ranging+0x144>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8003834:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8003838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383c:	b299      	uxth	r1, r3
 800383e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003840:	8813      	ldrh	r3, [r2, #0]
 8003842:	f361 130f 	bfi	r3, r1, #4, #12
 8003846:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800384e:	7812      	ldrb	r2, [r2, #0]
 8003850:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	4611      	mov	r1, r2
 8003858:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800385a:	8812      	ldrh	r2, [r2, #0]
 800385c:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8003860:	b292      	uxth	r2, r2
 8003862:	fb01 f202 	mul.w	r2, r1, r2
 8003866:	441a      	add	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	e009      	b.n	8003882 <vl53l5cx_start_ranging+0x17e>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003874:	8812      	ldrh	r2, [r2, #0]
 8003876:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800387a:	b292      	uxth	r2, r2
 800387c:	441a      	add	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	605a      	str	r2, [r3, #4]
		}
		p_dev->data_read_size += (uint32_t)4;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	1d1a      	adds	r2, r3, #4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	605a      	str	r2, [r3, #4]
 800388c:	e000      	b.n	8003890 <vl53l5cx_start_ranging+0x18c>
			continue;
 800388e:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8003890:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003892:	3301      	adds	r3, #1
 8003894:	663b      	str	r3, [r7, #96]	@ 0x60
 8003896:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003898:	2b0b      	cmp	r3, #11
 800389a:	d988      	bls.n	80037ae <vl53l5cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)24;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f103 0218 	add.w	r2, r3, #24
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	605a      	str	r2, [r3, #4]

	status |= vl53l5cx_dci_write_data(p_dev,
 80038a8:	f107 010c 	add.w	r1, r7, #12
 80038ac:	2330      	movs	r3, #48	@ 0x30
 80038ae:	f64d 1280 	movw	r2, #55680	@ 0xd980
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fd32 	bl	800431c <vl53l5cx_dci_write_data>
 80038b8:	4603      	mov	r3, r0
 80038ba:	461a      	mov	r2, r3
 80038bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 80038cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038ce:	3301      	adds	r3, #1
 80038d0:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l5cx_dci_write_data(p_dev,
 80038d2:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80038d6:	2308      	movs	r3, #8
 80038d8:	f64d 1268 	movw	r2, #55656	@ 0xd968
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fd1d 	bl	800431c <vl53l5cx_dci_write_data>
 80038e2:	4603      	mov	r3, r0
 80038e4:	461a      	mov	r2, r3
 80038e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 80038f0:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80038f4:	2310      	movs	r3, #16
 80038f6:	f64d 1270 	movw	r2, #55664	@ 0xd970
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fd0e 	bl	800431c <vl53l5cx_dci_write_data>
 8003900:	4603      	mov	r3, r0
 8003902:	461a      	mov	r2, r3
 8003904:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003908:	4313      	orrs	r3, r2
 800390a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fd88 	bl	800242c <WrByte>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003924:	4313      	orrs	r3, r2
 8003926:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2205      	movs	r2, #5
 800392e:	2109      	movs	r1, #9
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe fd7b 	bl	800242c <WrByte>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800393e:	4313      	orrs	r3, r2
 8003940:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe fd6d 	bl	800242c <WrByte>
 8003952:	4603      	mov	r3, r0
 8003954:	461a      	mov	r2, r3
 8003956:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800395a:	4313      	orrs	r3, r2
 800395c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8003966:	2304      	movs	r3, #4
 8003968:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 800396c:	f7fe fd7e 	bl	800246c <WrMulti>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003978:	4313      	orrs	r3, r2
 800397a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800397e:	2303      	movs	r3, #3
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	23ff      	movs	r3, #255	@ 0xff
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800398a:	2201      	movs	r2, #1
 800398c:	2104      	movs	r1, #4
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fe fe23 	bl	80025da <_vl53l5cx_poll_for_answer>
 8003994:	4603      	mov	r3, r0
 8003996:	461a      	mov	r2, r3
 8003998:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800399c:	4313      	orrs	r3, r2
 800399e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
	status |= vl53l5cx_dci_read_data(p_dev,
 80039a8:	230c      	movs	r3, #12
 80039aa:	f245 4240 	movw	r2, #21568	@ 0x5440
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fc2a 	bl	8004208 <vl53l5cx_dci_read_data>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80039bc:	4313      	orrs	r3, r2
 80039be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f503 63a1 	add.w	r3, r3, #1288	@ 0x508
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 80039d0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80039d4:	461a      	mov	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d002      	beq.n	80039e4 <vl53l5cx_start_ranging+0x2e0>
	{
		status |= VL53L5CX_STATUS_ERROR;
 80039de:	23ff      	movs	r3, #255	@ 0xff
 80039e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 80039e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3768      	adds	r7, #104	@ 0x68
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bdb0      	pop	{r4, r5, r7, pc}
 80039f0:	08009b10 	.word	0x08009b10
 80039f4:	08009b20 	.word	0x08009b20

080039f8 <vl53l5cx_check_data_ready>:
}

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8003a0e:	2304      	movs	r3, #4
 8003a10:	2100      	movs	r1, #0
 8003a12:	f7fe fd65 	bl	80024e0 <RdMulti>
 8003a16:	4603      	mov	r3, r0
 8003a18:	461a      	mov	r2, r3
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	789b      	ldrb	r3, [r3, #2]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d020      	beq.n	8003a70 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8003a34:	2bff      	cmp	r3, #255	@ 0xff
 8003a36:	d01b      	beq.n	8003a70 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	d116      	bne.n	8003a70 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3502 	ldrb.w	r3, [r3, #1282]	@ 0x502
 8003a48:	f003 0305 	and.w	r3, r3, #5
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	d10f      	bne.n	8003a70 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <vl53l5cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2201      	movs	r2, #1
 8003a62:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	709a      	strb	r2, [r3, #2]
 8003a6e:	e00e      	b.n	8003a8e <vl53l5cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3503 	ldrb.w	r3, [r3, #1283]	@ 0x503
 8003a76:	b25b      	sxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	da05      	bge.n	8003a88 <vl53l5cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 2502 	ldrb.w	r2, [r3, #1282]	@ 0x502
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= RdMulti(&(p_dev->platform), 0x0,
 8003aa6:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
	status |= RdMulti(&(p_dev->platform), 0x0,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	f7fe fd14 	bl	80024e0 <RdMulti>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	461a      	mov	r2, r3
 8003abc:	7ffb      	ldrb	r3, [r7, #31]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	709a      	strb	r2, [r3, #2]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4610      	mov	r0, r2
 8003adc:	f7fe fd3a 	bl	8002554 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	e10e      	b.n	8003d04 <vl53l5cx_get_ranging_data+0x26c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d915      	bls.n	8003b2c <vl53l5cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b0c      	cmp	r3, #12
 8003b0c:	d80e      	bhi.n	8003b2c <vl53l5cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	fb02 f303 	mul.w	r3, r2, r3
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	e005      	b.n	8003b38 <vl53l5cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	885b      	ldrh	r3, [r3, #2]
 8003b3c:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8003b40:	4293      	cmp	r3, r2
 8003b42:	f000 80bb 	beq.w	8003cbc <vl53l5cx_get_ranging_data+0x224>
 8003b46:	f24e 0284 	movw	r2, #57476	@ 0xe084
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	f300 80d2 	bgt.w	8003cf4 <vl53l5cx_get_ranging_data+0x25c>
 8003b50:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8003b54:	4293      	cmp	r3, r2
 8003b56:	f000 80a3 	beq.w	8003ca0 <vl53l5cx_get_ranging_data+0x208>
 8003b5a:	f24e 0244 	movw	r2, #57412	@ 0xe044
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	f300 80c8 	bgt.w	8003cf4 <vl53l5cx_get_ranging_data+0x25c>
 8003b64:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	f000 808b 	beq.w	8003c84 <vl53l5cx_get_ranging_data+0x1ec>
 8003b6e:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8003b72:	4293      	cmp	r3, r2
 8003b74:	f300 80be 	bgt.w	8003cf4 <vl53l5cx_get_ranging_data+0x25c>
 8003b78:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d073      	beq.n	8003c68 <vl53l5cx_get_ranging_data+0x1d0>
 8003b80:	f64d 62c4 	movw	r2, #57028	@ 0xdec4
 8003b84:	4293      	cmp	r3, r2
 8003b86:	f300 80b5 	bgt.w	8003cf4 <vl53l5cx_get_ranging_data+0x25c>
 8003b8a:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d05c      	beq.n	8003c4c <vl53l5cx_get_ranging_data+0x1b4>
 8003b92:	f64d 32c4 	movw	r2, #56260	@ 0xdbc4
 8003b96:	4293      	cmp	r3, r2
 8003b98:	f300 80ac 	bgt.w	8003cf4 <vl53l5cx_get_ranging_data+0x25c>
 8003b9c:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d045      	beq.n	8003c30 <vl53l5cx_get_ranging_data+0x198>
 8003ba4:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	f300 80a3 	bgt.w	8003cf4 <vl53l5cx_get_ranging_data+0x25c>
 8003bae:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	f000 8090 	beq.w	8003cd8 <vl53l5cx_get_ranging_data+0x240>
 8003bb8:	f64d 0258 	movw	r2, #55384	@ 0xd858
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	f300 8099 	bgt.w	8003cf4 <vl53l5cx_get_ranging_data+0x25c>
 8003bc2:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d024      	beq.n	8003c14 <vl53l5cx_get_ranging_data+0x17c>
 8003bca:	f245 52d0 	movw	r2, #21968	@ 0x55d0
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	f300 8090 	bgt.w	8003cf4 <vl53l5cx_get_ranging_data+0x25c>
 8003bd4:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <vl53l5cx_get_ranging_data+0x14e>
 8003bdc:	f245 42d0 	movw	r2, #21712	@ 0x54d0
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00a      	beq.n	8003bfa <vl53l5cx_get_ranging_data+0x162>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8003be4:	e086      	b.n	8003cf4 <vl53l5cx_get_ranging_data+0x25c>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	330c      	adds	r3, #12
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8003bf2:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	701a      	strb	r2, [r3, #0]
				break;
 8003bf8:	e07d      	b.n	8003cf6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->ambient_per_spad,
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	3304      	adds	r3, #4
 8003c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f005 ff47 	bl	8009aa0 <memcpy>
				break;
 8003c12:	e070      	b.n	8003cf6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_spads_enabled,
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f005 ff39 	bl	8009aa0 <memcpy>
				break;
 8003c2e:	e062      	b.n	8003cf6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->nb_target_detected,
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4619      	mov	r1, r3
 8003c46:	f005 ff2b 	bl	8009aa0 <memcpy>
				break;
 8003c4a:	e054      	b.n	8003cf6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->signal_per_spad,
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f503 7011 	add.w	r0, r3, #580	@ 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	3304      	adds	r3, #4
 8003c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4619      	mov	r1, r3
 8003c62:	f005 ff1d 	bl	8009aa0 <memcpy>
				break;
 8003c66:	e046      	b.n	8003cf6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->range_sigma_mm,
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f503 7051 	add.w	r0, r3, #836	@ 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	3304      	adds	r3, #4
 8003c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f005 ff0f 	bl	8009aa0 <memcpy>
				break;
 8003c82:	e038      	b.n	8003cf6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->distance_mm,
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	f503 7071 	add.w	r0, r3, #964	@ 0x3c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f005 ff01 	bl	8009aa0 <memcpy>
				break;
 8003c9e:	e02a      	b.n	8003cf6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->reflectance,
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	f203 4044 	addw	r0, r3, #1092	@ 0x444
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f005 fef3 	bl	8009aa0 <memcpy>
				break;
 8003cba:	e01c      	b.n	8003cf6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(p_results->target_status,
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	f203 4084 	addw	r0, r3, #1156	@ 0x484
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	f005 fee5 	bl	8009aa0 <memcpy>
				break;
 8003cd6:	e00e      	b.n	8003cf6 <vl53l5cx_get_ranging_data+0x25e>
				(void)memcpy(&p_results->motion_indicator,
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f203 40c4 	addw	r0, r3, #1220	@ 0x4c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4619      	mov	r1, r3
 8003cee:	f005 fed7 	bl	8009aa0 <memcpy>
				break;
 8003cf2:	e000      	b.n	8003cf6 <vl53l5cx_get_ranging_data+0x25e>
				break;
 8003cf4:	bf00      	nop
		}
		i += msize;
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	3304      	adds	r3, #4
 8003d02:	61bb      	str	r3, [r7, #24]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	f4ff aeeb 	bcc.w	8003ae6 <vl53l5cx_get_ranging_data+0x4e>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8003d10:	2300      	movs	r3, #0
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	e00d      	b.n	8003d32 <vl53l5cx_get_ranging_data+0x29a>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	0ada      	lsrs	r2, r3, #11
 8003d22:	6839      	ldr	r1, [r7, #0]
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d36:	d9ee      	bls.n	8003d16 <vl53l5cx_get_ranging_data+0x27e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e056      	b.n	8003dec <vl53l5cx_get_ranging_data+0x354>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	da00      	bge.n	8003d54 <vl53l5cx_get_ranging_data+0x2bc>
 8003d52:	3303      	adds	r3, #3
 8003d54:	109b      	asrs	r3, r3, #2
 8003d56:	b219      	sxth	r1, r3
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	460a      	mov	r2, r1
 8003d66:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	da07      	bge.n	8003d8c <vl53l5cx_get_ranging_data+0x2f4>
		{
			p_results->distance_mm[i] = 0;
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4413      	add	r3, r2
 8003d88:	2200      	movs	r2, #0
 8003d8a:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	4413      	add	r3, r2
 8003d92:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	b2d9      	uxtb	r1, r3
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	4413      	add	r3, r2
 8003da2:	f203 4344 	addw	r3, r3, #1092	@ 0x444
 8003da6:	460a      	mov	r2, r1
 8003da8:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4413      	add	r3, r2
 8003db6:	889b      	ldrh	r3, [r3, #4]
 8003db8:	09db      	lsrs	r3, r3, #7
 8003dba:	b299      	uxth	r1, r3
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	4413      	add	r3, r2
 8003dc8:	460a      	mov	r2, r1
 8003dca:	809a      	strh	r2, [r3, #4]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	3390      	adds	r3, #144	@ 0x90
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	0ada      	lsrs	r2, r3, #11
 8003dda:	6839      	ldr	r1, [r7, #0]
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	3390      	adds	r3, #144	@ 0x90
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	605a      	str	r2, [r3, #4]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	3301      	adds	r3, #1
 8003dea:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b3f      	cmp	r3, #63	@ 0x3f
 8003df0:	d9a5      	bls.n	8003d3e <vl53l5cx_get_ranging_data+0x2a6>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	e01b      	b.n	8003e30 <vl53l5cx_get_ranging_data+0x398>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d110      	bne.n	8003e2a <vl53l5cx_get_ranging_data+0x392>
			for(j = 0; j < (uint32_t)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	e00a      	b.n	8003e24 <vl53l5cx_get_ranging_data+0x38c>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	4413      	add	r3, r2
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	4413      	add	r3, r2
 8003e18:	22ff      	movs	r2, #255	@ 0xff
 8003e1a:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	3301      	adds	r3, #1
 8003e22:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f1      	beq.n	8003e0e <vl53l5cx_get_ranging_data+0x376>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e34:	d9e0      	bls.n	8003df8 <vl53l5cx_get_ranging_data+0x360>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8003e36:	2300      	movs	r3, #0
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	e014      	b.n	8003e66 <vl53l5cx_get_ranging_data+0x3ce>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ec8 <vl53l5cx_get_ranging_data+0x430>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	0bda      	lsrs	r2, r3, #15
 8003e52:	6839      	ldr	r1, [r7, #0]
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	3301      	adds	r3, #1
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b1f      	cmp	r3, #31
 8003e6a:	d9e7      	bls.n	8003e3c <vl53l5cx_get_ranging_data+0x3a4>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3508 	ldrb.w	r3, [r3, #1288]	@ 0x508
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3509 	ldrb.w	r3, [r3, #1289]	@ 0x509
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	89fb      	ldrh	r3, [r7, #14]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8003e88:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
		- (uint32_t)3])) & 0xFFU;
 8003e9a:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f893 3500 	ldrb.w	r3, [r3, #1280]	@ 0x500
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	89bb      	ldrh	r3, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 8003eac:	89fa      	ldrh	r2, [r7, #14]
 8003eae:	89bb      	ldrh	r3, [r7, #12]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d003      	beq.n	8003ebc <vl53l5cx_get_ranging_data+0x424>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 8003eb4:	7ffb      	ldrb	r3, [r7, #31]
 8003eb6:	f043 0302 	orr.w	r3, r3, #2
 8003eba:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8003ebc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	80008001 	.word	0x80008001

08003ecc <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f98e 	bl	8004208 <vl53l5cx_dci_read_data>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 2500 	ldrb.w	r2, [r3, #1280]	@ 0x500
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3501 	ldrb.w	r3, [r3, #1281]	@ 0x501
 8003f02:	fb12 f303 	smulbb	r3, r2, r3
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	701a      	strb	r2, [r3, #0]

	return status;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d002      	beq.n	8003f32 <vl53l5cx_set_resolution+0x1c>
 8003f2c:	2b40      	cmp	r3, #64	@ 0x40
 8003f2e:	d055      	beq.n	8003fdc <vl53l5cx_set_resolution+0xc6>
 8003f30:	e0a9      	b.n	8004086 <vl53l5cx_set_resolution+0x170>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 8003f38:	2310      	movs	r3, #16
 8003f3a:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f962 	bl	8004208 <vl53l5cx_dci_read_data>
 8003f44:	4603      	mov	r3, r0
 8003f46:	461a      	mov	r2, r3
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2240      	movs	r2, #64	@ 0x40
 8003f52:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x06] = 64;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2240      	movs	r2, #64	@ 0x40
 8003f5a:	f883 2506 	strb.w	r2, [r3, #1286]	@ 0x506
			p_dev->temp_buffer[0x09] = 4;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2204      	movs	r2, #4
 8003f62:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f9d2 	bl	800431c <vl53l5cx_dci_write_data>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 8003f88:	2308      	movs	r3, #8
 8003f8a:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f93a 	bl	8004208 <vl53l5cx_dci_read_data>
 8003f94:	4603      	mov	r3, r0
 8003f96:	461a      	mov	r2, r3
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
			p_dev->temp_buffer[0x01] = 4;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2204      	movs	r2, #4
 8003faa:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x04] = 8;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2208      	movs	r2, #8
 8003fb2:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x05] = 8;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2208      	movs	r2, #8
 8003fba:	f883 2505 	strb.w	r2, [r3, #1285]	@ 0x505
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	f245 4250 	movw	r2, #21584	@ 0x5450
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f9a6 	bl	800431c <vl53l5cx_dci_write_data>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 8003fda:	e057      	b.n	800408c <vl53l5cx_set_resolution+0x176>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 8003fe2:	2310      	movs	r3, #16
 8003fe4:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f90d 	bl	8004208 <vl53l5cx_dci_read_data>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2210      	movs	r2, #16
 8003ffc:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x06] = 16;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2210      	movs	r2, #16
 8004004:	f883 2506 	strb.w	r2, [r3, #1286]	@ 0x506
			p_dev->temp_buffer[0x09] = 1;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2509 	strb.w	r2, [r3, #1289]	@ 0x509
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 8004016:	2310      	movs	r3, #16
 8004018:	f64a 5238 	movw	r2, #44344	@ 0xad38
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f97d 	bl	800431c <vl53l5cx_dci_write_data>
 8004022:	4603      	mov	r3, r0
 8004024:	461a      	mov	r2, r3
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	4313      	orrs	r3, r2
 800402a:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_read_data(p_dev,
 8004032:	2308      	movs	r3, #8
 8004034:	f245 4250 	movw	r2, #21584	@ 0x5450
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f8e5 	bl	8004208 <vl53l5cx_dci_read_data>
 800403e:	4603      	mov	r3, r0
 8004040:	461a      	mov	r2, r3
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	4313      	orrs	r3, r2
 8004046:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2208      	movs	r2, #8
 800404c:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
			p_dev->temp_buffer[0x01] = 8;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2208      	movs	r2, #8
 8004054:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x04] = 4;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2204      	movs	r2, #4
 800405c:	f883 2504 	strb.w	r2, [r3, #1284]	@ 0x504
			p_dev->temp_buffer[0x05] = 4;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2204      	movs	r2, #4
 8004064:	f883 2505 	strb.w	r2, [r3, #1285]	@ 0x505
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
			status |= vl53l5cx_dci_write_data(p_dev,
 800406e:	2308      	movs	r3, #8
 8004070:	f245 4250 	movw	r2, #21584	@ 0x5450
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f951 	bl	800431c <vl53l5cx_dci_write_data>
 800407a:	4603      	mov	r3, r0
 800407c:	461a      	mov	r2, r3
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	4313      	orrs	r3, r2
 8004082:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 8004084:	e002      	b.n	800408c <vl53l5cx_set_resolution+0x176>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8004086:	237f      	movs	r3, #127	@ 0x7f
 8004088:	73fb      	strb	r3, [r7, #15]
			break;
 800408a:	bf00      	nop
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	4619      	mov	r1, r3
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7fe fb33 	bl	80026fc <_vl53l5cx_send_offset_data>
 8004096:	4603      	mov	r3, r0
 8004098:	461a      	mov	r2, r3
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	4313      	orrs	r3, r2
 800409e:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	4619      	mov	r1, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7fe fcf5 	bl	8002a94 <_vl53l5cx_send_xtalk_data>
 80040aa:	4603      	mov	r3, r0
 80040ac:	461a      	mov	r2, r3
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	73fb      	strb	r3, [r7, #15]

	return status;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b088      	sub	sp, #32
 80040c2:	af04      	add	r7, sp, #16
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	460b      	mov	r3, r1
 80040c8:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80040d4:	2301      	movs	r3, #1
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	2301      	movs	r3, #1
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	1cfb      	adds	r3, r7, #3
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	2304      	movs	r3, #4
 80040e2:	f245 4258 	movw	r2, #21592	@ 0x5458
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f9b6 	bl	8004458 <vl53l5cx_dci_replace_data>
 80040ec:	4603      	mov	r3, r0
 80040ee:	461a      	mov	r2, r3
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <vl53l5cx_set_target_order>:
}

uint8_t vl53l5cx_set_target_order(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				target_order)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af04      	add	r7, sp, #16
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	73fb      	strb	r3, [r7, #15]

	if((target_order == (uint8_t)VL53L5CX_TARGET_ORDER_CLOSEST)
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d002      	beq.n	800411c <vl53l5cx_set_target_order+0x1c>
		|| (target_order == (uint8_t)VL53L5CX_TARGET_ORDER_STRONGEST))
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d114      	bne.n	8004146 <vl53l5cx_set_target_order+0x46>
	{
		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8004122:	2300      	movs	r3, #0
 8004124:	9302      	str	r3, [sp, #8]
 8004126:	2301      	movs	r3, #1
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	1cfb      	adds	r3, r7, #3
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	2304      	movs	r3, #4
 8004130:	f64a 6264 	movw	r2, #44644	@ 0xae64
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f98f 	bl	8004458 <vl53l5cx_dci_replace_data>
 800413a:	4603      	mov	r3, r0
 800413c:	461a      	mov	r2, r3
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	4313      	orrs	r3, r2
 8004142:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_TARGET_ORDER, 4,
                                (uint8_t*)&target_order, 1, 0x0);
 8004144:	e003      	b.n	800414e <vl53l5cx_set_target_order+0x4e>
	}else
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 800414c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800414e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <vl53l5cx_set_ranging_mode>:
}

uint8_t vl53l5cx_set_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8004168:	2300      	movs	r3, #0
 800416a:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 8004172:	2308      	movs	r3, #8
 8004174:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f845 	bl	8004208 <vl53l5cx_dci_read_data>
 800417e:	4603      	mov	r3, r0
 8004180:	461a      	mov	r2, r3
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	4313      	orrs	r3, r2
 8004186:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d002      	beq.n	8004194 <vl53l5cx_set_ranging_mode+0x3c>
 800418e:	2b03      	cmp	r3, #3
 8004190:	d00b      	beq.n	80041aa <vl53l5cx_set_ranging_mode+0x52>
 8004192:	e015      	b.n	80041c0 <vl53l5cx_set_ranging_mode+0x68>
	{
		case VL53L5CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x03] = 0x3;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2203      	movs	r2, #3
 80041a0:	f883 2503 	strb.w	r2, [r3, #1283]	@ 0x503
			single_range = 0x00;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60bb      	str	r3, [r7, #8]
			break;
 80041a8:	e00d      	b.n	80041c6 <vl53l5cx_set_ranging_mode+0x6e>

		case VL53L5CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2203      	movs	r2, #3
 80041ae:	f883 2501 	strb.w	r2, [r3, #1281]	@ 0x501
			p_dev->temp_buffer[0x03] = 0x2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2202      	movs	r2, #2
 80041b6:	f883 2503 	strb.w	r2, [r3, #1283]	@ 0x503
			single_range = 0x01;
 80041ba:	2301      	movs	r3, #1
 80041bc:	60bb      	str	r3, [r7, #8]
			break;
 80041be:	e002      	b.n	80041c6 <vl53l5cx_set_ranging_mode+0x6e>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 80041c0:	237f      	movs	r3, #127	@ 0x7f
 80041c2:	73fb      	strb	r3, [r7, #15]
			break;
 80041c4:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f503 61a0 	add.w	r1, r3, #1280	@ 0x500
 80041cc:	2308      	movs	r3, #8
 80041ce:	f64a 5230 	movw	r2, #44336	@ 0xad30
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f8a2 	bl	800431c <vl53l5cx_dci_write_data>
 80041d8:	4603      	mov	r3, r0
 80041da:	461a      	mov	r2, r3
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	4313      	orrs	r3, r2
 80041e0:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80041e2:	f107 0108 	add.w	r1, r7, #8
 80041e6:	2304      	movs	r3, #4
 80041e8:	f64d 1264 	movw	r2, #55652	@ 0xd964
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f895 	bl	800431c <vl53l5cx_dci_write_data>
 80041f2:	4603      	mov	r3, r0
 80041f4:	461a      	mov	r2, r3
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SINGLE_RANGE, 
                        (uint16_t)sizeof(single_range));

	return status;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08c      	sub	sp, #48	@ 0x30
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 800421c:	887b      	ldrh	r3, [r7, #2]
 800421e:	330c      	adds	r3, #12
 8004220:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8004222:	4a3d      	ldr	r2, [pc, #244]	@ (8004318 <vl53l5cx_dci_read_data+0x110>)
 8004224:	f107 0314 	add.w	r3, r7, #20
 8004228:	ca07      	ldmia	r2, {r0, r1, r2}
 800422a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 800422e:	887b      	ldrh	r3, [r7, #2]
 8004230:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8004234:	d903      	bls.n	800423e <vl53l5cx_dci_read_data+0x36>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8004236:	23ff      	movs	r3, #255	@ 0xff
 8004238:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800423c:	e065      	b.n	800430a <vl53l5cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	b2db      	uxtb	r3, r3
 8004244:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 800424c:	887b      	ldrh	r3, [r7, #2]
 800424e:	111b      	asrs	r3, r3, #4
 8004250:	b2db      	uxtb	r3, r3
 8004252:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8004254:	887b      	ldrh	r3, [r7, #2]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	b2db      	uxtb	r3, r3
 800425c:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f107 0214 	add.w	r2, r7, #20
 8004264:	230c      	movs	r3, #12
 8004266:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 800426a:	f7fe f8ff 	bl	800246c <WrMulti>
 800426e:	4603      	mov	r3, r0
 8004270:	461a      	mov	r2, r3
 8004272:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004276:	4313      	orrs	r3, r2
 8004278:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800427c:	2303      	movs	r3, #3
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	23ff      	movs	r3, #255	@ 0xff
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8004288:	2201      	movs	r2, #1
 800428a:	2104      	movs	r1, #4
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7fe f9a4 	bl	80025da <_vl53l5cx_poll_for_answer>
 8004292:	4603      	mov	r3, r0
 8004294:	461a      	mov	r2, r3
 8004296:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800429a:	4313      	orrs	r3, r2
 800429c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 80042a0:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	f642 4104 	movw	r1, #11268	@ 0x2c04
 80042ae:	f7fe f917 	bl	80024e0 <RdMulti>
 80042b2:	4603      	mov	r3, r0
 80042b4:	461a      	mov	r2, r3
 80042b6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
 80042c6:	887b      	ldrh	r3, [r7, #2]
 80042c8:	330c      	adds	r3, #12
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	4619      	mov	r1, r3
 80042ce:	4610      	mov	r0, r2
 80042d0:	f7fe f940 	bl	8002554 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 80042d4:	2300      	movs	r3, #0
 80042d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80042d8:	e011      	b.n	80042fe <vl53l5cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 80042da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80042de:	1d1a      	adds	r2, r3, #4
 80042e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	440b      	add	r3, r1
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	440a      	add	r2, r1
 80042ec:	f892 2500 	ldrb.w	r2, [r2, #1280]	@ 0x500
 80042f0:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 80042f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3301      	adds	r3, #1
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80042fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004302:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8004306:	429a      	cmp	r2, r3
 8004308:	dbe7      	blt.n	80042da <vl53l5cx_dci_read_data+0xd2>
		}
	}

	return status;
 800430a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 800430e:	4618      	mov	r0, r3
 8004310:	3728      	adds	r7, #40	@ 0x28
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	08009b50 	.word	0x08009b50

0800431c <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08c      	sub	sp, #48	@ 0x30
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8004334:	2300      	movs	r3, #0
 8004336:	753b      	strb	r3, [r7, #20]
 8004338:	2300      	movs	r3, #0
 800433a:	757b      	strb	r3, [r7, #21]
 800433c:	2300      	movs	r3, #0
 800433e:	75bb      	strb	r3, [r7, #22]
 8004340:	230f      	movs	r3, #15
 8004342:	75fb      	strb	r3, [r7, #23]
 8004344:	2305      	movs	r3, #5
 8004346:	763b      	strb	r3, [r7, #24]
 8004348:	2301      	movs	r3, #1
 800434a:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 800434c:	887b      	ldrh	r3, [r7, #2]
 800434e:	3308      	adds	r3, #8
 8004350:	121b      	asrs	r3, r3, #8
 8004352:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8004354:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8004356:	887b      	ldrh	r3, [r7, #2]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	3308      	adds	r3, #8
 800435c:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 800435e:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 8004360:	887b      	ldrh	r3, [r7, #2]
 8004362:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 8004366:	3334      	adds	r3, #52	@ 0x34
 8004368:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 800436a:	887b      	ldrh	r3, [r7, #2]
 800436c:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8004370:	d903      	bls.n	800437a <vl53l5cx_dci_write_data+0x5e>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 8004372:	23ff      	movs	r3, #255	@ 0xff
 8004374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004378:	e068      	b.n	800444c <vl53l5cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	0a1b      	lsrs	r3, r3, #8
 800437e:	b2db      	uxtb	r3, r3
 8004380:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8004388:	887b      	ldrh	r3, [r7, #2]
 800438a:	111b      	asrs	r3, r3, #4
 800438c:	b2db      	uxtb	r3, r3
 800438e:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8004390:	887b      	ldrh	r3, [r7, #2]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	b2db      	uxtb	r3, r3
 8004398:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 800439a:	887b      	ldrh	r3, [r7, #2]
 800439c:	4619      	mov	r1, r3
 800439e:	68b8      	ldr	r0, [r7, #8]
 80043a0:	f7fe f8d8 	bl	8002554 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80043a4:	887b      	ldrh	r3, [r7, #2]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80043ac:	e012      	b.n	80043d4 <vl53l5cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 80043ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	441a      	add	r2, r3
 80043b6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80043ba:	3304      	adds	r3, #4
 80043bc:	7811      	ldrb	r1, [r2, #0]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	460a      	mov	r2, r1
 80043c4:	f883 2500 	strb.w	r2, [r3, #1280]	@ 0x500
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 80043c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80043d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80043d8:	2b00      	cmp	r3, #0
 80043da:	dae8      	bge.n	80043ae <vl53l5cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 80043e6:	887b      	ldrh	r3, [r7, #2]
 80043e8:	3304      	adds	r3, #4
 80043ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4413      	add	r3, r2
 80043f2:	461a      	mov	r2, r3
 80043f4:	f107 0314 	add.w	r3, r7, #20
 80043f8:	cb03      	ldmia	r3!, {r0, r1}
 80043fa:	6010      	str	r0, [r2, #0]
 80043fc:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 80043fe:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f503 62a0 	add.w	r2, r3, #1280	@ 0x500
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8004406:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8004408:	330c      	adds	r3, #12
 800440a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800440c:	f7fe f82e 	bl	800246c <WrMulti>
 8004410:	4603      	mov	r3, r0
 8004412:	461a      	mov	r2, r3
 8004414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004418:	4313      	orrs	r3, r2
 800441a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800441e:	2303      	movs	r3, #3
 8004420:	9301      	str	r3, [sp, #4]
 8004422:	23ff      	movs	r3, #255	@ 0xff
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800442a:	2201      	movs	r2, #1
 800442c:	2104      	movs	r1, #4
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f7fe f8d3 	bl	80025da <_vl53l5cx_poll_for_answer>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800443c:	4313      	orrs	r3, r2
 800443e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8004442:	887b      	ldrh	r3, [r7, #2]
 8004444:	4619      	mov	r1, r3
 8004446:	68b8      	ldr	r0, [r7, #8]
 8004448:	f7fe f884 	bl	8002554 <SwapBuffer>
	}

	return status;
 800444c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004450:	4618      	mov	r0, r3
 8004452:	3728      	adds	r7, #40	@ 0x28
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 800446a:	887b      	ldrh	r3, [r7, #2]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f7ff fec9 	bl	8004208 <vl53l5cx_dci_read_data>
 8004476:	4603      	mov	r3, r0
 8004478:	461a      	mov	r2, r3
 800447a:	7dfb      	ldrb	r3, [r7, #23]
 800447c:	4313      	orrs	r3, r2
 800447e:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8004480:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4413      	add	r3, r2
 8004486:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004488:	6a39      	ldr	r1, [r7, #32]
 800448a:	4618      	mov	r0, r3
 800448c:	f005 fb08 	bl	8009aa0 <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8004490:	887b      	ldrh	r3, [r7, #2]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f7ff ff40 	bl	800431c <vl53l5cx_dci_write_data>
 800449c:	4603      	mov	r3, r0
 800449e:	461a      	mov	r2, r3
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	75fb      	strb	r3, [r7, #23]

	return status;
 80044a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <BSP_W25Qx_Init>:

 /**********************************************************************************
  * 函数功能: 模块初始化
  */
uint8_t BSP_W25Qx_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
	BSP_W25Qx_Reset();
 80044b4:	f000 f806 	bl	80044c4 <BSP_W25Qx_Reset>
	return BSP_W25Qx_GetStatus();
 80044b8:	f000 f826 	bl	8004508 <BSP_W25Qx_GetStatus>
 80044bc:	4603      	mov	r3, r0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <BSP_W25Qx_Reset>:


static void	BSP_W25Qx_Reset(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
	uint8_t cmd[2] = {RESET_ENABLE_CMD,RESET_MEMORY_CMD};
 80044ca:	f649 1366 	movw	r3, #39270	@ 0x9966
 80044ce:	80bb      	strh	r3, [r7, #4]

	W25Qx_Enable();
 80044d0:	2200      	movs	r2, #0
 80044d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044d6:	480a      	ldr	r0, [pc, #40]	@ (8004500 <BSP_W25Qx_Reset+0x3c>)
 80044d8:	f000 fe16 	bl	8005108 <HAL_GPIO_WritePin>
	/* Send the reset command */
	HAL_SPI_Transmit(&hspi2, cmd, 2, W25Qx_TIMEOUT_VALUE);
 80044dc:	1d39      	adds	r1, r7, #4
 80044de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044e2:	2202      	movs	r2, #2
 80044e4:	4807      	ldr	r0, [pc, #28]	@ (8004504 <BSP_W25Qx_Reset+0x40>)
 80044e6:	f000 feca 	bl	800527e <HAL_SPI_Transmit>
	W25Qx_Disable();
 80044ea:	2201      	movs	r2, #1
 80044ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044f0:	4803      	ldr	r0, [pc, #12]	@ (8004500 <BSP_W25Qx_Reset+0x3c>)
 80044f2:	f000 fe09 	bl	8005108 <HAL_GPIO_WritePin>

}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	48000400 	.word	0x48000400
 8004504:	20001094 	.word	0x20001094

08004508 <BSP_W25Qx_GetStatus>:

 /**********************************************************************************
  * 函数功能: 获取设备状态
  */
static uint8_t BSP_W25Qx_GetStatus(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
	uint8_t cmd[] = {READ_STATUS_REG1_CMD};
 800450e:	2305      	movs	r3, #5
 8004510:	713b      	strb	r3, [r7, #4]
	uint8_t status;

	W25Qx_Enable();
 8004512:	2200      	movs	r2, #0
 8004514:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004518:	4811      	ldr	r0, [pc, #68]	@ (8004560 <BSP_W25Qx_GetStatus+0x58>)
 800451a:	f000 fdf5 	bl	8005108 <HAL_GPIO_WritePin>
	/* Send the read status command */
	HAL_SPI_Transmit(&hspi2, cmd, 1, W25Qx_TIMEOUT_VALUE);
 800451e:	1d39      	adds	r1, r7, #4
 8004520:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004524:	2201      	movs	r2, #1
 8004526:	480f      	ldr	r0, [pc, #60]	@ (8004564 <BSP_W25Qx_GetStatus+0x5c>)
 8004528:	f000 fea9 	bl	800527e <HAL_SPI_Transmit>
	/* Reception of the data */
	HAL_SPI_Receive(&hspi2,&status, 1, W25Qx_TIMEOUT_VALUE);
 800452c:	1cf9      	adds	r1, r7, #3
 800452e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004532:	2201      	movs	r2, #1
 8004534:	480b      	ldr	r0, [pc, #44]	@ (8004564 <BSP_W25Qx_GetStatus+0x5c>)
 8004536:	f001 f817 	bl	8005568 <HAL_SPI_Receive>
	W25Qx_Disable();
 800453a:	2201      	movs	r2, #1
 800453c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004540:	4807      	ldr	r0, [pc, #28]	@ (8004560 <BSP_W25Qx_GetStatus+0x58>)
 8004542:	f000 fde1 	bl	8005108 <HAL_GPIO_WritePin>

	/* Check the value of the register */
  if((status & W25Q128FV_FSR_BUSY) != 0)
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <BSP_W25Qx_GetStatus+0x4c>
  {
    return W25Qx_BUSY;
 8004550:	2302      	movs	r3, #2
 8004552:	e000      	b.n	8004556 <BSP_W25Qx_GetStatus+0x4e>
  }
	else
	{
		return W25Qx_OK;
 8004554:	2300      	movs	r3, #0
	}
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	48000400 	.word	0x48000400
 8004564:	20001094 	.word	0x20001094

08004568 <BSP_W25Qx_WriteEnable>:

 /**********************************************************************************
  * 函数功能: 写使能
  */
uint8_t BSP_W25Qx_WriteEnable(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
	uint8_t cmd[] = {WRITE_ENABLE_CMD};
 800456e:	2306      	movs	r3, #6
 8004570:	703b      	strb	r3, [r7, #0]
	uint32_t tickstart = HAL_GetTick();
 8004572:	f000 f989 	bl	8004888 <HAL_GetTick>
 8004576:	6078      	str	r0, [r7, #4]

	/*Select the FLASH: Chip Select low */
	W25Qx_Enable();
 8004578:	2200      	movs	r2, #0
 800457a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800457e:	4812      	ldr	r0, [pc, #72]	@ (80045c8 <BSP_W25Qx_WriteEnable+0x60>)
 8004580:	f000 fdc2 	bl	8005108 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 1, W25Qx_TIMEOUT_VALUE);
 8004584:	4639      	mov	r1, r7
 8004586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800458a:	2201      	movs	r2, #1
 800458c:	480f      	ldr	r0, [pc, #60]	@ (80045cc <BSP_W25Qx_WriteEnable+0x64>)
 800458e:	f000 fe76 	bl	800527e <HAL_SPI_Transmit>
	/*Deselect the FLASH: Chip Select high */
	W25Qx_Disable();
 8004592:	2201      	movs	r2, #1
 8004594:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004598:	480b      	ldr	r0, [pc, #44]	@ (80045c8 <BSP_W25Qx_WriteEnable+0x60>)
 800459a:	f000 fdb5 	bl	8005108 <HAL_GPIO_WritePin>

	/* Wait the end of Flash writing */
	while(BSP_W25Qx_GetStatus() == W25Qx_BUSY);
 800459e:	bf00      	nop
 80045a0:	f7ff ffb2 	bl	8004508 <BSP_W25Qx_GetStatus>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d0fa      	beq.n	80045a0 <BSP_W25Qx_WriteEnable+0x38>
	{
		/* Check for the Timeout */
    if((HAL_GetTick() - tickstart) > W25Qx_TIMEOUT_VALUE)
 80045aa:	f000 f96d 	bl	8004888 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045b8:	d901      	bls.n	80045be <BSP_W25Qx_WriteEnable+0x56>
    {
			return W25Qx_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e000      	b.n	80045c0 <BSP_W25Qx_WriteEnable+0x58>
    }
	}

	return W25Qx_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	48000400 	.word	0x48000400
 80045cc:	20001094 	.word	0x20001094

080045d0 <BSP_W25Qx_Read_ID>:

 /**********************************************************************************
  * 函数功能: 获取设备ID
  */
void BSP_W25Qx_Read_ID(uint8_t *ID)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = {READ_ID_CMD,0x00,0x00,0x00};
 80045d8:	2390      	movs	r3, #144	@ 0x90
 80045da:	60fb      	str	r3, [r7, #12]

	W25Qx_Enable();
 80045dc:	2200      	movs	r2, #0
 80045de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80045e2:	480e      	ldr	r0, [pc, #56]	@ (800461c <BSP_W25Qx_Read_ID+0x4c>)
 80045e4:	f000 fd90 	bl	8005108 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25Qx_TIMEOUT_VALUE);
 80045e8:	f107 010c 	add.w	r1, r7, #12
 80045ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045f0:	2204      	movs	r2, #4
 80045f2:	480b      	ldr	r0, [pc, #44]	@ (8004620 <BSP_W25Qx_Read_ID+0x50>)
 80045f4:	f000 fe43 	bl	800527e <HAL_SPI_Transmit>
	/* Reception of the data */
	HAL_SPI_Receive(&hspi2,ID, 2, W25Qx_TIMEOUT_VALUE);
 80045f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045fc:	2202      	movs	r2, #2
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4807      	ldr	r0, [pc, #28]	@ (8004620 <BSP_W25Qx_Read_ID+0x50>)
 8004602:	f000 ffb1 	bl	8005568 <HAL_SPI_Receive>
	W25Qx_Disable();
 8004606:	2201      	movs	r2, #1
 8004608:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800460c:	4803      	ldr	r0, [pc, #12]	@ (800461c <BSP_W25Qx_Read_ID+0x4c>)
 800460e:	f000 fd7b 	bl	8005108 <HAL_GPIO_WritePin>

}
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	48000400 	.word	0x48000400
 8004620:	20001094 	.word	0x20001094

08004624 <BSP_W25Qx_Read>:
 /**********************************************************************************
  * 函数功能: 读数据
  * 输入参数: 缓存数组指针、读地址、字节数
  */
uint8_t BSP_W25Qx_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
	uint8_t cmd[4];

	/* Configure the command */
	cmd[0] = READ_CMD;
 8004630:	2303      	movs	r3, #3
 8004632:	753b      	strb	r3, [r7, #20]
	cmd[1] = (uint8_t)(ReadAddr >> 16);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	0c1b      	lsrs	r3, r3, #16
 8004638:	b2db      	uxtb	r3, r3
 800463a:	757b      	strb	r3, [r7, #21]
	cmd[2] = (uint8_t)(ReadAddr >> 8);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	0a1b      	lsrs	r3, r3, #8
 8004640:	b2db      	uxtb	r3, r3
 8004642:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t)(ReadAddr);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	75fb      	strb	r3, [r7, #23]

	W25Qx_Enable();
 800464a:	2200      	movs	r2, #0
 800464c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004650:	4811      	ldr	r0, [pc, #68]	@ (8004698 <BSP_W25Qx_Read+0x74>)
 8004652:	f000 fd59 	bl	8005108 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25Qx_TIMEOUT_VALUE);
 8004656:	f107 0114 	add.w	r1, r7, #20
 800465a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800465e:	2204      	movs	r2, #4
 8004660:	480e      	ldr	r0, [pc, #56]	@ (800469c <BSP_W25Qx_Read+0x78>)
 8004662:	f000 fe0c 	bl	800527e <HAL_SPI_Transmit>
	/* Reception of the data */
	if (HAL_SPI_Receive(&hspi2, pData,Size,W25Qx_TIMEOUT_VALUE) != HAL_OK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	b29a      	uxth	r2, r3
 800466a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800466e:	68f9      	ldr	r1, [r7, #12]
 8004670:	480a      	ldr	r0, [pc, #40]	@ (800469c <BSP_W25Qx_Read+0x78>)
 8004672:	f000 ff79 	bl	8005568 <HAL_SPI_Receive>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <BSP_W25Qx_Read+0x5c>
  {
    return W25Qx_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e006      	b.n	800468e <BSP_W25Qx_Read+0x6a>
  }
	W25Qx_Disable();
 8004680:	2201      	movs	r2, #1
 8004682:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004686:	4804      	ldr	r0, [pc, #16]	@ (8004698 <BSP_W25Qx_Read+0x74>)
 8004688:	f000 fd3e 	bl	8005108 <HAL_GPIO_WritePin>
	return W25Qx_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	48000400 	.word	0x48000400
 800469c:	20001094 	.word	0x20001094

080046a0 <BSP_W25Qx_Write>:
 /**********************************************************************************
  * 函数功能: 写数据
  * 输入参数: 缓存数组指针、写地址、字节数
  */
uint8_t BSP_W25Qx_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	@ 0x28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
	uint8_t cmd[4];
	uint32_t end_addr, current_size, current_addr;
	uint32_t tickstart = HAL_GetTick();
 80046ac:	f000 f8ec 	bl	8004888 <HAL_GetTick>
 80046b0:	61f8      	str	r0, [r7, #28]

	/* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 80046b2:	2300      	movs	r3, #0
 80046b4:	623b      	str	r3, [r7, #32]

  while (current_addr <= WriteAddr)
 80046b6:	e003      	b.n	80046c0 <BSP_W25Qx_Write+0x20>
  {
    current_addr += W25Q128FV_PAGE_SIZE;
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80046be:	623b      	str	r3, [r7, #32]
  while (current_addr <= WriteAddr)
 80046c0:	6a3a      	ldr	r2, [r7, #32]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d9f7      	bls.n	80046b8 <BSP_W25Qx_Write+0x18>
  }
  current_size = current_addr - WriteAddr;
 80046c8:	6a3a      	ldr	r2, [r7, #32]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80046d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d901      	bls.n	80046dc <BSP_W25Qx_Write+0x3c>
  {
    current_size = Size;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	623b      	str	r3, [r7, #32]
  end_addr = WriteAddr + Size;
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4413      	add	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]

  /* Perform the write page by page */
  do
  {
		/* Configure the command */
		cmd[0] = PAGE_PROG_CMD;
 80046e8:	2302      	movs	r3, #2
 80046ea:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(current_addr >> 16);
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)(current_addr >> 8);
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)(current_addr);
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	75fb      	strb	r3, [r7, #23]

		/* Enable write operations */
		BSP_W25Qx_WriteEnable();
 8004702:	f7ff ff31 	bl	8004568 <BSP_W25Qx_WriteEnable>

		W25Qx_Enable();
 8004706:	2200      	movs	r2, #0
 8004708:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800470c:	4828      	ldr	r0, [pc, #160]	@ (80047b0 <BSP_W25Qx_Write+0x110>)
 800470e:	f000 fcfb 	bl	8005108 <HAL_GPIO_WritePin>
    /* Send the command */
    if (HAL_SPI_Transmit(&hspi2,cmd, 4, W25Qx_TIMEOUT_VALUE) != HAL_OK)
 8004712:	f107 0114 	add.w	r1, r7, #20
 8004716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800471a:	2204      	movs	r2, #4
 800471c:	4825      	ldr	r0, [pc, #148]	@ (80047b4 <BSP_W25Qx_Write+0x114>)
 800471e:	f000 fdae 	bl	800527e <HAL_SPI_Transmit>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <BSP_W25Qx_Write+0x8c>
    {
      return W25Qx_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e03c      	b.n	80047a6 <BSP_W25Qx_Write+0x106>
    }

    /* Transmission of the data */
    if (HAL_SPI_Transmit(&hspi2, pData,current_size, W25Qx_TIMEOUT_VALUE) != HAL_OK)
 800472c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472e:	b29a      	uxth	r2, r3
 8004730:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004734:	68f9      	ldr	r1, [r7, #12]
 8004736:	481f      	ldr	r0, [pc, #124]	@ (80047b4 <BSP_W25Qx_Write+0x114>)
 8004738:	f000 fda1 	bl	800527e <HAL_SPI_Transmit>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <BSP_W25Qx_Write+0xa6>
    {
      return W25Qx_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e02f      	b.n	80047a6 <BSP_W25Qx_Write+0x106>
    }
			W25Qx_Disable();
 8004746:	2201      	movs	r2, #1
 8004748:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800474c:	4818      	ldr	r0, [pc, #96]	@ (80047b0 <BSP_W25Qx_Write+0x110>)
 800474e:	f000 fcdb 	bl	8005108 <HAL_GPIO_WritePin>
    	/* Wait the end of Flash writing */
		while(BSP_W25Qx_GetStatus() == W25Qx_BUSY);
 8004752:	bf00      	nop
 8004754:	f7ff fed8 	bl	8004508 <BSP_W25Qx_GetStatus>
 8004758:	4603      	mov	r3, r0
 800475a:	2b02      	cmp	r3, #2
 800475c:	d0fa      	beq.n	8004754 <BSP_W25Qx_Write+0xb4>
		{
			/* Check for the Timeout */
			if((HAL_GetTick() - tickstart) > W25Qx_TIMEOUT_VALUE)
 800475e:	f000 f893 	bl	8004888 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800476c:	d901      	bls.n	8004772 <BSP_W25Qx_Write+0xd2>
			{
				return W25Qx_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e019      	b.n	80047a6 <BSP_W25Qx_Write+0x106>
			}
		}

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8004772:	6a3a      	ldr	r2, [r7, #32]
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	4413      	add	r3, r2
 8004778:	623b      	str	r3, [r7, #32]
    pData += current_size;
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	4413      	add	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + W25Q128FV_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : W25Q128FV_PAGE_SIZE;
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	429a      	cmp	r2, r3
 800478c:	d203      	bcs.n	8004796 <BSP_W25Qx_Write+0xf6>
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	e001      	b.n	800479a <BSP_W25Qx_Write+0xfa>
 8004796:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800479a:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (current_addr < end_addr);
 800479c:	6a3a      	ldr	r2, [r7, #32]
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d3a1      	bcc.n	80046e8 <BSP_W25Qx_Write+0x48>


	return W25Qx_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3728      	adds	r7, #40	@ 0x28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	48000400 	.word	0x48000400
 80047b4:	20001094 	.word	0x20001094

080047b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047c2:	2003      	movs	r0, #3
 80047c4:	f000 f93c 	bl	8004a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047c8:	200f      	movs	r0, #15
 80047ca:	f000 f80d 	bl	80047e8 <HAL_InitTick>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	71fb      	strb	r3, [r7, #7]
 80047d8:	e001      	b.n	80047de <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80047da:	f7fc fd3d 	bl	8001258 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047de:	79fb      	ldrb	r3, [r7, #7]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80047f4:	4b17      	ldr	r3, [pc, #92]	@ (8004854 <HAL_InitTick+0x6c>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d023      	beq.n	8004844 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80047fc:	4b16      	ldr	r3, [pc, #88]	@ (8004858 <HAL_InitTick+0x70>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4b14      	ldr	r3, [pc, #80]	@ (8004854 <HAL_InitTick+0x6c>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	4619      	mov	r1, r3
 8004806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800480a:	fbb3 f3f1 	udiv	r3, r3, r1
 800480e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f949 	bl	8004aaa <HAL_SYSTICK_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10f      	bne.n	800483e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b0f      	cmp	r3, #15
 8004822:	d809      	bhi.n	8004838 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004824:	2200      	movs	r2, #0
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	f04f 30ff 	mov.w	r0, #4294967295
 800482c:	f000 f913 	bl	8004a56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004830:	4a0a      	ldr	r2, [pc, #40]	@ (800485c <HAL_InitTick+0x74>)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	e007      	b.n	8004848 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
 800483c:	e004      	b.n	8004848 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	73fb      	strb	r3, [r7, #15]
 8004842:	e001      	b.n	8004848 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004848:	7bfb      	ldrb	r3, [r7, #15]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20000008 	.word	0x20000008
 8004858:	20000000 	.word	0x20000000
 800485c:	20000004 	.word	0x20000004

08004860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004864:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <HAL_IncTick+0x20>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	4b06      	ldr	r3, [pc, #24]	@ (8004884 <HAL_IncTick+0x24>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4413      	add	r3, r2
 8004870:	4a04      	ldr	r2, [pc, #16]	@ (8004884 <HAL_IncTick+0x24>)
 8004872:	6013      	str	r3, [r2, #0]
}
 8004874:	bf00      	nop
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000008 	.word	0x20000008
 8004884:	20001188 	.word	0x20001188

08004888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return uwTick;
 800488c:	4b03      	ldr	r3, [pc, #12]	@ (800489c <HAL_GetTick+0x14>)
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	20001188 	.word	0x20001188

080048a0 <__NVIC_SetPriorityGrouping>:
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048b0:	4b0c      	ldr	r3, [pc, #48]	@ (80048e4 <__NVIC_SetPriorityGrouping+0x44>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048bc:	4013      	ands	r3, r2
 80048be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048d2:	4a04      	ldr	r2, [pc, #16]	@ (80048e4 <__NVIC_SetPriorityGrouping+0x44>)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	60d3      	str	r3, [r2, #12]
}
 80048d8:	bf00      	nop
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	e000ed00 	.word	0xe000ed00

080048e8 <__NVIC_GetPriorityGrouping>:
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048ec:	4b04      	ldr	r3, [pc, #16]	@ (8004900 <__NVIC_GetPriorityGrouping+0x18>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	0a1b      	lsrs	r3, r3, #8
 80048f2:	f003 0307 	and.w	r3, r3, #7
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	e000ed00 	.word	0xe000ed00

08004904 <__NVIC_EnableIRQ>:
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800490e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004912:	2b00      	cmp	r3, #0
 8004914:	db0b      	blt.n	800492e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	f003 021f 	and.w	r2, r3, #31
 800491c:	4907      	ldr	r1, [pc, #28]	@ (800493c <__NVIC_EnableIRQ+0x38>)
 800491e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	2001      	movs	r0, #1
 8004926:	fa00 f202 	lsl.w	r2, r0, r2
 800492a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	e000e100 	.word	0xe000e100

08004940 <__NVIC_SetPriority>:
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	6039      	str	r1, [r7, #0]
 800494a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800494c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004950:	2b00      	cmp	r3, #0
 8004952:	db0a      	blt.n	800496a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	b2da      	uxtb	r2, r3
 8004958:	490c      	ldr	r1, [pc, #48]	@ (800498c <__NVIC_SetPriority+0x4c>)
 800495a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495e:	0112      	lsls	r2, r2, #4
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	440b      	add	r3, r1
 8004964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004968:	e00a      	b.n	8004980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	4908      	ldr	r1, [pc, #32]	@ (8004990 <__NVIC_SetPriority+0x50>)
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	3b04      	subs	r3, #4
 8004978:	0112      	lsls	r2, r2, #4
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	440b      	add	r3, r1
 800497e:	761a      	strb	r2, [r3, #24]
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	e000e100 	.word	0xe000e100
 8004990:	e000ed00 	.word	0xe000ed00

08004994 <NVIC_EncodePriority>:
{
 8004994:	b480      	push	{r7}
 8004996:	b089      	sub	sp, #36	@ 0x24
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f1c3 0307 	rsb	r3, r3, #7
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	bf28      	it	cs
 80049b2:	2304      	movcs	r3, #4
 80049b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	3304      	adds	r3, #4
 80049ba:	2b06      	cmp	r3, #6
 80049bc:	d902      	bls.n	80049c4 <NVIC_EncodePriority+0x30>
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	3b03      	subs	r3, #3
 80049c2:	e000      	b.n	80049c6 <NVIC_EncodePriority+0x32>
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c8:	f04f 32ff 	mov.w	r2, #4294967295
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43da      	mvns	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	401a      	ands	r2, r3
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049dc:	f04f 31ff 	mov.w	r1, #4294967295
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	fa01 f303 	lsl.w	r3, r1, r3
 80049e6:	43d9      	mvns	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049ec:	4313      	orrs	r3, r2
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3724      	adds	r7, #36	@ 0x24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
	...

080049fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a0c:	d301      	bcc.n	8004a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e00f      	b.n	8004a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a12:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <SysTick_Config+0x40>)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a1a:	210f      	movs	r1, #15
 8004a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a20:	f7ff ff8e 	bl	8004940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a24:	4b05      	ldr	r3, [pc, #20]	@ (8004a3c <SysTick_Config+0x40>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a2a:	4b04      	ldr	r3, [pc, #16]	@ (8004a3c <SysTick_Config+0x40>)
 8004a2c:	2207      	movs	r2, #7
 8004a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	e000e010 	.word	0xe000e010

08004a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff ff29 	bl	80048a0 <__NVIC_SetPriorityGrouping>
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b086      	sub	sp, #24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a68:	f7ff ff3e 	bl	80048e8 <__NVIC_GetPriorityGrouping>
 8004a6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	6978      	ldr	r0, [r7, #20]
 8004a74:	f7ff ff8e 	bl	8004994 <NVIC_EncodePriority>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff ff5d 	bl	8004940 <__NVIC_SetPriority>
}
 8004a86:	bf00      	nop
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b082      	sub	sp, #8
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	4603      	mov	r3, r0
 8004a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff ff31 	bl	8004904 <__NVIC_EnableIRQ>
}
 8004aa2:	bf00      	nop
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff ffa2 	bl	80049fc <SysTick_Config>
 8004ab8:	4603      	mov	r3, r0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e098      	b.n	8004c08 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	4b4d      	ldr	r3, [pc, #308]	@ (8004c14 <HAL_DMA_Init+0x150>)
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d80f      	bhi.n	8004b02 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8004c18 <HAL_DMA_Init+0x154>)
 8004aea:	4413      	add	r3, r2
 8004aec:	4a4b      	ldr	r2, [pc, #300]	@ (8004c1c <HAL_DMA_Init+0x158>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	009a      	lsls	r2, r3, #2
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a48      	ldr	r2, [pc, #288]	@ (8004c20 <HAL_DMA_Init+0x15c>)
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b00:	e00e      	b.n	8004b20 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	4b46      	ldr	r3, [pc, #280]	@ (8004c24 <HAL_DMA_Init+0x160>)
 8004b0a:	4413      	add	r3, r2
 8004b0c:	4a43      	ldr	r2, [pc, #268]	@ (8004c1c <HAL_DMA_Init+0x158>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	091b      	lsrs	r3, r3, #4
 8004b14:	009a      	lsls	r2, r3, #2
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a42      	ldr	r2, [pc, #264]	@ (8004c28 <HAL_DMA_Init+0x164>)
 8004b1e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b7a:	d039      	beq.n	8004bf0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b80:	4a27      	ldr	r2, [pc, #156]	@ (8004c20 <HAL_DMA_Init+0x15c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d11a      	bne.n	8004bbc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004b86:	4b29      	ldr	r3, [pc, #164]	@ (8004c2c <HAL_DMA_Init+0x168>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8e:	f003 031c 	and.w	r3, r3, #28
 8004b92:	210f      	movs	r1, #15
 8004b94:	fa01 f303 	lsl.w	r3, r1, r3
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	4924      	ldr	r1, [pc, #144]	@ (8004c2c <HAL_DMA_Init+0x168>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004ba0:	4b22      	ldr	r3, [pc, #136]	@ (8004c2c <HAL_DMA_Init+0x168>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6859      	ldr	r1, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bac:	f003 031c 	and.w	r3, r3, #28
 8004bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb4:	491d      	ldr	r1, [pc, #116]	@ (8004c2c <HAL_DMA_Init+0x168>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]
 8004bba:	e019      	b.n	8004bf0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8004c30 <HAL_DMA_Init+0x16c>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc4:	f003 031c 	and.w	r3, r3, #28
 8004bc8:	210f      	movs	r1, #15
 8004bca:	fa01 f303 	lsl.w	r3, r1, r3
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	4917      	ldr	r1, [pc, #92]	@ (8004c30 <HAL_DMA_Init+0x16c>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004bd6:	4b16      	ldr	r3, [pc, #88]	@ (8004c30 <HAL_DMA_Init+0x16c>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6859      	ldr	r1, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	f003 031c 	and.w	r3, r3, #28
 8004be6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bea:	4911      	ldr	r1, [pc, #68]	@ (8004c30 <HAL_DMA_Init+0x16c>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	40020407 	.word	0x40020407
 8004c18:	bffdfff8 	.word	0xbffdfff8
 8004c1c:	cccccccd 	.word	0xcccccccd
 8004c20:	40020000 	.word	0x40020000
 8004c24:	bffdfbf8 	.word	0xbffdfbf8
 8004c28:	40020400 	.word	0x40020400
 8004c2c:	400200a8 	.word	0x400200a8
 8004c30:	400204a8 	.word	0x400204a8

08004c34 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d005      	beq.n	8004c58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
 8004c56:	e029      	b.n	8004cac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 020e 	bic.w	r2, r2, #14
 8004c66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0201 	bic.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7c:	f003 021c 	and.w	r2, r3, #28
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c84:	2101      	movs	r1, #1
 8004c86:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	4798      	blx	r3
    }
  }
  return status;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd2:	f003 031c 	and.w	r3, r3, #28
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	409a      	lsls	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d026      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x7a>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d021      	beq.n	8004d30 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d107      	bne.n	8004d0a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0204 	bic.w	r2, r2, #4
 8004d08:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0e:	f003 021c 	and.w	r2, r3, #28
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d16:	2104      	movs	r1, #4
 8004d18:	fa01 f202 	lsl.w	r2, r1, r2
 8004d1c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d071      	beq.n	8004e0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004d2e:	e06c      	b.n	8004e0a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d34:	f003 031c 	and.w	r3, r3, #28
 8004d38:	2202      	movs	r2, #2
 8004d3a:	409a      	lsls	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d02e      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xec>
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d029      	beq.n	8004da2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10b      	bne.n	8004d74 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 020a 	bic.w	r2, r2, #10
 8004d6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d78:	f003 021c 	and.w	r2, r3, #28
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d80:	2102      	movs	r1, #2
 8004d82:	fa01 f202 	lsl.w	r2, r1, r2
 8004d86:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d038      	beq.n	8004e0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004da0:	e033      	b.n	8004e0a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da6:	f003 031c 	and.w	r3, r3, #28
 8004daa:	2208      	movs	r2, #8
 8004dac:	409a      	lsls	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d02a      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x156>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d025      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 020e 	bic.w	r2, r2, #14
 8004dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd4:	f003 021c 	and.w	r2, r3, #28
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ddc:	2101      	movs	r1, #1
 8004dde:	fa01 f202 	lsl.w	r2, r1, r2
 8004de2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d004      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004e0a:	bf00      	nop
 8004e0c:	bf00      	nop
}
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e22:	e154      	b.n	80050ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	2101      	movs	r1, #1
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e30:	4013      	ands	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8146 	beq.w	80050c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d005      	beq.n	8004e54 <HAL_GPIO_Init+0x40>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d130      	bne.n	8004eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	2203      	movs	r2, #3
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4013      	ands	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	f003 0201 	and.w	r2, r3, #1
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d017      	beq.n	8004ef2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	2203      	movs	r2, #3
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d123      	bne.n	8004f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	08da      	lsrs	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3208      	adds	r2, #8
 8004f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	220f      	movs	r2, #15
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	08da      	lsrs	r2, r3, #3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3208      	adds	r2, #8
 8004f40:	6939      	ldr	r1, [r7, #16]
 8004f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	2203      	movs	r2, #3
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	43db      	mvns	r3, r3
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f003 0203 	and.w	r2, r3, #3
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 80a0 	beq.w	80050c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f88:	4b58      	ldr	r3, [pc, #352]	@ (80050ec <HAL_GPIO_Init+0x2d8>)
 8004f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f8c:	4a57      	ldr	r2, [pc, #348]	@ (80050ec <HAL_GPIO_Init+0x2d8>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f94:	4b55      	ldr	r3, [pc, #340]	@ (80050ec <HAL_GPIO_Init+0x2d8>)
 8004f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fa0:	4a53      	ldr	r2, [pc, #332]	@ (80050f0 <HAL_GPIO_Init+0x2dc>)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	089b      	lsrs	r3, r3, #2
 8004fa6:	3302      	adds	r3, #2
 8004fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	220f      	movs	r2, #15
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004fca:	d019      	beq.n	8005000 <HAL_GPIO_Init+0x1ec>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a49      	ldr	r2, [pc, #292]	@ (80050f4 <HAL_GPIO_Init+0x2e0>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d013      	beq.n	8004ffc <HAL_GPIO_Init+0x1e8>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a48      	ldr	r2, [pc, #288]	@ (80050f8 <HAL_GPIO_Init+0x2e4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00d      	beq.n	8004ff8 <HAL_GPIO_Init+0x1e4>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a47      	ldr	r2, [pc, #284]	@ (80050fc <HAL_GPIO_Init+0x2e8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d007      	beq.n	8004ff4 <HAL_GPIO_Init+0x1e0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a46      	ldr	r2, [pc, #280]	@ (8005100 <HAL_GPIO_Init+0x2ec>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d101      	bne.n	8004ff0 <HAL_GPIO_Init+0x1dc>
 8004fec:	2304      	movs	r3, #4
 8004fee:	e008      	b.n	8005002 <HAL_GPIO_Init+0x1ee>
 8004ff0:	2307      	movs	r3, #7
 8004ff2:	e006      	b.n	8005002 <HAL_GPIO_Init+0x1ee>
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e004      	b.n	8005002 <HAL_GPIO_Init+0x1ee>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e002      	b.n	8005002 <HAL_GPIO_Init+0x1ee>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <HAL_GPIO_Init+0x1ee>
 8005000:	2300      	movs	r3, #0
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	f002 0203 	and.w	r2, r2, #3
 8005008:	0092      	lsls	r2, r2, #2
 800500a:	4093      	lsls	r3, r2
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005012:	4937      	ldr	r1, [pc, #220]	@ (80050f0 <HAL_GPIO_Init+0x2dc>)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	089b      	lsrs	r3, r3, #2
 8005018:	3302      	adds	r3, #2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005020:	4b38      	ldr	r3, [pc, #224]	@ (8005104 <HAL_GPIO_Init+0x2f0>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	43db      	mvns	r3, r3
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4013      	ands	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005044:	4a2f      	ldr	r2, [pc, #188]	@ (8005104 <HAL_GPIO_Init+0x2f0>)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800504a:	4b2e      	ldr	r3, [pc, #184]	@ (8005104 <HAL_GPIO_Init+0x2f0>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	43db      	mvns	r3, r3
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4013      	ands	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800506e:	4a25      	ldr	r2, [pc, #148]	@ (8005104 <HAL_GPIO_Init+0x2f0>)
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005074:	4b23      	ldr	r3, [pc, #140]	@ (8005104 <HAL_GPIO_Init+0x2f0>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	43db      	mvns	r3, r3
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4013      	ands	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005098:	4a1a      	ldr	r2, [pc, #104]	@ (8005104 <HAL_GPIO_Init+0x2f0>)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800509e:	4b19      	ldr	r3, [pc, #100]	@ (8005104 <HAL_GPIO_Init+0x2f0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	43db      	mvns	r3, r3
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4013      	ands	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050c2:	4a10      	ldr	r2, [pc, #64]	@ (8005104 <HAL_GPIO_Init+0x2f0>)
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	3301      	adds	r3, #1
 80050cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f47f aea3 	bne.w	8004e24 <HAL_GPIO_Init+0x10>
  }
}
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	371c      	adds	r7, #28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40021000 	.word	0x40021000
 80050f0:	40010000 	.word	0x40010000
 80050f4:	48000400 	.word	0x48000400
 80050f8:	48000800 	.word	0x48000800
 80050fc:	48000c00 	.word	0x48000c00
 8005100:	48001000 	.word	0x48001000
 8005104:	40010400 	.word	0x40010400

08005108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	807b      	strh	r3, [r7, #2]
 8005114:	4613      	mov	r3, r2
 8005116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005118:	787b      	ldrb	r3, [r7, #1]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800511e:	887a      	ldrh	r2, [r7, #2]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005124:	e002      	b.n	800512c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005126:	887a      	ldrh	r2, [r7, #2]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e095      	b.n	8005276 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514e:	2b00      	cmp	r3, #0
 8005150:	d108      	bne.n	8005164 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800515a:	d009      	beq.n	8005170 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	61da      	str	r2, [r3, #28]
 8005162:	e005      	b.n	8005170 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fb ff8c 	bl	80010a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051b0:	d902      	bls.n	80051b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	e002      	b.n	80051be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80051c6:	d007      	beq.n	80051d8 <HAL_SPI_Init+0xa0>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051d0:	d002      	beq.n	80051d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800521a:	ea42 0103 	orr.w	r1, r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005222:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	0c1b      	lsrs	r3, r3, #16
 8005234:	f003 0204 	and.w	r2, r3, #4
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005254:	ea42 0103 	orr.w	r1, r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b088      	sub	sp, #32
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	603b      	str	r3, [r7, #0]
 800528a:	4613      	mov	r3, r2
 800528c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_SPI_Transmit+0x22>
 800529c:	2302      	movs	r3, #2
 800529e:	e15f      	b.n	8005560 <HAL_SPI_Transmit+0x2e2>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052a8:	f7ff faee 	bl	8004888 <HAL_GetTick>
 80052ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d002      	beq.n	80052c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052be:	2302      	movs	r3, #2
 80052c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052c2:	e148      	b.n	8005556 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <HAL_SPI_Transmit+0x52>
 80052ca:	88fb      	ldrh	r3, [r7, #6]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d102      	bne.n	80052d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052d4:	e13f      	b.n	8005556 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2203      	movs	r2, #3
 80052da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	88fa      	ldrh	r2, [r7, #6]
 80052ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	88fa      	ldrh	r2, [r7, #6]
 80052f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005320:	d10f      	bne.n	8005342 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005330:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005340:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534c:	2b40      	cmp	r3, #64	@ 0x40
 800534e:	d007      	beq.n	8005360 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800535e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005368:	d94f      	bls.n	800540a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_SPI_Transmit+0xfa>
 8005372:	8afb      	ldrh	r3, [r7, #22]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d142      	bne.n	80053fe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537c:	881a      	ldrh	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005388:	1c9a      	adds	r2, r3, #2
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800539c:	e02f      	b.n	80053fe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d112      	bne.n	80053d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b0:	881a      	ldrh	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053bc:	1c9a      	adds	r2, r3, #2
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053d0:	e015      	b.n	80053fe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053d2:	f7ff fa59 	bl	8004888 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d803      	bhi.n	80053ea <HAL_SPI_Transmit+0x16c>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d102      	bne.n	80053f0 <HAL_SPI_Transmit+0x172>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d106      	bne.n	80053fe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80053fc:	e0ab      	b.n	8005556 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005402:	b29b      	uxth	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1ca      	bne.n	800539e <HAL_SPI_Transmit+0x120>
 8005408:	e080      	b.n	800550c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_SPI_Transmit+0x19a>
 8005412:	8afb      	ldrh	r3, [r7, #22]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d174      	bne.n	8005502 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b01      	cmp	r3, #1
 8005420:	d912      	bls.n	8005448 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005426:	881a      	ldrh	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005432:	1c9a      	adds	r2, r3, #2
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b02      	subs	r3, #2
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005446:	e05c      	b.n	8005502 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	330c      	adds	r3, #12
 8005452:	7812      	ldrb	r2, [r2, #0]
 8005454:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800546e:	e048      	b.n	8005502 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b02      	cmp	r3, #2
 800547c:	d12b      	bne.n	80054d6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	d912      	bls.n	80054ae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548c:	881a      	ldrh	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005498:	1c9a      	adds	r2, r3, #2
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b02      	subs	r3, #2
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054ac:	e029      	b.n	8005502 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	330c      	adds	r3, #12
 80054b8:	7812      	ldrb	r2, [r2, #0]
 80054ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054d4:	e015      	b.n	8005502 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054d6:	f7ff f9d7 	bl	8004888 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d803      	bhi.n	80054ee <HAL_SPI_Transmit+0x270>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d102      	bne.n	80054f4 <HAL_SPI_Transmit+0x276>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005500:	e029      	b.n	8005556 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1b1      	bne.n	8005470 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	6839      	ldr	r1, [r7, #0]
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 fe0d 	bl	8006130 <SPI_EndRxTxTransaction>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	613b      	str	r3, [r7, #16]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e003      	b.n	8005556 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800555e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af02      	add	r7, sp, #8
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	4613      	mov	r3, r2
 8005576:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	d002      	beq.n	800558e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005588:	2302      	movs	r3, #2
 800558a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800558c:	e11a      	b.n	80057c4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005596:	d112      	bne.n	80055be <HAL_SPI_Receive+0x56>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10e      	bne.n	80055be <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2204      	movs	r2, #4
 80055a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055a8:	88fa      	ldrh	r2, [r7, #6]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	4613      	mov	r3, r2
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f90e 	bl	80057d6 <HAL_SPI_TransmitReceive>
 80055ba:	4603      	mov	r3, r0
 80055bc:	e107      	b.n	80057ce <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_SPI_Receive+0x64>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e100      	b.n	80057ce <HAL_SPI_Receive+0x266>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055d4:	f7ff f958 	bl	8004888 <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <HAL_SPI_Receive+0x7e>
 80055e0:	88fb      	ldrh	r3, [r7, #6]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d102      	bne.n	80055ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055ea:	e0eb      	b.n	80057c4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2204      	movs	r2, #4
 80055f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	88fa      	ldrh	r2, [r7, #6]
 8005604:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005636:	d908      	bls.n	800564a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005646:	605a      	str	r2, [r3, #4]
 8005648:	e007      	b.n	800565a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005658:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005662:	d10f      	bne.n	8005684 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005672:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005682:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568e:	2b40      	cmp	r3, #64	@ 0x40
 8005690:	d007      	beq.n	80056a2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056a0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056aa:	d86f      	bhi.n	800578c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056ac:	e034      	b.n	8005718 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d117      	bne.n	80056ec <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f103 020c 	add.w	r2, r3, #12
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80056ea:	e015      	b.n	8005718 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ec:	f7ff f8cc 	bl	8004888 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d803      	bhi.n	8005704 <HAL_SPI_Receive+0x19c>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005702:	d102      	bne.n	800570a <HAL_SPI_Receive+0x1a2>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005716:	e055      	b.n	80057c4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1c4      	bne.n	80056ae <HAL_SPI_Receive+0x146>
 8005724:	e038      	b.n	8005798 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b01      	cmp	r3, #1
 8005732:	d115      	bne.n	8005760 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	b292      	uxth	r2, r2
 8005740:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	1c9a      	adds	r2, r3, #2
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005752:	b29b      	uxth	r3, r3
 8005754:	3b01      	subs	r3, #1
 8005756:	b29a      	uxth	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800575e:	e015      	b.n	800578c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005760:	f7ff f892 	bl	8004888 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d803      	bhi.n	8005778 <HAL_SPI_Receive+0x210>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d102      	bne.n	800577e <HAL_SPI_Receive+0x216>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800578a:	e01b      	b.n	80057c4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1c6      	bne.n	8005726 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	6839      	ldr	r1, [r7, #0]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fc6f 	bl	8006080 <SPI_EndRxTransaction>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	75fb      	strb	r3, [r7, #23]
 80057ba:	e003      	b.n	80057c4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b08a      	sub	sp, #40	@ 0x28
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057e4:	2301      	movs	r3, #1
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_SPI_TransmitReceive+0x26>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e20a      	b.n	8005c12 <HAL_SPI_TransmitReceive+0x43c>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005804:	f7ff f840 	bl	8004888 <HAL_GetTick>
 8005808:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005810:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005818:	887b      	ldrh	r3, [r7, #2]
 800581a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800581c:	887b      	ldrh	r3, [r7, #2]
 800581e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005820:	7efb      	ldrb	r3, [r7, #27]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d00e      	beq.n	8005844 <HAL_SPI_TransmitReceive+0x6e>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800582c:	d106      	bne.n	800583c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d102      	bne.n	800583c <HAL_SPI_TransmitReceive+0x66>
 8005836:	7efb      	ldrb	r3, [r7, #27]
 8005838:	2b04      	cmp	r3, #4
 800583a:	d003      	beq.n	8005844 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800583c:	2302      	movs	r3, #2
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005842:	e1e0      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d005      	beq.n	8005856 <HAL_SPI_TransmitReceive+0x80>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <HAL_SPI_TransmitReceive+0x80>
 8005850:	887b      	ldrh	r3, [r7, #2]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d103      	bne.n	800585e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800585c:	e1d3      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b04      	cmp	r3, #4
 8005868:	d003      	beq.n	8005872 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2205      	movs	r2, #5
 800586e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	887a      	ldrh	r2, [r7, #2]
 8005882:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	887a      	ldrh	r2, [r7, #2]
 800588a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	887a      	ldrh	r2, [r7, #2]
 8005898:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	887a      	ldrh	r2, [r7, #2]
 800589e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058b4:	d802      	bhi.n	80058bc <HAL_SPI_TransmitReceive+0xe6>
 80058b6:	8a3b      	ldrh	r3, [r7, #16]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d908      	bls.n	80058ce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058ca:	605a      	str	r2, [r3, #4]
 80058cc:	e007      	b.n	80058de <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058dc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e8:	2b40      	cmp	r3, #64	@ 0x40
 80058ea:	d007      	beq.n	80058fc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005904:	f240 8081 	bls.w	8005a0a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <HAL_SPI_TransmitReceive+0x140>
 8005910:	8a7b      	ldrh	r3, [r7, #18]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d16d      	bne.n	80059f2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591a:	881a      	ldrh	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005926:	1c9a      	adds	r2, r3, #2
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800593a:	e05a      	b.n	80059f2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b02      	cmp	r3, #2
 8005948:	d11b      	bne.n	8005982 <HAL_SPI_TransmitReceive+0x1ac>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d016      	beq.n	8005982 <HAL_SPI_TransmitReceive+0x1ac>
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	2b01      	cmp	r3, #1
 8005958:	d113      	bne.n	8005982 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595e:	881a      	ldrh	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596a:	1c9a      	adds	r2, r3, #2
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005974:	b29b      	uxth	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b01      	cmp	r3, #1
 800598e:	d11c      	bne.n	80059ca <HAL_SPI_TransmitReceive+0x1f4>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d016      	beq.n	80059ca <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	b292      	uxth	r2, r2
 80059a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ae:	1c9a      	adds	r2, r3, #2
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059c6:	2301      	movs	r3, #1
 80059c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059ca:	f7fe ff5d 	bl	8004888 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d80b      	bhi.n	80059f2 <HAL_SPI_TransmitReceive+0x21c>
 80059da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d007      	beq.n	80059f2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80059f0:	e109      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d19f      	bne.n	800593c <HAL_SPI_TransmitReceive+0x166>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d199      	bne.n	800593c <HAL_SPI_TransmitReceive+0x166>
 8005a08:	e0e3      	b.n	8005bd2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_SPI_TransmitReceive+0x244>
 8005a12:	8a7b      	ldrh	r3, [r7, #18]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	f040 80cf 	bne.w	8005bb8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d912      	bls.n	8005a4a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a28:	881a      	ldrh	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a34:	1c9a      	adds	r2, r3, #2
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b02      	subs	r3, #2
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a48:	e0b6      	b.n	8005bb8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	7812      	ldrb	r2, [r2, #0]
 8005a56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a70:	e0a2      	b.n	8005bb8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d134      	bne.n	8005aea <HAL_SPI_TransmitReceive+0x314>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d02f      	beq.n	8005aea <HAL_SPI_TransmitReceive+0x314>
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d12c      	bne.n	8005aea <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d912      	bls.n	8005ac0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9e:	881a      	ldrh	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aaa:	1c9a      	adds	r2, r3, #2
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b02      	subs	r3, #2
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005abe:	e012      	b.n	8005ae6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	330c      	adds	r3, #12
 8005aca:	7812      	ldrb	r2, [r2, #0]
 8005acc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d148      	bne.n	8005b8a <HAL_SPI_TransmitReceive+0x3b4>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d042      	beq.n	8005b8a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d923      	bls.n	8005b58 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1a:	b292      	uxth	r2, r2
 8005b1c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	1c9a      	adds	r2, r3, #2
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	3b02      	subs	r3, #2
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d81f      	bhi.n	8005b86 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	e016      	b.n	8005b86 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f103 020c 	add.w	r2, r3, #12
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b64:	7812      	ldrb	r2, [r2, #0]
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b86:	2301      	movs	r3, #1
 8005b88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b8a:	f7fe fe7d 	bl	8004888 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d803      	bhi.n	8005ba2 <HAL_SPI_TransmitReceive+0x3cc>
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d102      	bne.n	8005ba8 <HAL_SPI_TransmitReceive+0x3d2>
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d107      	bne.n	8005bb8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005bb6:	e026      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f47f af57 	bne.w	8005a72 <HAL_SPI_TransmitReceive+0x29c>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f47f af50 	bne.w	8005a72 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 faaa 	bl	8006130 <SPI_EndRxTxTransaction>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2220      	movs	r2, #32
 8005bec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bfc:	e003      	b.n	8005c06 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005c0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3728      	adds	r7, #40	@ 0x28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10e      	bne.n	8005c5c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d004      	beq.n	8005c5c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	4798      	blx	r3
    return;
 8005c5a:	e0ce      	b.n	8005dfa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d009      	beq.n	8005c7a <HAL_SPI_IRQHandler+0x5e>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d004      	beq.n	8005c7a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	4798      	blx	r3
    return;
 8005c78:	e0bf      	b.n	8005dfa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <HAL_SPI_IRQHandler+0x7e>
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d105      	bne.n	8005c9a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80b0 	beq.w	8005dfa <HAL_SPI_IRQHandler+0x1de>
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80aa 	beq.w	8005dfa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d023      	beq.n	8005cf8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d011      	beq.n	8005ce0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cc0:	f043 0204 	orr.w	r2, r3, #4
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	e00b      	b.n	8005cf8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]
        return;
 8005cf6:	e080      	b.n	8005dfa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d014      	beq.n	8005d2c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d06:	f043 0201 	orr.w	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00c      	beq.n	8005d50 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d3a:	f043 0208 	orr.w	r2, r3, #8
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005d42:	2300      	movs	r3, #0
 8005d44:	60bb      	str	r3, [r7, #8]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	60bb      	str	r3, [r7, #8]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d04f      	beq.n	8005df8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d66:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d104      	bne.n	8005d84 <HAL_SPI_IRQHandler+0x168>
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d034      	beq.n	8005dee <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0203 	bic.w	r2, r2, #3
 8005d92:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d011      	beq.n	8005dc0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da0:	4a17      	ldr	r2, [pc, #92]	@ (8005e00 <HAL_SPI_IRQHandler+0x1e4>)
 8005da2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fe ff43 	bl	8004c34 <HAL_DMA_Abort_IT>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d016      	beq.n	8005df6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8005e00 <HAL_SPI_IRQHandler+0x1e4>)
 8005dce:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe ff2d 	bl	8004c34 <HAL_DMA_Abort_IT>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005dec:	e003      	b.n	8005df6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f808 	bl	8005e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005df4:	e000      	b.n	8005df8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005df6:	bf00      	nop
    return;
 8005df8:	bf00      	nop
  }
}
 8005dfa:	3720      	adds	r7, #32
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	08005e19 	.word	0x08005e19

08005e04 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff ffe5 	bl	8005e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e3a:	bf00      	nop
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e54:	f7fe fd18 	bl	8004888 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5c:	1a9b      	subs	r3, r3, r2
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	4413      	add	r3, r2
 8005e62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e64:	f7fe fd10 	bl	8004888 <HAL_GetTick>
 8005e68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e6a:	4b39      	ldr	r3, [pc, #228]	@ (8005f50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	015b      	lsls	r3, r3, #5
 8005e70:	0d1b      	lsrs	r3, r3, #20
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	fb02 f303 	mul.w	r3, r2, r3
 8005e78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e7a:	e054      	b.n	8005f26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	d050      	beq.n	8005f26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e84:	f7fe fd00 	bl	8004888 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d902      	bls.n	8005e9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d13d      	bne.n	8005f16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ea8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005eb2:	d111      	bne.n	8005ed8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ebc:	d004      	beq.n	8005ec8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ec6:	d107      	bne.n	8005ed8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ed6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005edc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ee0:	d10f      	bne.n	8005f02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e017      	b.n	8005f46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	bf0c      	ite	eq
 8005f36:	2301      	moveq	r3, #1
 8005f38:	2300      	movne	r3, #0
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d19b      	bne.n	8005e7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000000 	.word	0x20000000

08005f54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08a      	sub	sp, #40	@ 0x28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f62:	2300      	movs	r3, #0
 8005f64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f66:	f7fe fc8f 	bl	8004888 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	4413      	add	r3, r2
 8005f74:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005f76:	f7fe fc87 	bl	8004888 <HAL_GetTick>
 8005f7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	330c      	adds	r3, #12
 8005f82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f84:	4b3d      	ldr	r3, [pc, #244]	@ (800607c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	00da      	lsls	r2, r3, #3
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	0d1b      	lsrs	r3, r3, #20
 8005f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f96:	fb02 f303 	mul.w	r3, r2, r3
 8005f9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f9c:	e060      	b.n	8006060 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005fa4:	d107      	bne.n	8005fb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d104      	bne.n	8005fb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d050      	beq.n	8006060 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fbe:	f7fe fc63 	bl	8004888 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d902      	bls.n	8005fd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d13d      	bne.n	8006050 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fe2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fec:	d111      	bne.n	8006012 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ff6:	d004      	beq.n	8006002 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006000:	d107      	bne.n	8006012 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006010:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800601a:	d10f      	bne.n	800603c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800603a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e010      	b.n	8006072 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	3b01      	subs	r3, #1
 800605e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4013      	ands	r3, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	d196      	bne.n	8005f9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3728      	adds	r7, #40	@ 0x28
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000000 	.word	0x20000000

08006080 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006094:	d111      	bne.n	80060ba <SPI_EndRxTransaction+0x3a>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800609e:	d004      	beq.n	80060aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060a8:	d107      	bne.n	80060ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060b8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2200      	movs	r2, #0
 80060c2:	2180      	movs	r1, #128	@ 0x80
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f7ff febd 	bl	8005e44 <SPI_WaitFlagStateUntilTimeout>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e023      	b.n	8006128 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060e8:	d11d      	bne.n	8006126 <SPI_EndRxTransaction+0xa6>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060f2:	d004      	beq.n	80060fe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060fc:	d113      	bne.n	8006126 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2200      	movs	r2, #0
 8006106:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7ff ff22 	bl	8005f54 <SPI_WaitFifoStateUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800611a:	f043 0220 	orr.w	r2, r3, #32
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e000      	b.n	8006128 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2200      	movs	r2, #0
 8006144:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7ff ff03 	bl	8005f54 <SPI_WaitFifoStateUntilTimeout>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d007      	beq.n	8006164 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006158:	f043 0220 	orr.w	r2, r3, #32
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e027      	b.n	80061b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2200      	movs	r2, #0
 800616c:	2180      	movs	r1, #128	@ 0x80
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7ff fe68 	bl	8005e44 <SPI_WaitFlagStateUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800617e:	f043 0220 	orr.w	r2, r3, #32
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e014      	b.n	80061b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2200      	movs	r2, #0
 8006192:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f7ff fedc 	bl	8005f54 <SPI_WaitFifoStateUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d007      	beq.n	80061b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061a6:	f043 0220 	orr.w	r2, r3, #32
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e000      	b.n	80061b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <LL_GPIO_SetPinMode>:
{
 80061bc:	b480      	push	{r7}
 80061be:	b08b      	sub	sp, #44	@ 0x2c
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	fa93 f3a3 	rbit	r3, r3
 80061d6:	613b      	str	r3, [r7, #16]
  return result;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80061e2:	2320      	movs	r3, #32
 80061e4:	e003      	b.n	80061ee <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	fab3 f383 	clz	r3, r3
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	2103      	movs	r1, #3
 80061f2:	fa01 f303 	lsl.w	r3, r1, r3
 80061f6:	43db      	mvns	r3, r3
 80061f8:	401a      	ands	r2, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	fa93 f3a3 	rbit	r3, r3
 8006204:	61fb      	str	r3, [r7, #28]
  return result;
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006210:	2320      	movs	r3, #32
 8006212:	e003      	b.n	800621c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006216:	fab3 f383 	clz	r3, r3
 800621a:	b2db      	uxtb	r3, r3
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	fa01 f303 	lsl.w	r3, r1, r3
 8006224:	431a      	orrs	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	601a      	str	r2, [r3, #0]
}
 800622a:	bf00      	nop
 800622c:	372c      	adds	r7, #44	@ 0x2c
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <LL_GPIO_SetPinOutputType>:
{
 8006236:	b480      	push	{r7}
 8006238:	b085      	sub	sp, #20
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	43db      	mvns	r3, r3
 800624a:	401a      	ands	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	fb01 f303 	mul.w	r3, r1, r3
 8006254:	431a      	orrs	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	605a      	str	r2, [r3, #4]
}
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <LL_GPIO_SetPinSpeed>:
{
 8006266:	b480      	push	{r7}
 8006268:	b08b      	sub	sp, #44	@ 0x2c
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	fa93 f3a3 	rbit	r3, r3
 8006280:	613b      	str	r3, [r7, #16]
  return result;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800628c:	2320      	movs	r3, #32
 800628e:	e003      	b.n	8006298 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	fab3 f383 	clz	r3, r3
 8006296:	b2db      	uxtb	r3, r3
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	2103      	movs	r1, #3
 800629c:	fa01 f303 	lsl.w	r3, r1, r3
 80062a0:	43db      	mvns	r3, r3
 80062a2:	401a      	ands	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	fa93 f3a3 	rbit	r3, r3
 80062ae:	61fb      	str	r3, [r7, #28]
  return result;
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80062ba:	2320      	movs	r3, #32
 80062bc:	e003      	b.n	80062c6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	fab3 f383 	clz	r3, r3
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	fa01 f303 	lsl.w	r3, r1, r3
 80062ce:	431a      	orrs	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	609a      	str	r2, [r3, #8]
}
 80062d4:	bf00      	nop
 80062d6:	372c      	adds	r7, #44	@ 0x2c
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <LL_GPIO_SetPinPull>:
{
 80062e0:	b480      	push	{r7}
 80062e2:	b08b      	sub	sp, #44	@ 0x2c
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	fa93 f3a3 	rbit	r3, r3
 80062fa:	613b      	str	r3, [r7, #16]
  return result;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006306:	2320      	movs	r3, #32
 8006308:	e003      	b.n	8006312 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	fab3 f383 	clz	r3, r3
 8006310:	b2db      	uxtb	r3, r3
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	2103      	movs	r1, #3
 8006316:	fa01 f303 	lsl.w	r3, r1, r3
 800631a:	43db      	mvns	r3, r3
 800631c:	401a      	ands	r2, r3
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	fa93 f3a3 	rbit	r3, r3
 8006328:	61fb      	str	r3, [r7, #28]
  return result;
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006334:	2320      	movs	r3, #32
 8006336:	e003      	b.n	8006340 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	fab3 f383 	clz	r3, r3
 800633e:	b2db      	uxtb	r3, r3
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	fa01 f303 	lsl.w	r3, r1, r3
 8006348:	431a      	orrs	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	60da      	str	r2, [r3, #12]
}
 800634e:	bf00      	nop
 8006350:	372c      	adds	r7, #44	@ 0x2c
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <LL_GPIO_SetAFPin_0_7>:
{
 800635a:	b480      	push	{r7}
 800635c:	b08b      	sub	sp, #44	@ 0x2c
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6a1a      	ldr	r2, [r3, #32]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	fa93 f3a3 	rbit	r3, r3
 8006374:	613b      	str	r3, [r7, #16]
  return result;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006380:	2320      	movs	r3, #32
 8006382:	e003      	b.n	800638c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	fab3 f383 	clz	r3, r3
 800638a:	b2db      	uxtb	r3, r3
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	210f      	movs	r1, #15
 8006390:	fa01 f303 	lsl.w	r3, r1, r3
 8006394:	43db      	mvns	r3, r3
 8006396:	401a      	ands	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	fa93 f3a3 	rbit	r3, r3
 80063a2:	61fb      	str	r3, [r7, #28]
  return result;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80063ae:	2320      	movs	r3, #32
 80063b0:	e003      	b.n	80063ba <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	fab3 f383 	clz	r3, r3
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	fa01 f303 	lsl.w	r3, r1, r3
 80063c2:	431a      	orrs	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	621a      	str	r2, [r3, #32]
}
 80063c8:	bf00      	nop
 80063ca:	372c      	adds	r7, #44	@ 0x2c
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <LL_GPIO_SetAFPin_8_15>:
{
 80063d4:	b480      	push	{r7}
 80063d6:	b08b      	sub	sp, #44	@ 0x2c
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	0a1b      	lsrs	r3, r3, #8
 80063e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	fa93 f3a3 	rbit	r3, r3
 80063f0:	613b      	str	r3, [r7, #16]
  return result;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80063fc:	2320      	movs	r3, #32
 80063fe:	e003      	b.n	8006408 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	fab3 f383 	clz	r3, r3
 8006406:	b2db      	uxtb	r3, r3
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	210f      	movs	r1, #15
 800640c:	fa01 f303 	lsl.w	r3, r1, r3
 8006410:	43db      	mvns	r3, r3
 8006412:	401a      	ands	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	0a1b      	lsrs	r3, r3, #8
 8006418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	fa93 f3a3 	rbit	r3, r3
 8006420:	61fb      	str	r3, [r7, #28]
  return result;
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800642c:	2320      	movs	r3, #32
 800642e:	e003      	b.n	8006438 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	fab3 f383 	clz	r3, r3
 8006436:	b2db      	uxtb	r3, r3
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	fa01 f303 	lsl.w	r3, r1, r3
 8006440:	431a      	orrs	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006446:	bf00      	nop
 8006448:	372c      	adds	r7, #44	@ 0x2c
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b088      	sub	sp, #32
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	fa93 f3a3 	rbit	r3, r3
 8006468:	60fb      	str	r3, [r7, #12]
  return result;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <LL_GPIO_Init+0x26>
    return 32U;
 8006474:	2320      	movs	r3, #32
 8006476:	e003      	b.n	8006480 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	fab3 f383 	clz	r3, r3
 800647e:	b2db      	uxtb	r3, r3
 8006480:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006482:	e048      	b.n	8006516 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	2101      	movs	r1, #1
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	fa01 f303 	lsl.w	r3, r1, r3
 8006490:	4013      	ands	r3, r2
 8006492:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d03a      	beq.n	8006510 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d003      	beq.n	80064aa <LL_GPIO_Init+0x58>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d10e      	bne.n	80064c8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	461a      	mov	r2, r3
 80064b0:	69b9      	ldr	r1, [r7, #24]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff fed7 	bl	8006266 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6819      	ldr	r1, [r3, #0]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	461a      	mov	r2, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff feb7 	bl	8006236 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	461a      	mov	r2, r3
 80064ce:	69b9      	ldr	r1, [r7, #24]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff ff05 	bl	80062e0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d111      	bne.n	8006502 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	2bff      	cmp	r3, #255	@ 0xff
 80064e2:	d807      	bhi.n	80064f4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	461a      	mov	r2, r3
 80064ea:	69b9      	ldr	r1, [r7, #24]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff ff34 	bl	800635a <LL_GPIO_SetAFPin_0_7>
 80064f2:	e006      	b.n	8006502 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	461a      	mov	r2, r3
 80064fa:	69b9      	ldr	r1, [r7, #24]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7ff ff69 	bl	80063d4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	461a      	mov	r2, r3
 8006508:	69b9      	ldr	r1, [r7, #24]
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff fe56 	bl	80061bc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	3301      	adds	r3, #1
 8006514:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	fa22 f303 	lsr.w	r3, r2, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1af      	bne.n	8006484 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <LL_I2C_Enable>:
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f043 0201 	orr.w	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	601a      	str	r2, [r3, #0]
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <LL_I2C_Disable>:
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f023 0201 	bic.w	r2, r3, #1
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	601a      	str	r2, [r3, #0]
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <LL_I2C_ConfigFilters>:
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	0219      	lsls	r1, r3, #8
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	430b      	orrs	r3, r1
 800658a:	431a      	orrs	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	601a      	str	r2, [r3, #0]
}
 8006590:	bf00      	nop
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <LL_I2C_SetOwnAddress1>:
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80065b0:	f023 0307 	bic.w	r3, r3, #7
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	431a      	orrs	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	609a      	str	r2, [r3, #8]
}
 80065c0:	bf00      	nop
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <LL_I2C_EnableOwnAddress1>:
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	609a      	str	r2, [r3, #8]
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <LL_I2C_DisableOwnAddress1>:
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	609a      	str	r2, [r3, #8]
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <LL_I2C_SetTiming>:
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	611a      	str	r2, [r3, #16]
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <LL_I2C_SetMode>:
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	431a      	orrs	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	601a      	str	r2, [r3, #0]
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <LL_I2C_AcknowledgeNextData>:
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	605a      	str	r2, [r3, #4]
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff ff65 	bl	800654e <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	6899      	ldr	r1, [r3, #8]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	461a      	mov	r2, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff ff6d 	bl	800656e <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff ffb6 	bl	800660c <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff ff44 	bl	800652e <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff ffa0 	bl	80065ec <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	6919      	ldr	r1, [r3, #16]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	461a      	mov	r2, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7ff ff70 	bl	800659c <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff ff81 	bl	80065cc <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7ff ffa9 	bl	8006628 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	4619      	mov	r1, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7ff ffb6 	bl	800664e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <LL_RCC_HSI_IsReady>:
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80066f0:	4b07      	ldr	r3, [pc, #28]	@ (8006710 <LL_RCC_HSI_IsReady+0x24>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066fc:	d101      	bne.n	8006702 <LL_RCC_HSI_IsReady+0x16>
 80066fe:	2301      	movs	r3, #1
 8006700:	e000      	b.n	8006704 <LL_RCC_HSI_IsReady+0x18>
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40021000 	.word	0x40021000

08006714 <LL_RCC_LSE_IsReady>:
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8006718:	4b07      	ldr	r3, [pc, #28]	@ (8006738 <LL_RCC_LSE_IsReady+0x24>)
 800671a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b02      	cmp	r3, #2
 8006724:	d101      	bne.n	800672a <LL_RCC_LSE_IsReady+0x16>
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <LL_RCC_LSE_IsReady+0x18>
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40021000 	.word	0x40021000

0800673c <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8006740:	4b06      	ldr	r3, [pc, #24]	@ (800675c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b08      	cmp	r3, #8
 800674a:	d101      	bne.n	8006750 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	40021000 	.word	0x40021000

08006760 <LL_RCC_MSI_GetRange>:
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006764:	4b04      	ldr	r3, [pc, #16]	@ (8006778 <LL_RCC_MSI_GetRange+0x18>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800676c:	4618      	mov	r0, r3
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40021000 	.word	0x40021000

0800677c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006780:	4b04      	ldr	r3, [pc, #16]	@ (8006794 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8006782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006786:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 800678a:	4618      	mov	r0, r3
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	40021000 	.word	0x40021000

08006798 <LL_RCC_GetSysClkSource>:
{
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800679c:	4b04      	ldr	r3, [pc, #16]	@ (80067b0 <LL_RCC_GetSysClkSource+0x18>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 030c 	and.w	r3, r3, #12
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40021000 	.word	0x40021000

080067b4 <LL_RCC_GetAHBPrescaler>:
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80067b8:	4b04      	ldr	r3, [pc, #16]	@ (80067cc <LL_RCC_GetAHBPrescaler+0x18>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	40021000 	.word	0x40021000

080067d0 <LL_RCC_GetAPB1Prescaler>:
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80067d4:	4b04      	ldr	r3, [pc, #16]	@ (80067e8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80067dc:	4618      	mov	r0, r3
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40021000 	.word	0x40021000

080067ec <LL_RCC_GetAPB2Prescaler>:
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80067f0:	4b04      	ldr	r3, [pc, #16]	@ (8006804 <LL_RCC_GetAPB2Prescaler+0x18>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	40021000 	.word	0x40021000

08006808 <LL_RCC_GetUSARTClockSource>:
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8006810:	4b06      	ldr	r3, [pc, #24]	@ (800682c <LL_RCC_GetUSARTClockSource+0x24>)
 8006812:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	401a      	ands	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	041b      	lsls	r3, r3, #16
 800681e:	4313      	orrs	r3, r2
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	40021000 	.word	0x40021000

08006830 <LL_RCC_PLL_GetMainSource>:
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006834:	4b04      	ldr	r3, [pc, #16]	@ (8006848 <LL_RCC_PLL_GetMainSource+0x18>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f003 0303 	and.w	r3, r3, #3
}
 800683c:	4618      	mov	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	40021000 	.word	0x40021000

0800684c <LL_RCC_PLL_GetN>:
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006850:	4b04      	ldr	r3, [pc, #16]	@ (8006864 <LL_RCC_PLL_GetN+0x18>)
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	0a1b      	lsrs	r3, r3, #8
 8006856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800685a:	4618      	mov	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	40021000 	.word	0x40021000

08006868 <LL_RCC_PLL_GetR>:
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800686c:	4b04      	ldr	r3, [pc, #16]	@ (8006880 <LL_RCC_PLL_GetR+0x18>)
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8006874:	4618      	mov	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40021000 	.word	0x40021000

08006884 <LL_RCC_PLL_GetDivider>:
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006888:	4b04      	ldr	r3, [pc, #16]	@ (800689c <LL_RCC_PLL_GetDivider+0x18>)
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006890:	4618      	mov	r0, r3
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40021000 	.word	0x40021000

080068a0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80068a8:	2300      	movs	r3, #0
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d137      	bne.n	8006922 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff ffa8 	bl	8006808 <LL_RCC_GetUSARTClockSource>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80068be:	2b03      	cmp	r3, #3
 80068c0:	f200 80b3 	bhi.w	8006a2a <LL_RCC_GetUSARTClockFreq+0x18a>
 80068c4:	a201      	add	r2, pc, #4	@ (adr r2, 80068cc <LL_RCC_GetUSARTClockFreq+0x2c>)
 80068c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	0800690b 	.word	0x0800690b
 80068d0:	080068dd 	.word	0x080068dd
 80068d4:	080068e5 	.word	0x080068e5
 80068d8:	080068f7 	.word	0x080068f7
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80068dc:	f000 f8c2 	bl	8006a64 <RCC_GetSystemClockFreq>
 80068e0:	60f8      	str	r0, [r7, #12]
        break;
 80068e2:	e0b3      	b.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80068e4:	f7ff ff02 	bl	80066ec <LL_RCC_HSI_IsReady>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 809f 	beq.w	8006a2e <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80068f0:	4b59      	ldr	r3, [pc, #356]	@ (8006a58 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80068f2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80068f4:	e09b      	b.n	8006a2e <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80068f6:	f7ff ff0d 	bl	8006714 <LL_RCC_LSE_IsReady>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 8098 	beq.w	8006a32 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8006902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006906:	60fb      	str	r3, [r7, #12]
        }
        break;
 8006908:	e093      	b.n	8006a32 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800690a:	f000 f8ab 	bl	8006a64 <RCC_GetSystemClockFreq>
 800690e:	4603      	mov	r3, r0
 8006910:	4618      	mov	r0, r3
 8006912:	f000 f937 	bl	8006b84 <RCC_GetHCLKClockFreq>
 8006916:	4603      	mov	r3, r0
 8006918:	4618      	mov	r0, r3
 800691a:	f000 f95d 	bl	8006bd8 <RCC_GetPCLK2ClockFreq>
 800691e:	60f8      	str	r0, [r7, #12]
        break;
 8006920:	e094      	b.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b0c      	cmp	r3, #12
 8006926:	d146      	bne.n	80069b6 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff ff6d 	bl	8006808 <LL_RCC_GetUSARTClockSource>
 800692e:	4603      	mov	r3, r0
 8006930:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8006934:	2b0c      	cmp	r3, #12
 8006936:	d87e      	bhi.n	8006a36 <LL_RCC_GetUSARTClockFreq+0x196>
 8006938:	a201      	add	r2, pc, #4	@ (adr r2, 8006940 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	0800699f 	.word	0x0800699f
 8006944:	08006a37 	.word	0x08006a37
 8006948:	08006a37 	.word	0x08006a37
 800694c:	08006a37 	.word	0x08006a37
 8006950:	08006975 	.word	0x08006975
 8006954:	08006a37 	.word	0x08006a37
 8006958:	08006a37 	.word	0x08006a37
 800695c:	08006a37 	.word	0x08006a37
 8006960:	0800697d 	.word	0x0800697d
 8006964:	08006a37 	.word	0x08006a37
 8006968:	08006a37 	.word	0x08006a37
 800696c:	08006a37 	.word	0x08006a37
 8006970:	0800698d 	.word	0x0800698d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8006974:	f000 f876 	bl	8006a64 <RCC_GetSystemClockFreq>
 8006978:	60f8      	str	r0, [r7, #12]
        break;
 800697a:	e067      	b.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800697c:	f7ff feb6 	bl	80066ec <LL_RCC_HSI_IsReady>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d059      	beq.n	8006a3a <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8006986:	4b34      	ldr	r3, [pc, #208]	@ (8006a58 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8006988:	60fb      	str	r3, [r7, #12]
        }
        break;
 800698a:	e056      	b.n	8006a3a <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800698c:	f7ff fec2 	bl	8006714 <LL_RCC_LSE_IsReady>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d053      	beq.n	8006a3e <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8006996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800699a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800699c:	e04f      	b.n	8006a3e <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800699e:	f000 f861 	bl	8006a64 <RCC_GetSystemClockFreq>
 80069a2:	4603      	mov	r3, r0
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 f8ed 	bl	8006b84 <RCC_GetHCLKClockFreq>
 80069aa:	4603      	mov	r3, r0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 f8ff 	bl	8006bb0 <RCC_GetPCLK1ClockFreq>
 80069b2:	60f8      	str	r0, [r7, #12]
        break;
 80069b4:	e04a      	b.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b30      	cmp	r3, #48	@ 0x30
 80069ba:	d147      	bne.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff ff23 	bl	8006808 <LL_RCC_GetUSARTClockSource>
 80069c2:	4603      	mov	r3, r0
 80069c4:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80069c8:	d01a      	beq.n	8006a00 <LL_RCC_GetUSARTClockFreq+0x160>
 80069ca:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80069ce:	d838      	bhi.n	8006a42 <LL_RCC_GetUSARTClockFreq+0x1a2>
 80069d0:	4a22      	ldr	r2, [pc, #136]	@ (8006a5c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00c      	beq.n	80069f0 <LL_RCC_GetUSARTClockFreq+0x150>
 80069d6:	4a21      	ldr	r2, [pc, #132]	@ (8006a5c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d832      	bhi.n	8006a42 <LL_RCC_GetUSARTClockFreq+0x1a2>
 80069dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069e0:	d017      	beq.n	8006a12 <LL_RCC_GetUSARTClockFreq+0x172>
 80069e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006a60 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d12c      	bne.n	8006a42 <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80069e8:	f000 f83c 	bl	8006a64 <RCC_GetSystemClockFreq>
 80069ec:	60f8      	str	r0, [r7, #12]
          break;
 80069ee:	e02d      	b.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80069f0:	f7ff fe7c 	bl	80066ec <LL_RCC_HSI_IsReady>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d025      	beq.n	8006a46 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 80069fa:	4b17      	ldr	r3, [pc, #92]	@ (8006a58 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80069fc:	60fb      	str	r3, [r7, #12]
          }
          break;
 80069fe:	e022      	b.n	8006a46 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8006a00:	f7ff fe88 	bl	8006714 <LL_RCC_LSE_IsReady>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d01f      	beq.n	8006a4a <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 8006a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a0e:	60fb      	str	r3, [r7, #12]
          }
          break;
 8006a10:	e01b      	b.n	8006a4a <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8006a12:	f000 f827 	bl	8006a64 <RCC_GetSystemClockFreq>
 8006a16:	4603      	mov	r3, r0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 f8b3 	bl	8006b84 <RCC_GetHCLKClockFreq>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 f8c5 	bl	8006bb0 <RCC_GetPCLK1ClockFreq>
 8006a26:	60f8      	str	r0, [r7, #12]
          break;
 8006a28:	e010      	b.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8006a2a:	bf00      	nop
 8006a2c:	e00e      	b.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8006a2e:	bf00      	nop
 8006a30:	e00c      	b.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8006a32:	bf00      	nop
 8006a34:	e00a      	b.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8006a36:	bf00      	nop
 8006a38:	e008      	b.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8006a3a:	bf00      	nop
 8006a3c:	e006      	b.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8006a3e:	bf00      	nop
 8006a40:	e004      	b.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8006a42:	bf00      	nop
 8006a44:	e002      	b.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8006a46:	bf00      	nop
 8006a48:	e000      	b.n	8006a4c <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8006a4a:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	00f42400 	.word	0x00f42400
 8006a5c:	00300020 	.word	0x00300020
 8006a60:	00300010 	.word	0x00300010

08006a64 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006a6a:	f7ff fe95 	bl	8006798 <LL_RCC_GetSysClkSource>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b0c      	cmp	r3, #12
 8006a72:	d851      	bhi.n	8006b18 <RCC_GetSystemClockFreq+0xb4>
 8006a74:	a201      	add	r2, pc, #4	@ (adr r2, 8006a7c <RCC_GetSystemClockFreq+0x18>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006ab1 	.word	0x08006ab1
 8006a80:	08006b19 	.word	0x08006b19
 8006a84:	08006b19 	.word	0x08006b19
 8006a88:	08006b19 	.word	0x08006b19
 8006a8c:	08006b05 	.word	0x08006b05
 8006a90:	08006b19 	.word	0x08006b19
 8006a94:	08006b19 	.word	0x08006b19
 8006a98:	08006b19 	.word	0x08006b19
 8006a9c:	08006b0b 	.word	0x08006b0b
 8006aa0:	08006b19 	.word	0x08006b19
 8006aa4:	08006b19 	.word	0x08006b19
 8006aa8:	08006b19 	.word	0x08006b19
 8006aac:	08006b11 	.word	0x08006b11
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006ab0:	f7ff fe44 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d111      	bne.n	8006ade <RCC_GetSystemClockFreq+0x7a>
 8006aba:	f7ff fe3f 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d004      	beq.n	8006ace <RCC_GetSystemClockFreq+0x6a>
 8006ac4:	f7ff fe4c 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	0a1b      	lsrs	r3, r3, #8
 8006acc:	e003      	b.n	8006ad6 <RCC_GetSystemClockFreq+0x72>
 8006ace:	f7ff fe55 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	0a1b      	lsrs	r3, r3, #8
 8006ad6:	4a28      	ldr	r2, [pc, #160]	@ (8006b78 <RCC_GetSystemClockFreq+0x114>)
 8006ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006adc:	e010      	b.n	8006b00 <RCC_GetSystemClockFreq+0x9c>
 8006ade:	f7ff fe2d 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d004      	beq.n	8006af2 <RCC_GetSystemClockFreq+0x8e>
 8006ae8:	f7ff fe3a 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006aec:	4603      	mov	r3, r0
 8006aee:	091b      	lsrs	r3, r3, #4
 8006af0:	e003      	b.n	8006afa <RCC_GetSystemClockFreq+0x96>
 8006af2:	f7ff fe43 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006af6:	4603      	mov	r3, r0
 8006af8:	091b      	lsrs	r3, r3, #4
 8006afa:	4a1f      	ldr	r2, [pc, #124]	@ (8006b78 <RCC_GetSystemClockFreq+0x114>)
 8006afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b00:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006b02:	e033      	b.n	8006b6c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006b04:	4b1d      	ldr	r3, [pc, #116]	@ (8006b7c <RCC_GetSystemClockFreq+0x118>)
 8006b06:	607b      	str	r3, [r7, #4]
      break;
 8006b08:	e030      	b.n	8006b6c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8006b80 <RCC_GetSystemClockFreq+0x11c>)
 8006b0c:	607b      	str	r3, [r7, #4]
      break;
 8006b0e:	e02d      	b.n	8006b6c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8006b10:	f000 f876 	bl	8006c00 <RCC_PLL_GetFreqDomain_SYS>
 8006b14:	6078      	str	r0, [r7, #4]
      break;
 8006b16:	e029      	b.n	8006b6c <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006b18:	f7ff fe10 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d111      	bne.n	8006b46 <RCC_GetSystemClockFreq+0xe2>
 8006b22:	f7ff fe0b 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <RCC_GetSystemClockFreq+0xd2>
 8006b2c:	f7ff fe18 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006b30:	4603      	mov	r3, r0
 8006b32:	0a1b      	lsrs	r3, r3, #8
 8006b34:	e003      	b.n	8006b3e <RCC_GetSystemClockFreq+0xda>
 8006b36:	f7ff fe21 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	0a1b      	lsrs	r3, r3, #8
 8006b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8006b78 <RCC_GetSystemClockFreq+0x114>)
 8006b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b44:	e010      	b.n	8006b68 <RCC_GetSystemClockFreq+0x104>
 8006b46:	f7ff fdf9 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d004      	beq.n	8006b5a <RCC_GetSystemClockFreq+0xf6>
 8006b50:	f7ff fe06 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006b54:	4603      	mov	r3, r0
 8006b56:	091b      	lsrs	r3, r3, #4
 8006b58:	e003      	b.n	8006b62 <RCC_GetSystemClockFreq+0xfe>
 8006b5a:	f7ff fe0f 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	091b      	lsrs	r3, r3, #4
 8006b62:	4a05      	ldr	r2, [pc, #20]	@ (8006b78 <RCC_GetSystemClockFreq+0x114>)
 8006b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b68:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006b6a:	bf00      	nop
  }

  return frequency;
 8006b6c:	687b      	ldr	r3, [r7, #4]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	08009bb8 	.word	0x08009bb8
 8006b7c:	00f42400 	.word	0x00f42400
 8006b80:	007a1200 	.word	0x007a1200

08006b84 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006b8c:	f7ff fe12 	bl	80067b4 <LL_RCC_GetAHBPrescaler>
 8006b90:	4603      	mov	r3, r0
 8006b92:	091b      	lsrs	r3, r3, #4
 8006b94:	f003 030f 	and.w	r3, r3, #15
 8006b98:	4a04      	ldr	r2, [pc, #16]	@ (8006bac <RCC_GetHCLKClockFreq+0x28>)
 8006b9a:	5cd3      	ldrb	r3, [r2, r3]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	40d3      	lsrs	r3, r2
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	08009ba0 	.word	0x08009ba0

08006bb0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006bb8:	f7ff fe0a 	bl	80067d0 <LL_RCC_GetAPB1Prescaler>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	0a1b      	lsrs	r3, r3, #8
 8006bc0:	4a04      	ldr	r2, [pc, #16]	@ (8006bd4 <RCC_GetPCLK1ClockFreq+0x24>)
 8006bc2:	5cd3      	ldrb	r3, [r2, r3]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	40d3      	lsrs	r3, r2
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	08009bb0 	.word	0x08009bb0

08006bd8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006be0:	f7ff fe04 	bl	80067ec <LL_RCC_GetAPB2Prescaler>
 8006be4:	4603      	mov	r3, r0
 8006be6:	0adb      	lsrs	r3, r3, #11
 8006be8:	4a04      	ldr	r2, [pc, #16]	@ (8006bfc <RCC_GetPCLK2ClockFreq+0x24>)
 8006bea:	5cd3      	ldrb	r3, [r2, r3]
 8006bec:	461a      	mov	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	40d3      	lsrs	r3, r2
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	08009bb0 	.word	0x08009bb0

08006c00 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8006c00:	b590      	push	{r4, r7, lr}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006c06:	f7ff fe13 	bl	8006830 <LL_RCC_PLL_GetMainSource>
 8006c0a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d036      	beq.n	8006c80 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d836      	bhi.n	8006c86 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d003      	beq.n	8006c26 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d02a      	beq.n	8006c7a <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8006c24:	e02f      	b.n	8006c86 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006c26:	f7ff fd89 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d111      	bne.n	8006c54 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8006c30:	f7ff fd84 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8006c3a:	f7ff fd91 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	0a1b      	lsrs	r3, r3, #8
 8006c42:	e003      	b.n	8006c4c <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8006c44:	f7ff fd9a 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	0a1b      	lsrs	r3, r3, #8
 8006c4c:	4a2f      	ldr	r2, [pc, #188]	@ (8006d0c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c52:	e010      	b.n	8006c76 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8006c54:	f7ff fd72 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d004      	beq.n	8006c68 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8006c5e:	f7ff fd7f 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006c62:	4603      	mov	r3, r0
 8006c64:	091b      	lsrs	r3, r3, #4
 8006c66:	e003      	b.n	8006c70 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8006c68:	f7ff fd88 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	091b      	lsrs	r3, r3, #4
 8006c70:	4a26      	ldr	r2, [pc, #152]	@ (8006d0c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c76:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006c78:	e02f      	b.n	8006cda <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006c7a:	4b25      	ldr	r3, [pc, #148]	@ (8006d10 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8006c7c:	607b      	str	r3, [r7, #4]
      break;
 8006c7e:	e02c      	b.n	8006cda <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006c80:	4b24      	ldr	r3, [pc, #144]	@ (8006d14 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8006c82:	607b      	str	r3, [r7, #4]
      break;
 8006c84:	e029      	b.n	8006cda <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006c86:	f7ff fd59 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d111      	bne.n	8006cb4 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8006c90:	f7ff fd54 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d004      	beq.n	8006ca4 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8006c9a:	f7ff fd61 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	0a1b      	lsrs	r3, r3, #8
 8006ca2:	e003      	b.n	8006cac <RCC_PLL_GetFreqDomain_SYS+0xac>
 8006ca4:	f7ff fd6a 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	0a1b      	lsrs	r3, r3, #8
 8006cac:	4a17      	ldr	r2, [pc, #92]	@ (8006d0c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb2:	e010      	b.n	8006cd6 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8006cb4:	f7ff fd42 	bl	800673c <LL_RCC_MSI_IsEnabledRangeSelect>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d004      	beq.n	8006cc8 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8006cbe:	f7ff fd4f 	bl	8006760 <LL_RCC_MSI_GetRange>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	091b      	lsrs	r3, r3, #4
 8006cc6:	e003      	b.n	8006cd0 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8006cc8:	f7ff fd58 	bl	800677c <LL_RCC_MSI_GetRangeAfterStandby>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	091b      	lsrs	r3, r3, #4
 8006cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8006d0c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8006cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd6:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8006cd8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006cda:	f7ff fdd3 	bl	8006884 <LL_RCC_PLL_GetDivider>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	091b      	lsrs	r3, r3, #4
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	fbb2 f4f3 	udiv	r4, r2, r3
 8006cea:	f7ff fdaf 	bl	800684c <LL_RCC_PLL_GetN>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	fb03 f404 	mul.w	r4, r3, r4
 8006cf4:	f7ff fdb8 	bl	8006868 <LL_RCC_PLL_GetR>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	0e5b      	lsrs	r3, r3, #25
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd90      	pop	{r4, r7, pc}
 8006d0c:	08009bb8 	.word	0x08009bb8
 8006d10:	00f42400 	.word	0x00f42400
 8006d14:	007a1200 	.word	0x007a1200

08006d18 <LL_USART_IsEnabled>:
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <LL_USART_IsEnabled+0x18>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e000      	b.n	8006d32 <LL_USART_IsEnabled+0x1a>
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <LL_USART_SetStopBitsLength>:
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	605a      	str	r2, [r3, #4]
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <LL_USART_SetHWFlowCtrl>:
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	609a      	str	r2, [r3, #8]
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <LL_USART_SetBaudRate>:
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b087      	sub	sp, #28
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	60f8      	str	r0, [r7, #12]
 8006d92:	60b9      	str	r1, [r7, #8]
 8006d94:	607a      	str	r2, [r7, #4]
 8006d96:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d9e:	d11a      	bne.n	8006dd6 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	005a      	lsls	r2, r3, #1
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	085b      	lsrs	r3, r3, #1
 8006da8:	441a      	add	r2, r3
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8006dba:	4013      	ands	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	085b      	lsrs	r3, r3, #1
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	60da      	str	r2, [r3, #12]
}
 8006dd4:	e00a      	b.n	8006dec <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	085a      	lsrs	r2, r3, #1
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	441a      	add	r2, r3
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	461a      	mov	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	60da      	str	r2, [r3, #12]
}
 8006dec:	bf00      	nop
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff ff84 	bl	8006d18 <LL_USART_IsEnabled>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d148      	bne.n	8006ea8 <LL_USART_Init+0xb0>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4b26      	ldr	r3, [pc, #152]	@ (8006eb4 <LL_USART_Init+0xbc>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	6851      	ldr	r1, [r2, #4]
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	68d2      	ldr	r2, [r2, #12]
 8006e26:	4311      	orrs	r1, r2
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	6912      	ldr	r2, [r2, #16]
 8006e2c:	4311      	orrs	r1, r2
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	6992      	ldr	r2, [r2, #24]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	431a      	orrs	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7ff ff7c 	bl	8006d3e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7ff ff89 	bl	8006d64 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a18      	ldr	r2, [pc, #96]	@ (8006eb8 <LL_USART_Init+0xc0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d104      	bne.n	8006e64 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8006e5a:	2003      	movs	r0, #3
 8006e5c:	f7ff fd20 	bl	80068a0 <LL_RCC_GetUSARTClockFreq>
 8006e60:	60b8      	str	r0, [r7, #8]
 8006e62:	e010      	b.n	8006e86 <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a15      	ldr	r2, [pc, #84]	@ (8006ebc <LL_USART_Init+0xc4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d104      	bne.n	8006e76 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8006e6c:	200c      	movs	r0, #12
 8006e6e:	f7ff fd17 	bl	80068a0 <LL_RCC_GetUSARTClockFreq>
 8006e72:	60b8      	str	r0, [r7, #8]
 8006e74:	e007      	b.n	8006e86 <LL_USART_Init+0x8e>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a11      	ldr	r2, [pc, #68]	@ (8006ec0 <LL_USART_Init+0xc8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d103      	bne.n	8006e86 <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8006e7e:	2030      	movs	r0, #48	@ 0x30
 8006e80:	f7ff fd0e 	bl	80068a0 <LL_RCC_GetUSARTClockFreq>
 8006e84:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00d      	beq.n	8006ea8 <LL_USART_Init+0xb0>
        && (USART_InitStruct->BaudRate != 0U))
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d009      	beq.n	8006ea8 <LL_USART_Init+0xb0>
    {
      status = SUCCESS;
 8006e94:	2300      	movs	r3, #0
 8006e96:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8006ea0:	68b9      	ldr	r1, [r7, #8]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7ff ff71 	bl	8006d8a <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	efff69f3 	.word	0xefff69f3
 8006eb8:	40013800 	.word	0x40013800
 8006ebc:	40004400 	.word	0x40004400
 8006ec0:	40004800 	.word	0x40004800

08006ec4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006ecc:	4a04      	ldr	r2, [pc, #16]	@ (8006ee0 <LL_SetSystemCoreClock+0x1c>)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6013      	str	r3, [r2, #0]
}
 8006ed2:	bf00      	nop
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	20000000 	.word	0x20000000

08006ee4 <__NVIC_SetPriority>:
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	6039      	str	r1, [r7, #0]
 8006eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	db0a      	blt.n	8006f0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	490c      	ldr	r1, [pc, #48]	@ (8006f30 <__NVIC_SetPriority+0x4c>)
 8006efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f02:	0112      	lsls	r2, r2, #4
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	440b      	add	r3, r1
 8006f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006f0c:	e00a      	b.n	8006f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	4908      	ldr	r1, [pc, #32]	@ (8006f34 <__NVIC_SetPriority+0x50>)
 8006f14:	79fb      	ldrb	r3, [r7, #7]
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	3b04      	subs	r3, #4
 8006f1c:	0112      	lsls	r2, r2, #4
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	440b      	add	r3, r1
 8006f22:	761a      	strb	r2, [r3, #24]
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	e000e100 	.word	0xe000e100
 8006f34:	e000ed00 	.word	0xe000ed00

08006f38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	f06f 0004 	mvn.w	r0, #4
 8006f42:	f7ff ffcf 	bl	8006ee4 <__NVIC_SetPriority>
#endif
}
 8006f46:	bf00      	nop
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f52:	f3ef 8305 	mrs	r3, IPSR
 8006f56:	603b      	str	r3, [r7, #0]
  return(result);
 8006f58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006f5e:	f06f 0305 	mvn.w	r3, #5
 8006f62:	607b      	str	r3, [r7, #4]
 8006f64:	e00c      	b.n	8006f80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f66:	4b0a      	ldr	r3, [pc, #40]	@ (8006f90 <osKernelInitialize+0x44>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d105      	bne.n	8006f7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f6e:	4b08      	ldr	r3, [pc, #32]	@ (8006f90 <osKernelInitialize+0x44>)
 8006f70:	2201      	movs	r2, #1
 8006f72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	607b      	str	r3, [r7, #4]
 8006f78:	e002      	b.n	8006f80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f80:	687b      	ldr	r3, [r7, #4]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	2000118c 	.word	0x2000118c

08006f94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f9a:	f3ef 8305 	mrs	r3, IPSR
 8006f9e:	603b      	str	r3, [r7, #0]
  return(result);
 8006fa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <osKernelStart+0x1a>
    stat = osErrorISR;
 8006fa6:	f06f 0305 	mvn.w	r3, #5
 8006faa:	607b      	str	r3, [r7, #4]
 8006fac:	e010      	b.n	8006fd0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006fae:	4b0b      	ldr	r3, [pc, #44]	@ (8006fdc <osKernelStart+0x48>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d109      	bne.n	8006fca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006fb6:	f7ff ffbf 	bl	8006f38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006fba:	4b08      	ldr	r3, [pc, #32]	@ (8006fdc <osKernelStart+0x48>)
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006fc0:	f001 f87a 	bl	80080b8 <vTaskStartScheduler>
      stat = osOK;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	607b      	str	r3, [r7, #4]
 8006fc8:	e002      	b.n	8006fd0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006fca:	f04f 33ff 	mov.w	r3, #4294967295
 8006fce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006fd0:	687b      	ldr	r3, [r7, #4]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	2000118c 	.word	0x2000118c

08006fe0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08e      	sub	sp, #56	@ 0x38
 8006fe4:	af04      	add	r7, sp, #16
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006fec:	2300      	movs	r3, #0
 8006fee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ff0:	f3ef 8305 	mrs	r3, IPSR
 8006ff4:	617b      	str	r3, [r7, #20]
  return(result);
 8006ff6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d17e      	bne.n	80070fa <osThreadNew+0x11a>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d07b      	beq.n	80070fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007002:	2380      	movs	r3, #128	@ 0x80
 8007004:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007006:	2318      	movs	r3, #24
 8007008:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800700e:	f04f 33ff 	mov.w	r3, #4294967295
 8007012:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d045      	beq.n	80070a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <osThreadNew+0x48>
        name = attr->name;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d008      	beq.n	800704e <osThreadNew+0x6e>
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2b38      	cmp	r3, #56	@ 0x38
 8007040:	d805      	bhi.n	800704e <osThreadNew+0x6e>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <osThreadNew+0x72>
        return (NULL);
 800704e:	2300      	movs	r3, #0
 8007050:	e054      	b.n	80070fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	089b      	lsrs	r3, r3, #2
 8007060:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00e      	beq.n	8007088 <osThreadNew+0xa8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007070:	d90a      	bls.n	8007088 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007076:	2b00      	cmp	r3, #0
 8007078:	d006      	beq.n	8007088 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <osThreadNew+0xa8>
        mem = 1;
 8007082:	2301      	movs	r3, #1
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	e010      	b.n	80070aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10c      	bne.n	80070aa <osThreadNew+0xca>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d108      	bne.n	80070aa <osThreadNew+0xca>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d104      	bne.n	80070aa <osThreadNew+0xca>
          mem = 0;
 80070a0:	2300      	movs	r3, #0
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	e001      	b.n	80070aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80070a6:	2300      	movs	r3, #0
 80070a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d110      	bne.n	80070d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070b8:	9202      	str	r2, [sp, #8]
 80070ba:	9301      	str	r3, [sp, #4]
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	6a3a      	ldr	r2, [r7, #32]
 80070c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 fe1a 	bl	8007d00 <xTaskCreateStatic>
 80070cc:	4603      	mov	r3, r0
 80070ce:	613b      	str	r3, [r7, #16]
 80070d0:	e013      	b.n	80070fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d110      	bne.n	80070fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	b29a      	uxth	r2, r3
 80070dc:	f107 0310 	add.w	r3, r7, #16
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 fe68 	bl	8007dc0 <xTaskCreate>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d001      	beq.n	80070fa <osThreadNew+0x11a>
            hTask = NULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80070fa:	693b      	ldr	r3, [r7, #16]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3728      	adds	r7, #40	@ 0x28
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800710c:	f3ef 8305 	mrs	r3, IPSR
 8007110:	60bb      	str	r3, [r7, #8]
  return(result);
 8007112:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <osDelay+0x1c>
    stat = osErrorISR;
 8007118:	f06f 0305 	mvn.w	r3, #5
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	e007      	b.n	8007130 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <osDelay+0x2c>
      vTaskDelay(ticks);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 ff8e 	bl	800804c <vTaskDelay>
    }
  }

  return (stat);
 8007130:	68fb      	ldr	r3, [r7, #12]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4a07      	ldr	r2, [pc, #28]	@ (8007168 <vApplicationGetIdleTaskMemory+0x2c>)
 800714c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	4a06      	ldr	r2, [pc, #24]	@ (800716c <vApplicationGetIdleTaskMemory+0x30>)
 8007152:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2280      	movs	r2, #128	@ 0x80
 8007158:	601a      	str	r2, [r3, #0]
}
 800715a:	bf00      	nop
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	20001190 	.word	0x20001190
 800716c:	200011ec 	.word	0x200011ec

08007170 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4a07      	ldr	r2, [pc, #28]	@ (800719c <vApplicationGetTimerTaskMemory+0x2c>)
 8007180:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	4a06      	ldr	r2, [pc, #24]	@ (80071a0 <vApplicationGetTimerTaskMemory+0x30>)
 8007186:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800718e:	601a      	str	r2, [r3, #0]
}
 8007190:	bf00      	nop
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	200013ec 	.word	0x200013ec
 80071a0:	20001448 	.word	0x20001448

080071a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f103 0208 	add.w	r2, r3, #8
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f04f 32ff 	mov.w	r2, #4294967295
 80071bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f103 0208 	add.w	r2, r3, #8
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f103 0208 	add.w	r2, r3, #8
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071fe:	b480      	push	{r7}
 8007200:	b085      	sub	sp, #20
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
}
 800723a:	bf00      	nop
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725c:	d103      	bne.n	8007266 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	e00c      	b.n	8007280 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3308      	adds	r3, #8
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	e002      	b.n	8007274 <vListInsert+0x2e>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	429a      	cmp	r2, r3
 800727e:	d2f6      	bcs.n	800726e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	601a      	str	r2, [r3, #0]
}
 80072ac:	bf00      	nop
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	6892      	ldr	r2, [r2, #8]
 80072ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6852      	ldr	r2, [r2, #4]
 80072d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d103      	bne.n	80072ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	1e5a      	subs	r2, r3, #1
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10b      	bne.n	8007338 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	e7fd      	b.n	8007334 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007338:	f002 f876 	bl	8009428 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007344:	68f9      	ldr	r1, [r7, #12]
 8007346:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007348:	fb01 f303 	mul.w	r3, r1, r3
 800734c:	441a      	add	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007368:	3b01      	subs	r3, #1
 800736a:	68f9      	ldr	r1, [r7, #12]
 800736c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800736e:	fb01 f303 	mul.w	r3, r1, r3
 8007372:	441a      	add	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	22ff      	movs	r2, #255	@ 0xff
 800737c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	22ff      	movs	r2, #255	@ 0xff
 8007384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d114      	bne.n	80073b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d01a      	beq.n	80073cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3310      	adds	r3, #16
 800739a:	4618      	mov	r0, r3
 800739c:	f001 f91a 	bl	80085d4 <xTaskRemoveFromEventList>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d012      	beq.n	80073cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073a6:	4b0d      	ldr	r3, [pc, #52]	@ (80073dc <xQueueGenericReset+0xd0>)
 80073a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	e009      	b.n	80073cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3310      	adds	r3, #16
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff fef1 	bl	80071a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3324      	adds	r3, #36	@ 0x24
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff feec 	bl	80071a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073cc:	f002 f85e 	bl	800948c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073d0:	2301      	movs	r3, #1
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	e000ed04 	.word	0xe000ed04

080073e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08e      	sub	sp, #56	@ 0x38
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10b      	bne.n	800740c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	e7fd      	b.n	8007408 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10b      	bne.n	800742a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop
 8007428:	e7fd      	b.n	8007426 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <xQueueGenericCreateStatic+0x56>
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <xQueueGenericCreateStatic+0x5a>
 8007436:	2301      	movs	r3, #1
 8007438:	e000      	b.n	800743c <xQueueGenericCreateStatic+0x5c>
 800743a:	2300      	movs	r3, #0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10b      	bne.n	8007458 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	623b      	str	r3, [r7, #32]
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	e7fd      	b.n	8007454 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d102      	bne.n	8007464 <xQueueGenericCreateStatic+0x84>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <xQueueGenericCreateStatic+0x88>
 8007464:	2301      	movs	r3, #1
 8007466:	e000      	b.n	800746a <xQueueGenericCreateStatic+0x8a>
 8007468:	2300      	movs	r3, #0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10b      	bne.n	8007486 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	61fb      	str	r3, [r7, #28]
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	e7fd      	b.n	8007482 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007486:	2350      	movs	r3, #80	@ 0x50
 8007488:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b50      	cmp	r3, #80	@ 0x50
 800748e:	d00b      	beq.n	80074a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	61bb      	str	r3, [r7, #24]
}
 80074a2:	bf00      	nop
 80074a4:	bf00      	nop
 80074a6:	e7fd      	b.n	80074a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80074ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00d      	beq.n	80074d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80074c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	4613      	mov	r3, r2
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	68b9      	ldr	r1, [r7, #8]
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 f805 	bl	80074da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3730      	adds	r7, #48	@ 0x30
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
 80074e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d103      	bne.n	80074f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	e002      	b.n	80074fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007508:	2101      	movs	r1, #1
 800750a:	69b8      	ldr	r0, [r7, #24]
 800750c:	f7ff fefe 	bl	800730c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	78fa      	ldrb	r2, [r7, #3]
 8007514:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007518:	bf00      	nop
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08e      	sub	sp, #56	@ 0x38
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800752e:	2300      	movs	r3, #0
 8007530:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10b      	bne.n	8007554 <xQueueGenericSend+0x34>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800754e:	bf00      	nop
 8007550:	bf00      	nop
 8007552:	e7fd      	b.n	8007550 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d103      	bne.n	8007562 <xQueueGenericSend+0x42>
 800755a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <xQueueGenericSend+0x46>
 8007562:	2301      	movs	r3, #1
 8007564:	e000      	b.n	8007568 <xQueueGenericSend+0x48>
 8007566:	2300      	movs	r3, #0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10b      	bne.n	8007584 <xQueueGenericSend+0x64>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800757e:	bf00      	nop
 8007580:	bf00      	nop
 8007582:	e7fd      	b.n	8007580 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2b02      	cmp	r3, #2
 8007588:	d103      	bne.n	8007592 <xQueueGenericSend+0x72>
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800758e:	2b01      	cmp	r3, #1
 8007590:	d101      	bne.n	8007596 <xQueueGenericSend+0x76>
 8007592:	2301      	movs	r3, #1
 8007594:	e000      	b.n	8007598 <xQueueGenericSend+0x78>
 8007596:	2300      	movs	r3, #0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10b      	bne.n	80075b4 <xQueueGenericSend+0x94>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	623b      	str	r3, [r7, #32]
}
 80075ae:	bf00      	nop
 80075b0:	bf00      	nop
 80075b2:	e7fd      	b.n	80075b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075b4:	f001 f9ce 	bl	8008954 <xTaskGetSchedulerState>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d102      	bne.n	80075c4 <xQueueGenericSend+0xa4>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <xQueueGenericSend+0xa8>
 80075c4:	2301      	movs	r3, #1
 80075c6:	e000      	b.n	80075ca <xQueueGenericSend+0xaa>
 80075c8:	2300      	movs	r3, #0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10b      	bne.n	80075e6 <xQueueGenericSend+0xc6>
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	61fb      	str	r3, [r7, #28]
}
 80075e0:	bf00      	nop
 80075e2:	bf00      	nop
 80075e4:	e7fd      	b.n	80075e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075e6:	f001 ff1f 	bl	8009428 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d302      	bcc.n	80075fc <xQueueGenericSend+0xdc>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d129      	bne.n	8007650 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	68b9      	ldr	r1, [r7, #8]
 8007600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007602:	f000 fa0f 	bl	8007a24 <prvCopyDataToQueue>
 8007606:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	d010      	beq.n	8007632 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007612:	3324      	adds	r3, #36	@ 0x24
 8007614:	4618      	mov	r0, r3
 8007616:	f000 ffdd 	bl	80085d4 <xTaskRemoveFromEventList>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d013      	beq.n	8007648 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007620:	4b3f      	ldr	r3, [pc, #252]	@ (8007720 <xQueueGenericSend+0x200>)
 8007622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	e00a      	b.n	8007648 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007634:	2b00      	cmp	r3, #0
 8007636:	d007      	beq.n	8007648 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007638:	4b39      	ldr	r3, [pc, #228]	@ (8007720 <xQueueGenericSend+0x200>)
 800763a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007648:	f001 ff20 	bl	800948c <vPortExitCritical>
				return pdPASS;
 800764c:	2301      	movs	r3, #1
 800764e:	e063      	b.n	8007718 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d103      	bne.n	800765e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007656:	f001 ff19 	bl	800948c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800765a:	2300      	movs	r3, #0
 800765c:	e05c      	b.n	8007718 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800765e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007660:	2b00      	cmp	r3, #0
 8007662:	d106      	bne.n	8007672 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007664:	f107 0314 	add.w	r3, r7, #20
 8007668:	4618      	mov	r0, r3
 800766a:	f001 f817 	bl	800869c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800766e:	2301      	movs	r3, #1
 8007670:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007672:	f001 ff0b 	bl	800948c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007676:	f000 fd87 	bl	8008188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800767a:	f001 fed5 	bl	8009428 <vPortEnterCritical>
 800767e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007684:	b25b      	sxtb	r3, r3
 8007686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768a:	d103      	bne.n	8007694 <xQueueGenericSend+0x174>
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007696:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800769a:	b25b      	sxtb	r3, r3
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a0:	d103      	bne.n	80076aa <xQueueGenericSend+0x18a>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076aa:	f001 feef 	bl	800948c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076ae:	1d3a      	adds	r2, r7, #4
 80076b0:	f107 0314 	add.w	r3, r7, #20
 80076b4:	4611      	mov	r1, r2
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 f806 	bl	80086c8 <xTaskCheckForTimeOut>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d124      	bne.n	800770c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076c4:	f000 faa6 	bl	8007c14 <prvIsQueueFull>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d018      	beq.n	8007700 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	3310      	adds	r3, #16
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	4611      	mov	r1, r2
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 ff2a 	bl	8008530 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80076dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076de:	f000 fa31 	bl	8007b44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80076e2:	f000 fd5f 	bl	80081a4 <xTaskResumeAll>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f47f af7c 	bne.w	80075e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80076ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007720 <xQueueGenericSend+0x200>)
 80076f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	e772      	b.n	80075e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007700:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007702:	f000 fa1f 	bl	8007b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007706:	f000 fd4d 	bl	80081a4 <xTaskResumeAll>
 800770a:	e76c      	b.n	80075e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800770c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800770e:	f000 fa19 	bl	8007b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007712:	f000 fd47 	bl	80081a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007716:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007718:	4618      	mov	r0, r3
 800771a:	3738      	adds	r7, #56	@ 0x38
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	e000ed04 	.word	0xe000ed04

08007724 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b090      	sub	sp, #64	@ 0x40
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10b      	bne.n	8007754 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800774e:	bf00      	nop
 8007750:	bf00      	nop
 8007752:	e7fd      	b.n	8007750 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d103      	bne.n	8007762 <xQueueGenericSendFromISR+0x3e>
 800775a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <xQueueGenericSendFromISR+0x42>
 8007762:	2301      	movs	r3, #1
 8007764:	e000      	b.n	8007768 <xQueueGenericSendFromISR+0x44>
 8007766:	2300      	movs	r3, #0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10b      	bne.n	8007784 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800777e:	bf00      	nop
 8007780:	bf00      	nop
 8007782:	e7fd      	b.n	8007780 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b02      	cmp	r3, #2
 8007788:	d103      	bne.n	8007792 <xQueueGenericSendFromISR+0x6e>
 800778a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <xQueueGenericSendFromISR+0x72>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <xQueueGenericSendFromISR+0x74>
 8007796:	2300      	movs	r3, #0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10b      	bne.n	80077b4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	623b      	str	r3, [r7, #32]
}
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	e7fd      	b.n	80077b0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077b4:	f001 ff18 	bl	80095e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077b8:	f3ef 8211 	mrs	r2, BASEPRI
 80077bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	61fa      	str	r2, [r7, #28]
 80077ce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80077d0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077d2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077dc:	429a      	cmp	r2, r3
 80077de:	d302      	bcc.n	80077e6 <xQueueGenericSendFromISR+0xc2>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d12f      	bne.n	8007846 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	68b9      	ldr	r1, [r7, #8]
 80077fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80077fc:	f000 f912 	bl	8007a24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007800:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007808:	d112      	bne.n	8007830 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800780a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	d016      	beq.n	8007840 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007814:	3324      	adds	r3, #36	@ 0x24
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fedc 	bl	80085d4 <xTaskRemoveFromEventList>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00e      	beq.n	8007840 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00b      	beq.n	8007840 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	e007      	b.n	8007840 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007830:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007834:	3301      	adds	r3, #1
 8007836:	b2db      	uxtb	r3, r3
 8007838:	b25a      	sxtb	r2, r3
 800783a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007840:	2301      	movs	r3, #1
 8007842:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007844:	e001      	b.n	800784a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007846:	2300      	movs	r3, #0
 8007848:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800784a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800784c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007854:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007858:	4618      	mov	r0, r3
 800785a:	3740      	adds	r7, #64	@ 0x40
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08c      	sub	sp, #48	@ 0x30
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800786c:	2300      	movs	r3, #0
 800786e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10b      	bne.n	8007892 <xQueueReceive+0x32>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	623b      	str	r3, [r7, #32]
}
 800788c:	bf00      	nop
 800788e:	bf00      	nop
 8007890:	e7fd      	b.n	800788e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d103      	bne.n	80078a0 <xQueueReceive+0x40>
 8007898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <xQueueReceive+0x44>
 80078a0:	2301      	movs	r3, #1
 80078a2:	e000      	b.n	80078a6 <xQueueReceive+0x46>
 80078a4:	2300      	movs	r3, #0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10b      	bne.n	80078c2 <xQueueReceive+0x62>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	61fb      	str	r3, [r7, #28]
}
 80078bc:	bf00      	nop
 80078be:	bf00      	nop
 80078c0:	e7fd      	b.n	80078be <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078c2:	f001 f847 	bl	8008954 <xTaskGetSchedulerState>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d102      	bne.n	80078d2 <xQueueReceive+0x72>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <xQueueReceive+0x76>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <xQueueReceive+0x78>
 80078d6:	2300      	movs	r3, #0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10b      	bne.n	80078f4 <xQueueReceive+0x94>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	61bb      	str	r3, [r7, #24]
}
 80078ee:	bf00      	nop
 80078f0:	bf00      	nop
 80078f2:	e7fd      	b.n	80078f0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078f4:	f001 fd98 	bl	8009428 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078fc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	2b00      	cmp	r3, #0
 8007902:	d01f      	beq.n	8007944 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007904:	68b9      	ldr	r1, [r7, #8]
 8007906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007908:	f000 f8f6 	bl	8007af8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790e:	1e5a      	subs	r2, r3, #1
 8007910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007912:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00f      	beq.n	800793c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800791c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791e:	3310      	adds	r3, #16
 8007920:	4618      	mov	r0, r3
 8007922:	f000 fe57 	bl	80085d4 <xTaskRemoveFromEventList>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d007      	beq.n	800793c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800792c:	4b3c      	ldr	r3, [pc, #240]	@ (8007a20 <xQueueReceive+0x1c0>)
 800792e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800793c:	f001 fda6 	bl	800948c <vPortExitCritical>
				return pdPASS;
 8007940:	2301      	movs	r3, #1
 8007942:	e069      	b.n	8007a18 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d103      	bne.n	8007952 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800794a:	f001 fd9f 	bl	800948c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800794e:	2300      	movs	r3, #0
 8007950:	e062      	b.n	8007a18 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007954:	2b00      	cmp	r3, #0
 8007956:	d106      	bne.n	8007966 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007958:	f107 0310 	add.w	r3, r7, #16
 800795c:	4618      	mov	r0, r3
 800795e:	f000 fe9d 	bl	800869c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007962:	2301      	movs	r3, #1
 8007964:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007966:	f001 fd91 	bl	800948c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800796a:	f000 fc0d 	bl	8008188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800796e:	f001 fd5b 	bl	8009428 <vPortEnterCritical>
 8007972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007974:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007978:	b25b      	sxtb	r3, r3
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	d103      	bne.n	8007988 <xQueueReceive+0x128>
 8007980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800798e:	b25b      	sxtb	r3, r3
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007994:	d103      	bne.n	800799e <xQueueReceive+0x13e>
 8007996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800799e:	f001 fd75 	bl	800948c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079a2:	1d3a      	adds	r2, r7, #4
 80079a4:	f107 0310 	add.w	r3, r7, #16
 80079a8:	4611      	mov	r1, r2
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fe8c 	bl	80086c8 <xTaskCheckForTimeOut>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d123      	bne.n	80079fe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079b8:	f000 f916 	bl	8007be8 <prvIsQueueEmpty>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d017      	beq.n	80079f2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c4:	3324      	adds	r3, #36	@ 0x24
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	4611      	mov	r1, r2
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fdb0 	bl	8008530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079d2:	f000 f8b7 	bl	8007b44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079d6:	f000 fbe5 	bl	80081a4 <xTaskResumeAll>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d189      	bne.n	80078f4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80079e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007a20 <xQueueReceive+0x1c0>)
 80079e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	e780      	b.n	80078f4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80079f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079f4:	f000 f8a6 	bl	8007b44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079f8:	f000 fbd4 	bl	80081a4 <xTaskResumeAll>
 80079fc:	e77a      	b.n	80078f4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80079fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a00:	f000 f8a0 	bl	8007b44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a04:	f000 fbce 	bl	80081a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a0a:	f000 f8ed 	bl	8007be8 <prvIsQueueEmpty>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f43f af6f 	beq.w	80078f4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3730      	adds	r7, #48	@ 0x30
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10d      	bne.n	8007a5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d14d      	bne.n	8007ae6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 ff9e 	bl	8008990 <xTaskPriorityDisinherit>
 8007a54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	609a      	str	r2, [r3, #8]
 8007a5c:	e043      	b.n	8007ae6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d119      	bne.n	8007a98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6858      	ldr	r0, [r3, #4]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	68b9      	ldr	r1, [r7, #8]
 8007a70:	f002 f816 	bl	8009aa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a7c:	441a      	add	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d32b      	bcc.n	8007ae6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	605a      	str	r2, [r3, #4]
 8007a96:	e026      	b.n	8007ae6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	68d8      	ldr	r0, [r3, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	68b9      	ldr	r1, [r7, #8]
 8007aa4:	f001 fffc 	bl	8009aa0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab0:	425b      	negs	r3, r3
 8007ab2:	441a      	add	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d207      	bcs.n	8007ad4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007acc:	425b      	negs	r3, r3
 8007ace:	441a      	add	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d105      	bne.n	8007ae6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007aee:	697b      	ldr	r3, [r7, #20]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d018      	beq.n	8007b3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b12:	441a      	add	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d303      	bcc.n	8007b2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68d9      	ldr	r1, [r3, #12]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b34:	461a      	mov	r2, r3
 8007b36:	6838      	ldr	r0, [r7, #0]
 8007b38:	f001 ffb2 	bl	8009aa0 <memcpy>
	}
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b4c:	f001 fc6c 	bl	8009428 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b58:	e011      	b.n	8007b7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d012      	beq.n	8007b88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3324      	adds	r3, #36	@ 0x24
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 fd34 	bl	80085d4 <xTaskRemoveFromEventList>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b72:	f000 fe0d 	bl	8008790 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	dce9      	bgt.n	8007b5a <prvUnlockQueue+0x16>
 8007b86:	e000      	b.n	8007b8a <prvUnlockQueue+0x46>
					break;
 8007b88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	22ff      	movs	r2, #255	@ 0xff
 8007b8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007b92:	f001 fc7b 	bl	800948c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b96:	f001 fc47 	bl	8009428 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ba0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ba2:	e011      	b.n	8007bc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d012      	beq.n	8007bd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3310      	adds	r3, #16
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f000 fd0f 	bl	80085d4 <xTaskRemoveFromEventList>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007bbc:	f000 fde8 	bl	8008790 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dce9      	bgt.n	8007ba4 <prvUnlockQueue+0x60>
 8007bd0:	e000      	b.n	8007bd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007bd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	22ff      	movs	r2, #255	@ 0xff
 8007bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007bdc:	f001 fc56 	bl	800948c <vPortExitCritical>
}
 8007be0:	bf00      	nop
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bf0:	f001 fc1a 	bl	8009428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d102      	bne.n	8007c02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	e001      	b.n	8007c06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c06:	f001 fc41 	bl	800948c <vPortExitCritical>

	return xReturn;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c1c:	f001 fc04 	bl	8009428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d102      	bne.n	8007c32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	e001      	b.n	8007c36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c36:	f001 fc29 	bl	800948c <vPortExitCritical>

	return xReturn;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	e014      	b.n	8007c7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c54:	4a0f      	ldr	r2, [pc, #60]	@ (8007c94 <vQueueAddToRegistry+0x50>)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10b      	bne.n	8007c78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c60:	490c      	ldr	r1, [pc, #48]	@ (8007c94 <vQueueAddToRegistry+0x50>)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c94 <vQueueAddToRegistry+0x50>)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	4413      	add	r3, r2
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c76:	e006      	b.n	8007c86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b07      	cmp	r3, #7
 8007c82:	d9e7      	bls.n	8007c54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	20001848 	.word	0x20001848

08007c98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ca8:	f001 fbbe 	bl	8009428 <vPortEnterCritical>
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cb2:	b25b      	sxtb	r3, r3
 8007cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb8:	d103      	bne.n	8007cc2 <vQueueWaitForMessageRestricted+0x2a>
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cc8:	b25b      	sxtb	r3, r3
 8007cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cce:	d103      	bne.n	8007cd8 <vQueueWaitForMessageRestricted+0x40>
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cd8:	f001 fbd8 	bl	800948c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d106      	bne.n	8007cf2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	3324      	adds	r3, #36	@ 0x24
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	68b9      	ldr	r1, [r7, #8]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fc45 	bl	800857c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007cf2:	6978      	ldr	r0, [r7, #20]
 8007cf4:	f7ff ff26 	bl	8007b44 <prvUnlockQueue>
	}
 8007cf8:	bf00      	nop
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08e      	sub	sp, #56	@ 0x38
 8007d04:	af04      	add	r7, sp, #16
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
 8007d0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10b      	bne.n	8007d2c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	623b      	str	r3, [r7, #32]
}
 8007d26:	bf00      	nop
 8007d28:	bf00      	nop
 8007d2a:	e7fd      	b.n	8007d28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10b      	bne.n	8007d4a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	61fb      	str	r3, [r7, #28]
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	e7fd      	b.n	8007d46 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d4a:	235c      	movs	r3, #92	@ 0x5c
 8007d4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	2b5c      	cmp	r3, #92	@ 0x5c
 8007d52:	d00b      	beq.n	8007d6c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	61bb      	str	r3, [r7, #24]
}
 8007d66:	bf00      	nop
 8007d68:	bf00      	nop
 8007d6a:	e7fd      	b.n	8007d68 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d01e      	beq.n	8007db2 <xTaskCreateStatic+0xb2>
 8007d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d01b      	beq.n	8007db2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d82:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d86:	2202      	movs	r2, #2
 8007d88:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9303      	str	r3, [sp, #12]
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	9302      	str	r3, [sp, #8]
 8007d94:	f107 0314 	add.w	r3, r7, #20
 8007d98:	9301      	str	r3, [sp, #4]
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	68b9      	ldr	r1, [r7, #8]
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 f850 	bl	8007e4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007daa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007dac:	f000 f8de 	bl	8007f6c <prvAddNewTaskToReadyList>
 8007db0:	e001      	b.n	8007db6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007db6:	697b      	ldr	r3, [r7, #20]
	}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3728      	adds	r7, #40	@ 0x28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08c      	sub	sp, #48	@ 0x30
 8007dc4:	af04      	add	r7, sp, #16
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	603b      	str	r3, [r7, #0]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007dd0:	88fb      	ldrh	r3, [r7, #6]
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f001 fc49 	bl	800966c <pvPortMalloc>
 8007dda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00e      	beq.n	8007e00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007de2:	205c      	movs	r0, #92	@ 0x5c
 8007de4:	f001 fc42 	bl	800966c <pvPortMalloc>
 8007de8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	631a      	str	r2, [r3, #48]	@ 0x30
 8007df6:	e005      	b.n	8007e04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007df8:	6978      	ldr	r0, [r7, #20]
 8007dfa:	f001 fd05 	bl	8009808 <vPortFree>
 8007dfe:	e001      	b.n	8007e04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e00:	2300      	movs	r3, #0
 8007e02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d017      	beq.n	8007e3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e12:	88fa      	ldrh	r2, [r7, #6]
 8007e14:	2300      	movs	r3, #0
 8007e16:	9303      	str	r3, [sp, #12]
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	9302      	str	r3, [sp, #8]
 8007e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	68b9      	ldr	r1, [r7, #8]
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 f80e 	bl	8007e4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e2e:	69f8      	ldr	r0, [r7, #28]
 8007e30:	f000 f89c 	bl	8007f6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e34:	2301      	movs	r3, #1
 8007e36:	61bb      	str	r3, [r7, #24]
 8007e38:	e002      	b.n	8007e40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e40:	69bb      	ldr	r3, [r7, #24]
	}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3720      	adds	r7, #32
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b088      	sub	sp, #32
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	461a      	mov	r2, r3
 8007e62:	21a5      	movs	r1, #165	@ 0xa5
 8007e64:	f001 fdf0 	bl	8009a48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007e72:	3b01      	subs	r3, #1
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	f023 0307 	bic.w	r3, r3, #7
 8007e80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00b      	beq.n	8007ea4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	617b      	str	r3, [r7, #20]
}
 8007e9e:	bf00      	nop
 8007ea0:	bf00      	nop
 8007ea2:	e7fd      	b.n	8007ea0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d01f      	beq.n	8007eea <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	e012      	b.n	8007ed6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	7819      	ldrb	r1, [r3, #0]
 8007eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	3334      	adds	r3, #52	@ 0x34
 8007ec0:	460a      	mov	r2, r1
 8007ec2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	4413      	add	r3, r2
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d006      	beq.n	8007ede <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	61fb      	str	r3, [r7, #28]
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	2b0f      	cmp	r3, #15
 8007eda:	d9e9      	bls.n	8007eb0 <prvInitialiseNewTask+0x66>
 8007edc:	e000      	b.n	8007ee0 <prvInitialiseNewTask+0x96>
			{
				break;
 8007ede:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ee8:	e003      	b.n	8007ef2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef4:	2b37      	cmp	r3, #55	@ 0x37
 8007ef6:	d901      	bls.n	8007efc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ef8:	2337      	movs	r3, #55	@ 0x37
 8007efa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f00:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f06:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f10:	3304      	adds	r3, #4
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff f966 	bl	80071e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1a:	3318      	adds	r3, #24
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7ff f961 	bl	80071e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f2a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f36:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	68f9      	ldr	r1, [r7, #12]
 8007f4a:	69b8      	ldr	r0, [r7, #24]
 8007f4c:	f001 f93e 	bl	80091cc <pxPortInitialiseStack>
 8007f50:	4602      	mov	r2, r0
 8007f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f62:	bf00      	nop
 8007f64:	3720      	adds	r7, #32
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f74:	f001 fa58 	bl	8009428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f78:	4b2d      	ldr	r3, [pc, #180]	@ (8008030 <prvAddNewTaskToReadyList+0xc4>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8008030 <prvAddNewTaskToReadyList+0xc4>)
 8007f80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f82:	4b2c      	ldr	r3, [pc, #176]	@ (8008034 <prvAddNewTaskToReadyList+0xc8>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d109      	bne.n	8007f9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8008034 <prvAddNewTaskToReadyList+0xc8>)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f90:	4b27      	ldr	r3, [pc, #156]	@ (8008030 <prvAddNewTaskToReadyList+0xc4>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d110      	bne.n	8007fba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f98:	f000 fc1e 	bl	80087d8 <prvInitialiseTaskLists>
 8007f9c:	e00d      	b.n	8007fba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f9e:	4b26      	ldr	r3, [pc, #152]	@ (8008038 <prvAddNewTaskToReadyList+0xcc>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d109      	bne.n	8007fba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007fa6:	4b23      	ldr	r3, [pc, #140]	@ (8008034 <prvAddNewTaskToReadyList+0xc8>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d802      	bhi.n	8007fba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8008034 <prvAddNewTaskToReadyList+0xc8>)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007fba:	4b20      	ldr	r3, [pc, #128]	@ (800803c <prvAddNewTaskToReadyList+0xd0>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800803c <prvAddNewTaskToReadyList+0xd0>)
 8007fc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800803c <prvAddNewTaskToReadyList+0xd0>)
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8008040 <prvAddNewTaskToReadyList+0xd4>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d903      	bls.n	8007fe0 <prvAddNewTaskToReadyList+0x74>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fdc:	4a18      	ldr	r2, [pc, #96]	@ (8008040 <prvAddNewTaskToReadyList+0xd4>)
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4a15      	ldr	r2, [pc, #84]	@ (8008044 <prvAddNewTaskToReadyList+0xd8>)
 8007fee:	441a      	add	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	f7ff f901 	bl	80071fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ffc:	f001 fa46 	bl	800948c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008000:	4b0d      	ldr	r3, [pc, #52]	@ (8008038 <prvAddNewTaskToReadyList+0xcc>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00e      	beq.n	8008026 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008008:	4b0a      	ldr	r3, [pc, #40]	@ (8008034 <prvAddNewTaskToReadyList+0xc8>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008012:	429a      	cmp	r2, r3
 8008014:	d207      	bcs.n	8008026 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008016:	4b0c      	ldr	r3, [pc, #48]	@ (8008048 <prvAddNewTaskToReadyList+0xdc>)
 8008018:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008026:	bf00      	nop
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20001d5c 	.word	0x20001d5c
 8008034:	20001888 	.word	0x20001888
 8008038:	20001d68 	.word	0x20001d68
 800803c:	20001d78 	.word	0x20001d78
 8008040:	20001d64 	.word	0x20001d64
 8008044:	2000188c 	.word	0x2000188c
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008054:	2300      	movs	r3, #0
 8008056:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d018      	beq.n	8008090 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800805e:	4b14      	ldr	r3, [pc, #80]	@ (80080b0 <vTaskDelay+0x64>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00b      	beq.n	800807e <vTaskDelay+0x32>
	__asm volatile
 8008066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	60bb      	str	r3, [r7, #8]
}
 8008078:	bf00      	nop
 800807a:	bf00      	nop
 800807c:	e7fd      	b.n	800807a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800807e:	f000 f883 	bl	8008188 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008082:	2100      	movs	r1, #0
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fcf3 	bl	8008a70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800808a:	f000 f88b 	bl	80081a4 <xTaskResumeAll>
 800808e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d107      	bne.n	80080a6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008096:	4b07      	ldr	r3, [pc, #28]	@ (80080b4 <vTaskDelay+0x68>)
 8008098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20001d84 	.word	0x20001d84
 80080b4:	e000ed04 	.word	0xe000ed04

080080b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08a      	sub	sp, #40	@ 0x28
 80080bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80080be:	2300      	movs	r3, #0
 80080c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80080c6:	463a      	mov	r2, r7
 80080c8:	1d39      	adds	r1, r7, #4
 80080ca:	f107 0308 	add.w	r3, r7, #8
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7ff f834 	bl	800713c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	9202      	str	r2, [sp, #8]
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	2300      	movs	r3, #0
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	2300      	movs	r3, #0
 80080e4:	460a      	mov	r2, r1
 80080e6:	4922      	ldr	r1, [pc, #136]	@ (8008170 <vTaskStartScheduler+0xb8>)
 80080e8:	4822      	ldr	r0, [pc, #136]	@ (8008174 <vTaskStartScheduler+0xbc>)
 80080ea:	f7ff fe09 	bl	8007d00 <xTaskCreateStatic>
 80080ee:	4603      	mov	r3, r0
 80080f0:	4a21      	ldr	r2, [pc, #132]	@ (8008178 <vTaskStartScheduler+0xc0>)
 80080f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080f4:	4b20      	ldr	r3, [pc, #128]	@ (8008178 <vTaskStartScheduler+0xc0>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80080fc:	2301      	movs	r3, #1
 80080fe:	617b      	str	r3, [r7, #20]
 8008100:	e001      	b.n	8008106 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d102      	bne.n	8008112 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800810c:	f000 fd04 	bl	8008b18 <xTimerCreateTimerTask>
 8008110:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d116      	bne.n	8008146 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	613b      	str	r3, [r7, #16]
}
 800812a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800812c:	4b13      	ldr	r3, [pc, #76]	@ (800817c <vTaskStartScheduler+0xc4>)
 800812e:	f04f 32ff 	mov.w	r2, #4294967295
 8008132:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008134:	4b12      	ldr	r3, [pc, #72]	@ (8008180 <vTaskStartScheduler+0xc8>)
 8008136:	2201      	movs	r2, #1
 8008138:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800813a:	4b12      	ldr	r3, [pc, #72]	@ (8008184 <vTaskStartScheduler+0xcc>)
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008140:	f001 f8ce 	bl	80092e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008144:	e00f      	b.n	8008166 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814c:	d10b      	bne.n	8008166 <vTaskStartScheduler+0xae>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	60fb      	str	r3, [r7, #12]
}
 8008160:	bf00      	nop
 8008162:	bf00      	nop
 8008164:	e7fd      	b.n	8008162 <vTaskStartScheduler+0xaa>
}
 8008166:	bf00      	nop
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	08009b5c 	.word	0x08009b5c
 8008174:	080087a9 	.word	0x080087a9
 8008178:	20001d80 	.word	0x20001d80
 800817c:	20001d7c 	.word	0x20001d7c
 8008180:	20001d68 	.word	0x20001d68
 8008184:	20001d60 	.word	0x20001d60

08008188 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800818c:	4b04      	ldr	r3, [pc, #16]	@ (80081a0 <vTaskSuspendAll+0x18>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3301      	adds	r3, #1
 8008192:	4a03      	ldr	r2, [pc, #12]	@ (80081a0 <vTaskSuspendAll+0x18>)
 8008194:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008196:	bf00      	nop
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	20001d84 	.word	0x20001d84

080081a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80081aa:	2300      	movs	r3, #0
 80081ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80081ae:	2300      	movs	r3, #0
 80081b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80081b2:	4b42      	ldr	r3, [pc, #264]	@ (80082bc <xTaskResumeAll+0x118>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10b      	bne.n	80081d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	603b      	str	r3, [r7, #0]
}
 80081cc:	bf00      	nop
 80081ce:	bf00      	nop
 80081d0:	e7fd      	b.n	80081ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081d2:	f001 f929 	bl	8009428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081d6:	4b39      	ldr	r3, [pc, #228]	@ (80082bc <xTaskResumeAll+0x118>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3b01      	subs	r3, #1
 80081dc:	4a37      	ldr	r2, [pc, #220]	@ (80082bc <xTaskResumeAll+0x118>)
 80081de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081e0:	4b36      	ldr	r3, [pc, #216]	@ (80082bc <xTaskResumeAll+0x118>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d162      	bne.n	80082ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081e8:	4b35      	ldr	r3, [pc, #212]	@ (80082c0 <xTaskResumeAll+0x11c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d05e      	beq.n	80082ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081f0:	e02f      	b.n	8008252 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081f2:	4b34      	ldr	r3, [pc, #208]	@ (80082c4 <xTaskResumeAll+0x120>)
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3318      	adds	r3, #24
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff f85a 	bl	80072b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3304      	adds	r3, #4
 8008208:	4618      	mov	r0, r3
 800820a:	f7ff f855 	bl	80072b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008212:	4b2d      	ldr	r3, [pc, #180]	@ (80082c8 <xTaskResumeAll+0x124>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	429a      	cmp	r2, r3
 8008218:	d903      	bls.n	8008222 <xTaskResumeAll+0x7e>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821e:	4a2a      	ldr	r2, [pc, #168]	@ (80082c8 <xTaskResumeAll+0x124>)
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008226:	4613      	mov	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4a27      	ldr	r2, [pc, #156]	@ (80082cc <xTaskResumeAll+0x128>)
 8008230:	441a      	add	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3304      	adds	r3, #4
 8008236:	4619      	mov	r1, r3
 8008238:	4610      	mov	r0, r2
 800823a:	f7fe ffe0 	bl	80071fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008242:	4b23      	ldr	r3, [pc, #140]	@ (80082d0 <xTaskResumeAll+0x12c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008248:	429a      	cmp	r2, r3
 800824a:	d302      	bcc.n	8008252 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800824c:	4b21      	ldr	r3, [pc, #132]	@ (80082d4 <xTaskResumeAll+0x130>)
 800824e:	2201      	movs	r2, #1
 8008250:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008252:	4b1c      	ldr	r3, [pc, #112]	@ (80082c4 <xTaskResumeAll+0x120>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1cb      	bne.n	80081f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008260:	f000 fb58 	bl	8008914 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008264:	4b1c      	ldr	r3, [pc, #112]	@ (80082d8 <xTaskResumeAll+0x134>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d010      	beq.n	8008292 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008270:	f000 f846 	bl	8008300 <xTaskIncrementTick>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800827a:	4b16      	ldr	r3, [pc, #88]	@ (80082d4 <xTaskResumeAll+0x130>)
 800827c:	2201      	movs	r2, #1
 800827e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3b01      	subs	r3, #1
 8008284:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1f1      	bne.n	8008270 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800828c:	4b12      	ldr	r3, [pc, #72]	@ (80082d8 <xTaskResumeAll+0x134>)
 800828e:	2200      	movs	r2, #0
 8008290:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008292:	4b10      	ldr	r3, [pc, #64]	@ (80082d4 <xTaskResumeAll+0x130>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d009      	beq.n	80082ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800829a:	2301      	movs	r3, #1
 800829c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800829e:	4b0f      	ldr	r3, [pc, #60]	@ (80082dc <xTaskResumeAll+0x138>)
 80082a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082ae:	f001 f8ed 	bl	800948c <vPortExitCritical>

	return xAlreadyYielded;
 80082b2:	68bb      	ldr	r3, [r7, #8]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	20001d84 	.word	0x20001d84
 80082c0:	20001d5c 	.word	0x20001d5c
 80082c4:	20001d1c 	.word	0x20001d1c
 80082c8:	20001d64 	.word	0x20001d64
 80082cc:	2000188c 	.word	0x2000188c
 80082d0:	20001888 	.word	0x20001888
 80082d4:	20001d70 	.word	0x20001d70
 80082d8:	20001d6c 	.word	0x20001d6c
 80082dc:	e000ed04 	.word	0xe000ed04

080082e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80082e6:	4b05      	ldr	r3, [pc, #20]	@ (80082fc <xTaskGetTickCount+0x1c>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80082ec:	687b      	ldr	r3, [r7, #4]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	20001d60 	.word	0x20001d60

08008300 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008306:	2300      	movs	r3, #0
 8008308:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800830a:	4b4f      	ldr	r3, [pc, #316]	@ (8008448 <xTaskIncrementTick+0x148>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	f040 8090 	bne.w	8008434 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008314:	4b4d      	ldr	r3, [pc, #308]	@ (800844c <xTaskIncrementTick+0x14c>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3301      	adds	r3, #1
 800831a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800831c:	4a4b      	ldr	r2, [pc, #300]	@ (800844c <xTaskIncrementTick+0x14c>)
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d121      	bne.n	800836c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008328:	4b49      	ldr	r3, [pc, #292]	@ (8008450 <xTaskIncrementTick+0x150>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00b      	beq.n	800834a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	603b      	str	r3, [r7, #0]
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop
 8008348:	e7fd      	b.n	8008346 <xTaskIncrementTick+0x46>
 800834a:	4b41      	ldr	r3, [pc, #260]	@ (8008450 <xTaskIncrementTick+0x150>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	4b40      	ldr	r3, [pc, #256]	@ (8008454 <xTaskIncrementTick+0x154>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a3e      	ldr	r2, [pc, #248]	@ (8008450 <xTaskIncrementTick+0x150>)
 8008356:	6013      	str	r3, [r2, #0]
 8008358:	4a3e      	ldr	r2, [pc, #248]	@ (8008454 <xTaskIncrementTick+0x154>)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	4b3e      	ldr	r3, [pc, #248]	@ (8008458 <xTaskIncrementTick+0x158>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3301      	adds	r3, #1
 8008364:	4a3c      	ldr	r2, [pc, #240]	@ (8008458 <xTaskIncrementTick+0x158>)
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	f000 fad4 	bl	8008914 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800836c:	4b3b      	ldr	r3, [pc, #236]	@ (800845c <xTaskIncrementTick+0x15c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	429a      	cmp	r2, r3
 8008374:	d349      	bcc.n	800840a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008376:	4b36      	ldr	r3, [pc, #216]	@ (8008450 <xTaskIncrementTick+0x150>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d104      	bne.n	800838a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008380:	4b36      	ldr	r3, [pc, #216]	@ (800845c <xTaskIncrementTick+0x15c>)
 8008382:	f04f 32ff 	mov.w	r2, #4294967295
 8008386:	601a      	str	r2, [r3, #0]
					break;
 8008388:	e03f      	b.n	800840a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800838a:	4b31      	ldr	r3, [pc, #196]	@ (8008450 <xTaskIncrementTick+0x150>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d203      	bcs.n	80083aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083a2:	4a2e      	ldr	r2, [pc, #184]	@ (800845c <xTaskIncrementTick+0x15c>)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80083a8:	e02f      	b.n	800840a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	3304      	adds	r3, #4
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fe ff82 	bl	80072b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d004      	beq.n	80083c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	3318      	adds	r3, #24
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fe ff79 	bl	80072b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ca:	4b25      	ldr	r3, [pc, #148]	@ (8008460 <xTaskIncrementTick+0x160>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d903      	bls.n	80083da <xTaskIncrementTick+0xda>
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d6:	4a22      	ldr	r2, [pc, #136]	@ (8008460 <xTaskIncrementTick+0x160>)
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4a1f      	ldr	r2, [pc, #124]	@ (8008464 <xTaskIncrementTick+0x164>)
 80083e8:	441a      	add	r2, r3
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	3304      	adds	r3, #4
 80083ee:	4619      	mov	r1, r3
 80083f0:	4610      	mov	r0, r2
 80083f2:	f7fe ff04 	bl	80071fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083fa:	4b1b      	ldr	r3, [pc, #108]	@ (8008468 <xTaskIncrementTick+0x168>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008400:	429a      	cmp	r2, r3
 8008402:	d3b8      	bcc.n	8008376 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008404:	2301      	movs	r3, #1
 8008406:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008408:	e7b5      	b.n	8008376 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800840a:	4b17      	ldr	r3, [pc, #92]	@ (8008468 <xTaskIncrementTick+0x168>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008410:	4914      	ldr	r1, [pc, #80]	@ (8008464 <xTaskIncrementTick+0x164>)
 8008412:	4613      	mov	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	440b      	add	r3, r1
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d901      	bls.n	8008426 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008422:	2301      	movs	r3, #1
 8008424:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008426:	4b11      	ldr	r3, [pc, #68]	@ (800846c <xTaskIncrementTick+0x16c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d007      	beq.n	800843e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800842e:	2301      	movs	r3, #1
 8008430:	617b      	str	r3, [r7, #20]
 8008432:	e004      	b.n	800843e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008434:	4b0e      	ldr	r3, [pc, #56]	@ (8008470 <xTaskIncrementTick+0x170>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3301      	adds	r3, #1
 800843a:	4a0d      	ldr	r2, [pc, #52]	@ (8008470 <xTaskIncrementTick+0x170>)
 800843c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800843e:	697b      	ldr	r3, [r7, #20]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20001d84 	.word	0x20001d84
 800844c:	20001d60 	.word	0x20001d60
 8008450:	20001d14 	.word	0x20001d14
 8008454:	20001d18 	.word	0x20001d18
 8008458:	20001d74 	.word	0x20001d74
 800845c:	20001d7c 	.word	0x20001d7c
 8008460:	20001d64 	.word	0x20001d64
 8008464:	2000188c 	.word	0x2000188c
 8008468:	20001888 	.word	0x20001888
 800846c:	20001d70 	.word	0x20001d70
 8008470:	20001d6c 	.word	0x20001d6c

08008474 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800847a:	4b28      	ldr	r3, [pc, #160]	@ (800851c <vTaskSwitchContext+0xa8>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008482:	4b27      	ldr	r3, [pc, #156]	@ (8008520 <vTaskSwitchContext+0xac>)
 8008484:	2201      	movs	r2, #1
 8008486:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008488:	e042      	b.n	8008510 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800848a:	4b25      	ldr	r3, [pc, #148]	@ (8008520 <vTaskSwitchContext+0xac>)
 800848c:	2200      	movs	r2, #0
 800848e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008490:	4b24      	ldr	r3, [pc, #144]	@ (8008524 <vTaskSwitchContext+0xb0>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	e011      	b.n	80084bc <vTaskSwitchContext+0x48>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10b      	bne.n	80084b6 <vTaskSwitchContext+0x42>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	607b      	str	r3, [r7, #4]
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	e7fd      	b.n	80084b2 <vTaskSwitchContext+0x3e>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	491a      	ldr	r1, [pc, #104]	@ (8008528 <vTaskSwitchContext+0xb4>)
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	440b      	add	r3, r1
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0e3      	beq.n	8008498 <vTaskSwitchContext+0x24>
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4a13      	ldr	r2, [pc, #76]	@ (8008528 <vTaskSwitchContext+0xb4>)
 80084dc:	4413      	add	r3, r2
 80084de:	60bb      	str	r3, [r7, #8]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	685a      	ldr	r2, [r3, #4]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	605a      	str	r2, [r3, #4]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	3308      	adds	r3, #8
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d104      	bne.n	8008500 <vTaskSwitchContext+0x8c>
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	605a      	str	r2, [r3, #4]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	4a09      	ldr	r2, [pc, #36]	@ (800852c <vTaskSwitchContext+0xb8>)
 8008508:	6013      	str	r3, [r2, #0]
 800850a:	4a06      	ldr	r2, [pc, #24]	@ (8008524 <vTaskSwitchContext+0xb0>)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6013      	str	r3, [r2, #0]
}
 8008510:	bf00      	nop
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	20001d84 	.word	0x20001d84
 8008520:	20001d70 	.word	0x20001d70
 8008524:	20001d64 	.word	0x20001d64
 8008528:	2000188c 	.word	0x2000188c
 800852c:	20001888 	.word	0x20001888

08008530 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10b      	bne.n	8008558 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	60fb      	str	r3, [r7, #12]
}
 8008552:	bf00      	nop
 8008554:	bf00      	nop
 8008556:	e7fd      	b.n	8008554 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008558:	4b07      	ldr	r3, [pc, #28]	@ (8008578 <vTaskPlaceOnEventList+0x48>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3318      	adds	r3, #24
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7fe fe70 	bl	8007246 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008566:	2101      	movs	r1, #1
 8008568:	6838      	ldr	r0, [r7, #0]
 800856a:	f000 fa81 	bl	8008a70 <prvAddCurrentTaskToDelayedList>
}
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	20001888 	.word	0x20001888

0800857c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10b      	bne.n	80085a6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	617b      	str	r3, [r7, #20]
}
 80085a0:	bf00      	nop
 80085a2:	bf00      	nop
 80085a4:	e7fd      	b.n	80085a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085a6:	4b0a      	ldr	r3, [pc, #40]	@ (80085d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3318      	adds	r3, #24
 80085ac:	4619      	mov	r1, r3
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7fe fe25 	bl	80071fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80085ba:	f04f 33ff 	mov.w	r3, #4294967295
 80085be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80085c0:	6879      	ldr	r1, [r7, #4]
 80085c2:	68b8      	ldr	r0, [r7, #8]
 80085c4:	f000 fa54 	bl	8008a70 <prvAddCurrentTaskToDelayedList>
	}
 80085c8:	bf00      	nop
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	20001888 	.word	0x20001888

080085d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10b      	bne.n	8008602 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	60fb      	str	r3, [r7, #12]
}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	e7fd      	b.n	80085fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	3318      	adds	r3, #24
 8008606:	4618      	mov	r0, r3
 8008608:	f7fe fe56 	bl	80072b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800860c:	4b1d      	ldr	r3, [pc, #116]	@ (8008684 <xTaskRemoveFromEventList+0xb0>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d11d      	bne.n	8008650 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	3304      	adds	r3, #4
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fe4d 	bl	80072b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008622:	4b19      	ldr	r3, [pc, #100]	@ (8008688 <xTaskRemoveFromEventList+0xb4>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d903      	bls.n	8008632 <xTaskRemoveFromEventList+0x5e>
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862e:	4a16      	ldr	r2, [pc, #88]	@ (8008688 <xTaskRemoveFromEventList+0xb4>)
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4a13      	ldr	r2, [pc, #76]	@ (800868c <xTaskRemoveFromEventList+0xb8>)
 8008640:	441a      	add	r2, r3
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	3304      	adds	r3, #4
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f7fe fdd8 	bl	80071fe <vListInsertEnd>
 800864e:	e005      	b.n	800865c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	3318      	adds	r3, #24
 8008654:	4619      	mov	r1, r3
 8008656:	480e      	ldr	r0, [pc, #56]	@ (8008690 <xTaskRemoveFromEventList+0xbc>)
 8008658:	f7fe fdd1 	bl	80071fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008660:	4b0c      	ldr	r3, [pc, #48]	@ (8008694 <xTaskRemoveFromEventList+0xc0>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008666:	429a      	cmp	r2, r3
 8008668:	d905      	bls.n	8008676 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800866a:	2301      	movs	r3, #1
 800866c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800866e:	4b0a      	ldr	r3, [pc, #40]	@ (8008698 <xTaskRemoveFromEventList+0xc4>)
 8008670:	2201      	movs	r2, #1
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	e001      	b.n	800867a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008676:	2300      	movs	r3, #0
 8008678:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800867a:	697b      	ldr	r3, [r7, #20]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3718      	adds	r7, #24
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	20001d84 	.word	0x20001d84
 8008688:	20001d64 	.word	0x20001d64
 800868c:	2000188c 	.word	0x2000188c
 8008690:	20001d1c 	.word	0x20001d1c
 8008694:	20001888 	.word	0x20001888
 8008698:	20001d70 	.word	0x20001d70

0800869c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086a4:	4b06      	ldr	r3, [pc, #24]	@ (80086c0 <vTaskInternalSetTimeOutState+0x24>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80086ac:	4b05      	ldr	r3, [pc, #20]	@ (80086c4 <vTaskInternalSetTimeOutState+0x28>)
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	605a      	str	r2, [r3, #4]
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	20001d74 	.word	0x20001d74
 80086c4:	20001d60 	.word	0x20001d60

080086c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b088      	sub	sp, #32
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10b      	bne.n	80086f0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	613b      	str	r3, [r7, #16]
}
 80086ea:	bf00      	nop
 80086ec:	bf00      	nop
 80086ee:	e7fd      	b.n	80086ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	60fb      	str	r3, [r7, #12]
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	e7fd      	b.n	800870a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800870e:	f000 fe8b 	bl	8009428 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008712:	4b1d      	ldr	r3, [pc, #116]	@ (8008788 <xTaskCheckForTimeOut+0xc0>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	d102      	bne.n	8008732 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800872c:	2300      	movs	r3, #0
 800872e:	61fb      	str	r3, [r7, #28]
 8008730:	e023      	b.n	800877a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	4b15      	ldr	r3, [pc, #84]	@ (800878c <xTaskCheckForTimeOut+0xc4>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	429a      	cmp	r2, r3
 800873c:	d007      	beq.n	800874e <xTaskCheckForTimeOut+0x86>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	429a      	cmp	r2, r3
 8008746:	d302      	bcc.n	800874e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008748:	2301      	movs	r3, #1
 800874a:	61fb      	str	r3, [r7, #28]
 800874c:	e015      	b.n	800877a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	429a      	cmp	r2, r3
 8008756:	d20b      	bcs.n	8008770 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	1ad2      	subs	r2, r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7ff ff99 	bl	800869c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800876a:	2300      	movs	r3, #0
 800876c:	61fb      	str	r3, [r7, #28]
 800876e:	e004      	b.n	800877a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008776:	2301      	movs	r3, #1
 8008778:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800877a:	f000 fe87 	bl	800948c <vPortExitCritical>

	return xReturn;
 800877e:	69fb      	ldr	r3, [r7, #28]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3720      	adds	r7, #32
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	20001d60 	.word	0x20001d60
 800878c:	20001d74 	.word	0x20001d74

08008790 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008790:	b480      	push	{r7}
 8008792:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008794:	4b03      	ldr	r3, [pc, #12]	@ (80087a4 <vTaskMissedYield+0x14>)
 8008796:	2201      	movs	r2, #1
 8008798:	601a      	str	r2, [r3, #0]
}
 800879a:	bf00      	nop
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	20001d70 	.word	0x20001d70

080087a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087b0:	f000 f852 	bl	8008858 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087b4:	4b06      	ldr	r3, [pc, #24]	@ (80087d0 <prvIdleTask+0x28>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d9f9      	bls.n	80087b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80087bc:	4b05      	ldr	r3, [pc, #20]	@ (80087d4 <prvIdleTask+0x2c>)
 80087be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087cc:	e7f0      	b.n	80087b0 <prvIdleTask+0x8>
 80087ce:	bf00      	nop
 80087d0:	2000188c 	.word	0x2000188c
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087de:	2300      	movs	r3, #0
 80087e0:	607b      	str	r3, [r7, #4]
 80087e2:	e00c      	b.n	80087fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	4613      	mov	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4413      	add	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4a12      	ldr	r2, [pc, #72]	@ (8008838 <prvInitialiseTaskLists+0x60>)
 80087f0:	4413      	add	r3, r2
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe fcd6 	bl	80071a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3301      	adds	r3, #1
 80087fc:	607b      	str	r3, [r7, #4]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b37      	cmp	r3, #55	@ 0x37
 8008802:	d9ef      	bls.n	80087e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008804:	480d      	ldr	r0, [pc, #52]	@ (800883c <prvInitialiseTaskLists+0x64>)
 8008806:	f7fe fccd 	bl	80071a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800880a:	480d      	ldr	r0, [pc, #52]	@ (8008840 <prvInitialiseTaskLists+0x68>)
 800880c:	f7fe fcca 	bl	80071a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008810:	480c      	ldr	r0, [pc, #48]	@ (8008844 <prvInitialiseTaskLists+0x6c>)
 8008812:	f7fe fcc7 	bl	80071a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008816:	480c      	ldr	r0, [pc, #48]	@ (8008848 <prvInitialiseTaskLists+0x70>)
 8008818:	f7fe fcc4 	bl	80071a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800881c:	480b      	ldr	r0, [pc, #44]	@ (800884c <prvInitialiseTaskLists+0x74>)
 800881e:	f7fe fcc1 	bl	80071a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008822:	4b0b      	ldr	r3, [pc, #44]	@ (8008850 <prvInitialiseTaskLists+0x78>)
 8008824:	4a05      	ldr	r2, [pc, #20]	@ (800883c <prvInitialiseTaskLists+0x64>)
 8008826:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008828:	4b0a      	ldr	r3, [pc, #40]	@ (8008854 <prvInitialiseTaskLists+0x7c>)
 800882a:	4a05      	ldr	r2, [pc, #20]	@ (8008840 <prvInitialiseTaskLists+0x68>)
 800882c:	601a      	str	r2, [r3, #0]
}
 800882e:	bf00      	nop
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	2000188c 	.word	0x2000188c
 800883c:	20001cec 	.word	0x20001cec
 8008840:	20001d00 	.word	0x20001d00
 8008844:	20001d1c 	.word	0x20001d1c
 8008848:	20001d30 	.word	0x20001d30
 800884c:	20001d48 	.word	0x20001d48
 8008850:	20001d14 	.word	0x20001d14
 8008854:	20001d18 	.word	0x20001d18

08008858 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800885e:	e019      	b.n	8008894 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008860:	f000 fde2 	bl	8009428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008864:	4b10      	ldr	r3, [pc, #64]	@ (80088a8 <prvCheckTasksWaitingTermination+0x50>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3304      	adds	r3, #4
 8008870:	4618      	mov	r0, r3
 8008872:	f7fe fd21 	bl	80072b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008876:	4b0d      	ldr	r3, [pc, #52]	@ (80088ac <prvCheckTasksWaitingTermination+0x54>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3b01      	subs	r3, #1
 800887c:	4a0b      	ldr	r2, [pc, #44]	@ (80088ac <prvCheckTasksWaitingTermination+0x54>)
 800887e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008880:	4b0b      	ldr	r3, [pc, #44]	@ (80088b0 <prvCheckTasksWaitingTermination+0x58>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3b01      	subs	r3, #1
 8008886:	4a0a      	ldr	r2, [pc, #40]	@ (80088b0 <prvCheckTasksWaitingTermination+0x58>)
 8008888:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800888a:	f000 fdff 	bl	800948c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f810 	bl	80088b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008894:	4b06      	ldr	r3, [pc, #24]	@ (80088b0 <prvCheckTasksWaitingTermination+0x58>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e1      	bne.n	8008860 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800889c:	bf00      	nop
 800889e:	bf00      	nop
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20001d30 	.word	0x20001d30
 80088ac:	20001d5c 	.word	0x20001d5c
 80088b0:	20001d44 	.word	0x20001d44

080088b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d108      	bne.n	80088d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 ff9c 	bl	8009808 <vPortFree>
				vPortFree( pxTCB );
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 ff99 	bl	8009808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088d6:	e019      	b.n	800890c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d103      	bne.n	80088ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 ff90 	bl	8009808 <vPortFree>
	}
 80088e8:	e010      	b.n	800890c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d00b      	beq.n	800890c <prvDeleteTCB+0x58>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	60fb      	str	r3, [r7, #12]
}
 8008906:	bf00      	nop
 8008908:	bf00      	nop
 800890a:	e7fd      	b.n	8008908 <prvDeleteTCB+0x54>
	}
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800891a:	4b0c      	ldr	r3, [pc, #48]	@ (800894c <prvResetNextTaskUnblockTime+0x38>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d104      	bne.n	800892e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008924:	4b0a      	ldr	r3, [pc, #40]	@ (8008950 <prvResetNextTaskUnblockTime+0x3c>)
 8008926:	f04f 32ff 	mov.w	r2, #4294967295
 800892a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800892c:	e008      	b.n	8008940 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800892e:	4b07      	ldr	r3, [pc, #28]	@ (800894c <prvResetNextTaskUnblockTime+0x38>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	4a04      	ldr	r2, [pc, #16]	@ (8008950 <prvResetNextTaskUnblockTime+0x3c>)
 800893e:	6013      	str	r3, [r2, #0]
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	20001d14 	.word	0x20001d14
 8008950:	20001d7c 	.word	0x20001d7c

08008954 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800895a:	4b0b      	ldr	r3, [pc, #44]	@ (8008988 <xTaskGetSchedulerState+0x34>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d102      	bne.n	8008968 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008962:	2301      	movs	r3, #1
 8008964:	607b      	str	r3, [r7, #4]
 8008966:	e008      	b.n	800897a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008968:	4b08      	ldr	r3, [pc, #32]	@ (800898c <xTaskGetSchedulerState+0x38>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d102      	bne.n	8008976 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008970:	2302      	movs	r3, #2
 8008972:	607b      	str	r3, [r7, #4]
 8008974:	e001      	b.n	800897a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008976:	2300      	movs	r3, #0
 8008978:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800897a:	687b      	ldr	r3, [r7, #4]
	}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	20001d68 	.word	0x20001d68
 800898c:	20001d84 	.word	0x20001d84

08008990 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800899c:	2300      	movs	r3, #0
 800899e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d058      	beq.n	8008a58 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80089a6:	4b2f      	ldr	r3, [pc, #188]	@ (8008a64 <xTaskPriorityDisinherit+0xd4>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d00b      	beq.n	80089c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	60fb      	str	r3, [r7, #12]
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	e7fd      	b.n	80089c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10b      	bne.n	80089e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	60bb      	str	r3, [r7, #8]
}
 80089e2:	bf00      	nop
 80089e4:	bf00      	nop
 80089e6:	e7fd      	b.n	80089e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ec:	1e5a      	subs	r2, r3, #1
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d02c      	beq.n	8008a58 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d128      	bne.n	8008a58 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	3304      	adds	r3, #4
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe fc54 	bl	80072b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a28:	4b0f      	ldr	r3, [pc, #60]	@ (8008a68 <xTaskPriorityDisinherit+0xd8>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d903      	bls.n	8008a38 <xTaskPriorityDisinherit+0xa8>
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a34:	4a0c      	ldr	r2, [pc, #48]	@ (8008a68 <xTaskPriorityDisinherit+0xd8>)
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4a09      	ldr	r2, [pc, #36]	@ (8008a6c <xTaskPriorityDisinherit+0xdc>)
 8008a46:	441a      	add	r2, r3
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4610      	mov	r0, r2
 8008a50:	f7fe fbd5 	bl	80071fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a54:	2301      	movs	r3, #1
 8008a56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a58:	697b      	ldr	r3, [r7, #20]
	}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20001888 	.word	0x20001888
 8008a68:	20001d64 	.word	0x20001d64
 8008a6c:	2000188c 	.word	0x2000188c

08008a70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a7a:	4b21      	ldr	r3, [pc, #132]	@ (8008b00 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a80:	4b20      	ldr	r3, [pc, #128]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3304      	adds	r3, #4
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe fc16 	bl	80072b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a92:	d10a      	bne.n	8008aaa <prvAddCurrentTaskToDelayedList+0x3a>
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d007      	beq.n	8008aaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4819      	ldr	r0, [pc, #100]	@ (8008b08 <prvAddCurrentTaskToDelayedList+0x98>)
 8008aa4:	f7fe fbab 	bl	80071fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008aa8:	e026      	b.n	8008af8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4413      	add	r3, r2
 8008ab0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ab2:	4b14      	ldr	r3, [pc, #80]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d209      	bcs.n	8008ad6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ac2:	4b12      	ldr	r3, [pc, #72]	@ (8008b0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3304      	adds	r3, #4
 8008acc:	4619      	mov	r1, r3
 8008ace:	4610      	mov	r0, r2
 8008ad0:	f7fe fbb9 	bl	8007246 <vListInsert>
}
 8008ad4:	e010      	b.n	8008af8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	4b0a      	ldr	r3, [pc, #40]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0x94>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	f7fe fbaf 	bl	8007246 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d202      	bcs.n	8008af8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008af2:	4a08      	ldr	r2, [pc, #32]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	6013      	str	r3, [r2, #0]
}
 8008af8:	bf00      	nop
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20001d60 	.word	0x20001d60
 8008b04:	20001888 	.word	0x20001888
 8008b08:	20001d48 	.word	0x20001d48
 8008b0c:	20001d18 	.word	0x20001d18
 8008b10:	20001d14 	.word	0x20001d14
 8008b14:	20001d7c 	.word	0x20001d7c

08008b18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b08a      	sub	sp, #40	@ 0x28
 8008b1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b22:	f000 fb13 	bl	800914c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b26:	4b1d      	ldr	r3, [pc, #116]	@ (8008b9c <xTimerCreateTimerTask+0x84>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d021      	beq.n	8008b72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b32:	2300      	movs	r3, #0
 8008b34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b36:	1d3a      	adds	r2, r7, #4
 8008b38:	f107 0108 	add.w	r1, r7, #8
 8008b3c:	f107 030c 	add.w	r3, r7, #12
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe fb15 	bl	8007170 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	9202      	str	r2, [sp, #8]
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	2302      	movs	r3, #2
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2300      	movs	r3, #0
 8008b56:	460a      	mov	r2, r1
 8008b58:	4911      	ldr	r1, [pc, #68]	@ (8008ba0 <xTimerCreateTimerTask+0x88>)
 8008b5a:	4812      	ldr	r0, [pc, #72]	@ (8008ba4 <xTimerCreateTimerTask+0x8c>)
 8008b5c:	f7ff f8d0 	bl	8007d00 <xTaskCreateStatic>
 8008b60:	4603      	mov	r3, r0
 8008b62:	4a11      	ldr	r2, [pc, #68]	@ (8008ba8 <xTimerCreateTimerTask+0x90>)
 8008b64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b66:	4b10      	ldr	r3, [pc, #64]	@ (8008ba8 <xTimerCreateTimerTask+0x90>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10b      	bne.n	8008b90 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	613b      	str	r3, [r7, #16]
}
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	e7fd      	b.n	8008b8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b90:	697b      	ldr	r3, [r7, #20]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3718      	adds	r7, #24
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20001db8 	.word	0x20001db8
 8008ba0:	08009b64 	.word	0x08009b64
 8008ba4:	08008ce5 	.word	0x08008ce5
 8008ba8:	20001dbc 	.word	0x20001dbc

08008bac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08a      	sub	sp, #40	@ 0x28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10b      	bne.n	8008bdc <xTimerGenericCommand+0x30>
	__asm volatile
 8008bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	623b      	str	r3, [r7, #32]
}
 8008bd6:	bf00      	nop
 8008bd8:	bf00      	nop
 8008bda:	e7fd      	b.n	8008bd8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008bdc:	4b19      	ldr	r3, [pc, #100]	@ (8008c44 <xTimerGenericCommand+0x98>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d02a      	beq.n	8008c3a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2b05      	cmp	r3, #5
 8008bf4:	dc18      	bgt.n	8008c28 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008bf6:	f7ff fead 	bl	8008954 <xTaskGetSchedulerState>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d109      	bne.n	8008c14 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c00:	4b10      	ldr	r3, [pc, #64]	@ (8008c44 <xTimerGenericCommand+0x98>)
 8008c02:	6818      	ldr	r0, [r3, #0]
 8008c04:	f107 0110 	add.w	r1, r7, #16
 8008c08:	2300      	movs	r3, #0
 8008c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c0c:	f7fe fc88 	bl	8007520 <xQueueGenericSend>
 8008c10:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c12:	e012      	b.n	8008c3a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c14:	4b0b      	ldr	r3, [pc, #44]	@ (8008c44 <xTimerGenericCommand+0x98>)
 8008c16:	6818      	ldr	r0, [r3, #0]
 8008c18:	f107 0110 	add.w	r1, r7, #16
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f7fe fc7e 	bl	8007520 <xQueueGenericSend>
 8008c24:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c26:	e008      	b.n	8008c3a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c28:	4b06      	ldr	r3, [pc, #24]	@ (8008c44 <xTimerGenericCommand+0x98>)
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	f107 0110 	add.w	r1, r7, #16
 8008c30:	2300      	movs	r3, #0
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	f7fe fd76 	bl	8007724 <xQueueGenericSendFromISR>
 8008c38:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3728      	adds	r7, #40	@ 0x28
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20001db8 	.word	0x20001db8

08008c48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af02      	add	r7, sp, #8
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c52:	4b23      	ldr	r3, [pc, #140]	@ (8008ce0 <prvProcessExpiredTimer+0x98>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	3304      	adds	r3, #4
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fe fb29 	bl	80072b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c6c:	f003 0304 	and.w	r3, r3, #4
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d023      	beq.n	8008cbc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	699a      	ldr	r2, [r3, #24]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	18d1      	adds	r1, r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	6978      	ldr	r0, [r7, #20]
 8008c82:	f000 f8d5 	bl	8008e30 <prvInsertTimerInActiveList>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d020      	beq.n	8008cce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	2300      	movs	r3, #0
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	2100      	movs	r1, #0
 8008c96:	6978      	ldr	r0, [r7, #20]
 8008c98:	f7ff ff88 	bl	8008bac <xTimerGenericCommand>
 8008c9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d114      	bne.n	8008cce <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	60fb      	str	r3, [r7, #12]
}
 8008cb6:	bf00      	nop
 8008cb8:	bf00      	nop
 8008cba:	e7fd      	b.n	8008cb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cc2:	f023 0301 	bic.w	r3, r3, #1
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	6978      	ldr	r0, [r7, #20]
 8008cd4:	4798      	blx	r3
}
 8008cd6:	bf00      	nop
 8008cd8:	3718      	adds	r7, #24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	20001db0 	.word	0x20001db0

08008ce4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cec:	f107 0308 	add.w	r3, r7, #8
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 f859 	bl	8008da8 <prvGetNextExpireTime>
 8008cf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 f805 	bl	8008d0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d02:	f000 f8d7 	bl	8008eb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d06:	bf00      	nop
 8008d08:	e7f0      	b.n	8008cec <prvTimerTask+0x8>
	...

08008d0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d16:	f7ff fa37 	bl	8008188 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d1a:	f107 0308 	add.w	r3, r7, #8
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f866 	bl	8008df0 <prvSampleTimeNow>
 8008d24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d130      	bne.n	8008d8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10a      	bne.n	8008d48 <prvProcessTimerOrBlockTask+0x3c>
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d806      	bhi.n	8008d48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d3a:	f7ff fa33 	bl	80081a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d3e:	68f9      	ldr	r1, [r7, #12]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7ff ff81 	bl	8008c48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d46:	e024      	b.n	8008d92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d008      	beq.n	8008d60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d4e:	4b13      	ldr	r3, [pc, #76]	@ (8008d9c <prvProcessTimerOrBlockTask+0x90>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <prvProcessTimerOrBlockTask+0x50>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e000      	b.n	8008d5e <prvProcessTimerOrBlockTask+0x52>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d60:	4b0f      	ldr	r3, [pc, #60]	@ (8008da0 <prvProcessTimerOrBlockTask+0x94>)
 8008d62:	6818      	ldr	r0, [r3, #0]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	f7fe ff93 	bl	8007c98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d72:	f7ff fa17 	bl	80081a4 <xTaskResumeAll>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d7c:	4b09      	ldr	r3, [pc, #36]	@ (8008da4 <prvProcessTimerOrBlockTask+0x98>)
 8008d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	f3bf 8f6f 	isb	sy
}
 8008d8c:	e001      	b.n	8008d92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d8e:	f7ff fa09 	bl	80081a4 <xTaskResumeAll>
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20001db4 	.word	0x20001db4
 8008da0:	20001db8 	.word	0x20001db8
 8008da4:	e000ed04 	.word	0xe000ed04

08008da8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008db0:	4b0e      	ldr	r3, [pc, #56]	@ (8008dec <prvGetNextExpireTime+0x44>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <prvGetNextExpireTime+0x16>
 8008dba:	2201      	movs	r2, #1
 8008dbc:	e000      	b.n	8008dc0 <prvGetNextExpireTime+0x18>
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d105      	bne.n	8008dd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008dcc:	4b07      	ldr	r3, [pc, #28]	@ (8008dec <prvGetNextExpireTime+0x44>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60fb      	str	r3, [r7, #12]
 8008dd6:	e001      	b.n	8008ddc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	20001db0 	.word	0x20001db0

08008df0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008df8:	f7ff fa72 	bl	80082e0 <xTaskGetTickCount>
 8008dfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8008e2c <prvSampleTimeNow+0x3c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d205      	bcs.n	8008e14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e08:	f000 f93a 	bl	8009080 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	e002      	b.n	8008e1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e1a:	4a04      	ldr	r2, [pc, #16]	@ (8008e2c <prvSampleTimeNow+0x3c>)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e20:	68fb      	ldr	r3, [r7, #12]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	20001dc0 	.word	0x20001dc0

08008e30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
 8008e3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d812      	bhi.n	8008e7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	1ad2      	subs	r2, r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d302      	bcc.n	8008e6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e64:	2301      	movs	r3, #1
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	e01b      	b.n	8008ea2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e6a:	4b10      	ldr	r3, [pc, #64]	@ (8008eac <prvInsertTimerInActiveList+0x7c>)
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3304      	adds	r3, #4
 8008e72:	4619      	mov	r1, r3
 8008e74:	4610      	mov	r0, r2
 8008e76:	f7fe f9e6 	bl	8007246 <vListInsert>
 8008e7a:	e012      	b.n	8008ea2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d206      	bcs.n	8008e92 <prvInsertTimerInActiveList+0x62>
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d302      	bcc.n	8008e92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	617b      	str	r3, [r7, #20]
 8008e90:	e007      	b.n	8008ea2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e92:	4b07      	ldr	r3, [pc, #28]	@ (8008eb0 <prvInsertTimerInActiveList+0x80>)
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	3304      	adds	r3, #4
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	f7fe f9d2 	bl	8007246 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ea2:	697b      	ldr	r3, [r7, #20]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3718      	adds	r7, #24
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	20001db4 	.word	0x20001db4
 8008eb0:	20001db0 	.word	0x20001db0

08008eb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b08e      	sub	sp, #56	@ 0x38
 8008eb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008eba:	e0ce      	b.n	800905a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	da19      	bge.n	8008ef6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ec2:	1d3b      	adds	r3, r7, #4
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10b      	bne.n	8008ee6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	61fb      	str	r3, [r7, #28]
}
 8008ee0:	bf00      	nop
 8008ee2:	bf00      	nop
 8008ee4:	e7fd      	b.n	8008ee2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008eec:	6850      	ldr	r0, [r2, #4]
 8008eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ef0:	6892      	ldr	r2, [r2, #8]
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f2c0 80ae 	blt.w	800905a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d004      	beq.n	8008f14 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe f9d2 	bl	80072b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f14:	463b      	mov	r3, r7
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7ff ff6a 	bl	8008df0 <prvSampleTimeNow>
 8008f1c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b09      	cmp	r3, #9
 8008f22:	f200 8097 	bhi.w	8009054 <prvProcessReceivedCommands+0x1a0>
 8008f26:	a201      	add	r2, pc, #4	@ (adr r2, 8008f2c <prvProcessReceivedCommands+0x78>)
 8008f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2c:	08008f55 	.word	0x08008f55
 8008f30:	08008f55 	.word	0x08008f55
 8008f34:	08008f55 	.word	0x08008f55
 8008f38:	08008fcb 	.word	0x08008fcb
 8008f3c:	08008fdf 	.word	0x08008fdf
 8008f40:	0800902b 	.word	0x0800902b
 8008f44:	08008f55 	.word	0x08008f55
 8008f48:	08008f55 	.word	0x08008f55
 8008f4c:	08008fcb 	.word	0x08008fcb
 8008f50:	08008fdf 	.word	0x08008fdf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f5a:	f043 0301 	orr.w	r3, r3, #1
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	18d1      	adds	r1, r2, r3
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f74:	f7ff ff5c 	bl	8008e30 <prvInsertTimerInActiveList>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d06c      	beq.n	8009058 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d061      	beq.n	8009058 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	441a      	add	r2, r3
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fa6:	f7ff fe01 	bl	8008bac <xTimerGenericCommand>
 8008faa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d152      	bne.n	8009058 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	61bb      	str	r3, [r7, #24]
}
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop
 8008fc8:	e7fd      	b.n	8008fc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fd0:	f023 0301 	bic.w	r3, r3, #1
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008fdc:	e03d      	b.n	800905a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fe4:	f043 0301 	orr.w	r3, r3, #1
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10b      	bne.n	8009016 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	617b      	str	r3, [r7, #20]
}
 8009010:	bf00      	nop
 8009012:	bf00      	nop
 8009014:	e7fd      	b.n	8009012 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009018:	699a      	ldr	r2, [r3, #24]
 800901a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901c:	18d1      	adds	r1, r2, r3
 800901e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009024:	f7ff ff04 	bl	8008e30 <prvInsertTimerInActiveList>
					break;
 8009028:	e017      	b.n	800905a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800902a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009030:	f003 0302 	and.w	r3, r3, #2
 8009034:	2b00      	cmp	r3, #0
 8009036:	d103      	bne.n	8009040 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800903a:	f000 fbe5 	bl	8009808 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800903e:	e00c      	b.n	800905a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009042:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009046:	f023 0301 	bic.w	r3, r3, #1
 800904a:	b2da      	uxtb	r2, r3
 800904c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009052:	e002      	b.n	800905a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009054:	bf00      	nop
 8009056:	e000      	b.n	800905a <prvProcessReceivedCommands+0x1a6>
					break;
 8009058:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800905a:	4b08      	ldr	r3, [pc, #32]	@ (800907c <prvProcessReceivedCommands+0x1c8>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	1d39      	adds	r1, r7, #4
 8009060:	2200      	movs	r2, #0
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe fbfc 	bl	8007860 <xQueueReceive>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	f47f af26 	bne.w	8008ebc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	3730      	adds	r7, #48	@ 0x30
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	20001db8 	.word	0x20001db8

08009080 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b088      	sub	sp, #32
 8009084:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009086:	e049      	b.n	800911c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009088:	4b2e      	ldr	r3, [pc, #184]	@ (8009144 <prvSwitchTimerLists+0xc4>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009092:	4b2c      	ldr	r3, [pc, #176]	@ (8009144 <prvSwitchTimerLists+0xc4>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	3304      	adds	r3, #4
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fe f909 	bl	80072b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090b4:	f003 0304 	and.w	r3, r3, #4
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d02f      	beq.n	800911c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	4413      	add	r3, r2
 80090c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d90e      	bls.n	80090ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	68ba      	ldr	r2, [r7, #8]
 80090d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090da:	4b1a      	ldr	r3, [pc, #104]	@ (8009144 <prvSwitchTimerLists+0xc4>)
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3304      	adds	r3, #4
 80090e2:	4619      	mov	r1, r3
 80090e4:	4610      	mov	r0, r2
 80090e6:	f7fe f8ae 	bl	8007246 <vListInsert>
 80090ea:	e017      	b.n	800911c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090ec:	2300      	movs	r3, #0
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	2300      	movs	r3, #0
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	2100      	movs	r1, #0
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f7ff fd58 	bl	8008bac <xTimerGenericCommand>
 80090fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10b      	bne.n	800911c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	603b      	str	r3, [r7, #0]
}
 8009116:	bf00      	nop
 8009118:	bf00      	nop
 800911a:	e7fd      	b.n	8009118 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800911c:	4b09      	ldr	r3, [pc, #36]	@ (8009144 <prvSwitchTimerLists+0xc4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1b0      	bne.n	8009088 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009126:	4b07      	ldr	r3, [pc, #28]	@ (8009144 <prvSwitchTimerLists+0xc4>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800912c:	4b06      	ldr	r3, [pc, #24]	@ (8009148 <prvSwitchTimerLists+0xc8>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a04      	ldr	r2, [pc, #16]	@ (8009144 <prvSwitchTimerLists+0xc4>)
 8009132:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009134:	4a04      	ldr	r2, [pc, #16]	@ (8009148 <prvSwitchTimerLists+0xc8>)
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	6013      	str	r3, [r2, #0]
}
 800913a:	bf00      	nop
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	20001db0 	.word	0x20001db0
 8009148:	20001db4 	.word	0x20001db4

0800914c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009152:	f000 f969 	bl	8009428 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009156:	4b15      	ldr	r3, [pc, #84]	@ (80091ac <prvCheckForValidListAndQueue+0x60>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d120      	bne.n	80091a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800915e:	4814      	ldr	r0, [pc, #80]	@ (80091b0 <prvCheckForValidListAndQueue+0x64>)
 8009160:	f7fe f820 	bl	80071a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009164:	4813      	ldr	r0, [pc, #76]	@ (80091b4 <prvCheckForValidListAndQueue+0x68>)
 8009166:	f7fe f81d 	bl	80071a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800916a:	4b13      	ldr	r3, [pc, #76]	@ (80091b8 <prvCheckForValidListAndQueue+0x6c>)
 800916c:	4a10      	ldr	r2, [pc, #64]	@ (80091b0 <prvCheckForValidListAndQueue+0x64>)
 800916e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009170:	4b12      	ldr	r3, [pc, #72]	@ (80091bc <prvCheckForValidListAndQueue+0x70>)
 8009172:	4a10      	ldr	r2, [pc, #64]	@ (80091b4 <prvCheckForValidListAndQueue+0x68>)
 8009174:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009176:	2300      	movs	r3, #0
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	4b11      	ldr	r3, [pc, #68]	@ (80091c0 <prvCheckForValidListAndQueue+0x74>)
 800917c:	4a11      	ldr	r2, [pc, #68]	@ (80091c4 <prvCheckForValidListAndQueue+0x78>)
 800917e:	2110      	movs	r1, #16
 8009180:	200a      	movs	r0, #10
 8009182:	f7fe f92d 	bl	80073e0 <xQueueGenericCreateStatic>
 8009186:	4603      	mov	r3, r0
 8009188:	4a08      	ldr	r2, [pc, #32]	@ (80091ac <prvCheckForValidListAndQueue+0x60>)
 800918a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800918c:	4b07      	ldr	r3, [pc, #28]	@ (80091ac <prvCheckForValidListAndQueue+0x60>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d005      	beq.n	80091a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009194:	4b05      	ldr	r3, [pc, #20]	@ (80091ac <prvCheckForValidListAndQueue+0x60>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	490b      	ldr	r1, [pc, #44]	@ (80091c8 <prvCheckForValidListAndQueue+0x7c>)
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe fd52 	bl	8007c44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091a0:	f000 f974 	bl	800948c <vPortExitCritical>
}
 80091a4:	bf00      	nop
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20001db8 	.word	0x20001db8
 80091b0:	20001d88 	.word	0x20001d88
 80091b4:	20001d9c 	.word	0x20001d9c
 80091b8:	20001db0 	.word	0x20001db0
 80091bc:	20001db4 	.word	0x20001db4
 80091c0:	20001e64 	.word	0x20001e64
 80091c4:	20001dc4 	.word	0x20001dc4
 80091c8:	08009b6c 	.word	0x08009b6c

080091cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3b04      	subs	r3, #4
 80091dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80091e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	3b04      	subs	r3, #4
 80091ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f023 0201 	bic.w	r2, r3, #1
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	3b04      	subs	r3, #4
 80091fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091fc:	4a0c      	ldr	r2, [pc, #48]	@ (8009230 <pxPortInitialiseStack+0x64>)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3b14      	subs	r3, #20
 8009206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3b04      	subs	r3, #4
 8009212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f06f 0202 	mvn.w	r2, #2
 800921a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3b20      	subs	r3, #32
 8009220:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009222:	68fb      	ldr	r3, [r7, #12]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	08009235 	.word	0x08009235

08009234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800923e:	4b13      	ldr	r3, [pc, #76]	@ (800928c <prvTaskExitError+0x58>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009246:	d00b      	beq.n	8009260 <prvTaskExitError+0x2c>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	60fb      	str	r3, [r7, #12]
}
 800925a:	bf00      	nop
 800925c:	bf00      	nop
 800925e:	e7fd      	b.n	800925c <prvTaskExitError+0x28>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	60bb      	str	r3, [r7, #8]
}
 8009272:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009274:	bf00      	nop
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d0fc      	beq.n	8009276 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800927c:	bf00      	nop
 800927e:	bf00      	nop
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	2000000c 	.word	0x2000000c

08009290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009290:	4b07      	ldr	r3, [pc, #28]	@ (80092b0 <pxCurrentTCBConst2>)
 8009292:	6819      	ldr	r1, [r3, #0]
 8009294:	6808      	ldr	r0, [r1, #0]
 8009296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929a:	f380 8809 	msr	PSP, r0
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f04f 0000 	mov.w	r0, #0
 80092a6:	f380 8811 	msr	BASEPRI, r0
 80092aa:	4770      	bx	lr
 80092ac:	f3af 8000 	nop.w

080092b0 <pxCurrentTCBConst2>:
 80092b0:	20001888 	.word	0x20001888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092b4:	bf00      	nop
 80092b6:	bf00      	nop

080092b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80092b8:	4808      	ldr	r0, [pc, #32]	@ (80092dc <prvPortStartFirstTask+0x24>)
 80092ba:	6800      	ldr	r0, [r0, #0]
 80092bc:	6800      	ldr	r0, [r0, #0]
 80092be:	f380 8808 	msr	MSP, r0
 80092c2:	f04f 0000 	mov.w	r0, #0
 80092c6:	f380 8814 	msr	CONTROL, r0
 80092ca:	b662      	cpsie	i
 80092cc:	b661      	cpsie	f
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	df00      	svc	0
 80092d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092da:	bf00      	nop
 80092dc:	e000ed08 	.word	0xe000ed08

080092e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092e6:	4b47      	ldr	r3, [pc, #284]	@ (8009404 <xPortStartScheduler+0x124>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a47      	ldr	r2, [pc, #284]	@ (8009408 <xPortStartScheduler+0x128>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d10b      	bne.n	8009308 <xPortStartScheduler+0x28>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	613b      	str	r3, [r7, #16]
}
 8009302:	bf00      	nop
 8009304:	bf00      	nop
 8009306:	e7fd      	b.n	8009304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009308:	4b3e      	ldr	r3, [pc, #248]	@ (8009404 <xPortStartScheduler+0x124>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a3f      	ldr	r2, [pc, #252]	@ (800940c <xPortStartScheduler+0x12c>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d10b      	bne.n	800932a <xPortStartScheduler+0x4a>
	__asm volatile
 8009312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	60fb      	str	r3, [r7, #12]
}
 8009324:	bf00      	nop
 8009326:	bf00      	nop
 8009328:	e7fd      	b.n	8009326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800932a:	4b39      	ldr	r3, [pc, #228]	@ (8009410 <xPortStartScheduler+0x130>)
 800932c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	22ff      	movs	r2, #255	@ 0xff
 800933a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	b2db      	uxtb	r3, r3
 8009342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800934c:	b2da      	uxtb	r2, r3
 800934e:	4b31      	ldr	r3, [pc, #196]	@ (8009414 <xPortStartScheduler+0x134>)
 8009350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009352:	4b31      	ldr	r3, [pc, #196]	@ (8009418 <xPortStartScheduler+0x138>)
 8009354:	2207      	movs	r2, #7
 8009356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009358:	e009      	b.n	800936e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800935a:	4b2f      	ldr	r3, [pc, #188]	@ (8009418 <xPortStartScheduler+0x138>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3b01      	subs	r3, #1
 8009360:	4a2d      	ldr	r2, [pc, #180]	@ (8009418 <xPortStartScheduler+0x138>)
 8009362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009364:	78fb      	ldrb	r3, [r7, #3]
 8009366:	b2db      	uxtb	r3, r3
 8009368:	005b      	lsls	r3, r3, #1
 800936a:	b2db      	uxtb	r3, r3
 800936c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800936e:	78fb      	ldrb	r3, [r7, #3]
 8009370:	b2db      	uxtb	r3, r3
 8009372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009376:	2b80      	cmp	r3, #128	@ 0x80
 8009378:	d0ef      	beq.n	800935a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800937a:	4b27      	ldr	r3, [pc, #156]	@ (8009418 <xPortStartScheduler+0x138>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f1c3 0307 	rsb	r3, r3, #7
 8009382:	2b04      	cmp	r3, #4
 8009384:	d00b      	beq.n	800939e <xPortStartScheduler+0xbe>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	60bb      	str	r3, [r7, #8]
}
 8009398:	bf00      	nop
 800939a:	bf00      	nop
 800939c:	e7fd      	b.n	800939a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800939e:	4b1e      	ldr	r3, [pc, #120]	@ (8009418 <xPortStartScheduler+0x138>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	021b      	lsls	r3, r3, #8
 80093a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009418 <xPortStartScheduler+0x138>)
 80093a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009418 <xPortStartScheduler+0x138>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80093b0:	4a19      	ldr	r2, [pc, #100]	@ (8009418 <xPortStartScheduler+0x138>)
 80093b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093bc:	4b17      	ldr	r3, [pc, #92]	@ (800941c <xPortStartScheduler+0x13c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a16      	ldr	r2, [pc, #88]	@ (800941c <xPortStartScheduler+0x13c>)
 80093c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80093c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093c8:	4b14      	ldr	r3, [pc, #80]	@ (800941c <xPortStartScheduler+0x13c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a13      	ldr	r2, [pc, #76]	@ (800941c <xPortStartScheduler+0x13c>)
 80093ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80093d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093d4:	f000 f8da 	bl	800958c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093d8:	4b11      	ldr	r3, [pc, #68]	@ (8009420 <xPortStartScheduler+0x140>)
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093de:	f000 f8f9 	bl	80095d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093e2:	4b10      	ldr	r3, [pc, #64]	@ (8009424 <xPortStartScheduler+0x144>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a0f      	ldr	r2, [pc, #60]	@ (8009424 <xPortStartScheduler+0x144>)
 80093e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80093ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093ee:	f7ff ff63 	bl	80092b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093f2:	f7ff f83f 	bl	8008474 <vTaskSwitchContext>
	prvTaskExitError();
 80093f6:	f7ff ff1d 	bl	8009234 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	e000ed00 	.word	0xe000ed00
 8009408:	410fc271 	.word	0x410fc271
 800940c:	410fc270 	.word	0x410fc270
 8009410:	e000e400 	.word	0xe000e400
 8009414:	20001eb4 	.word	0x20001eb4
 8009418:	20001eb8 	.word	0x20001eb8
 800941c:	e000ed20 	.word	0xe000ed20
 8009420:	2000000c 	.word	0x2000000c
 8009424:	e000ef34 	.word	0xe000ef34

08009428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	607b      	str	r3, [r7, #4]
}
 8009440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009442:	4b10      	ldr	r3, [pc, #64]	@ (8009484 <vPortEnterCritical+0x5c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3301      	adds	r3, #1
 8009448:	4a0e      	ldr	r2, [pc, #56]	@ (8009484 <vPortEnterCritical+0x5c>)
 800944a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800944c:	4b0d      	ldr	r3, [pc, #52]	@ (8009484 <vPortEnterCritical+0x5c>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d110      	bne.n	8009476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009454:	4b0c      	ldr	r3, [pc, #48]	@ (8009488 <vPortEnterCritical+0x60>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00b      	beq.n	8009476 <vPortEnterCritical+0x4e>
	__asm volatile
 800945e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009462:	f383 8811 	msr	BASEPRI, r3
 8009466:	f3bf 8f6f 	isb	sy
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	603b      	str	r3, [r7, #0]
}
 8009470:	bf00      	nop
 8009472:	bf00      	nop
 8009474:	e7fd      	b.n	8009472 <vPortEnterCritical+0x4a>
	}
}
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	2000000c 	.word	0x2000000c
 8009488:	e000ed04 	.word	0xe000ed04

0800948c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009492:	4b12      	ldr	r3, [pc, #72]	@ (80094dc <vPortExitCritical+0x50>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10b      	bne.n	80094b2 <vPortExitCritical+0x26>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	607b      	str	r3, [r7, #4]
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	e7fd      	b.n	80094ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80094b2:	4b0a      	ldr	r3, [pc, #40]	@ (80094dc <vPortExitCritical+0x50>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3b01      	subs	r3, #1
 80094b8:	4a08      	ldr	r2, [pc, #32]	@ (80094dc <vPortExitCritical+0x50>)
 80094ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094bc:	4b07      	ldr	r3, [pc, #28]	@ (80094dc <vPortExitCritical+0x50>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d105      	bne.n	80094d0 <vPortExitCritical+0x44>
 80094c4:	2300      	movs	r3, #0
 80094c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	f383 8811 	msr	BASEPRI, r3
}
 80094ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	2000000c 	.word	0x2000000c

080094e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094e0:	f3ef 8009 	mrs	r0, PSP
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	4b15      	ldr	r3, [pc, #84]	@ (8009540 <pxCurrentTCBConst>)
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	f01e 0f10 	tst.w	lr, #16
 80094f0:	bf08      	it	eq
 80094f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fa:	6010      	str	r0, [r2, #0]
 80094fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009504:	f380 8811 	msr	BASEPRI, r0
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f7fe ffb0 	bl	8008474 <vTaskSwitchContext>
 8009514:	f04f 0000 	mov.w	r0, #0
 8009518:	f380 8811 	msr	BASEPRI, r0
 800951c:	bc09      	pop	{r0, r3}
 800951e:	6819      	ldr	r1, [r3, #0]
 8009520:	6808      	ldr	r0, [r1, #0]
 8009522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009526:	f01e 0f10 	tst.w	lr, #16
 800952a:	bf08      	it	eq
 800952c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009530:	f380 8809 	msr	PSP, r0
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	f3af 8000 	nop.w

08009540 <pxCurrentTCBConst>:
 8009540:	20001888 	.word	0x20001888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop

08009548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	607b      	str	r3, [r7, #4]
}
 8009560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009562:	f7fe fecd 	bl	8008300 <xTaskIncrementTick>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800956c:	4b06      	ldr	r3, [pc, #24]	@ (8009588 <xPortSysTickHandler+0x40>)
 800956e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	2300      	movs	r3, #0
 8009576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	f383 8811 	msr	BASEPRI, r3
}
 800957e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	e000ed04 	.word	0xe000ed04

0800958c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800958c:	b480      	push	{r7}
 800958e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009590:	4b0b      	ldr	r3, [pc, #44]	@ (80095c0 <vPortSetupTimerInterrupt+0x34>)
 8009592:	2200      	movs	r2, #0
 8009594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009596:	4b0b      	ldr	r3, [pc, #44]	@ (80095c4 <vPortSetupTimerInterrupt+0x38>)
 8009598:	2200      	movs	r2, #0
 800959a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800959c:	4b0a      	ldr	r3, [pc, #40]	@ (80095c8 <vPortSetupTimerInterrupt+0x3c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a0a      	ldr	r2, [pc, #40]	@ (80095cc <vPortSetupTimerInterrupt+0x40>)
 80095a2:	fba2 2303 	umull	r2, r3, r2, r3
 80095a6:	099b      	lsrs	r3, r3, #6
 80095a8:	4a09      	ldr	r2, [pc, #36]	@ (80095d0 <vPortSetupTimerInterrupt+0x44>)
 80095aa:	3b01      	subs	r3, #1
 80095ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095ae:	4b04      	ldr	r3, [pc, #16]	@ (80095c0 <vPortSetupTimerInterrupt+0x34>)
 80095b0:	2207      	movs	r2, #7
 80095b2:	601a      	str	r2, [r3, #0]
}
 80095b4:	bf00      	nop
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	e000e010 	.word	0xe000e010
 80095c4:	e000e018 	.word	0xe000e018
 80095c8:	20000000 	.word	0x20000000
 80095cc:	10624dd3 	.word	0x10624dd3
 80095d0:	e000e014 	.word	0xe000e014

080095d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80095e4 <vPortEnableVFP+0x10>
 80095d8:	6801      	ldr	r1, [r0, #0]
 80095da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80095de:	6001      	str	r1, [r0, #0]
 80095e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095e2:	bf00      	nop
 80095e4:	e000ed88 	.word	0xe000ed88

080095e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80095ee:	f3ef 8305 	mrs	r3, IPSR
 80095f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b0f      	cmp	r3, #15
 80095f8:	d915      	bls.n	8009626 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095fa:	4a18      	ldr	r2, [pc, #96]	@ (800965c <vPortValidateInterruptPriority+0x74>)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	4413      	add	r3, r2
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009604:	4b16      	ldr	r3, [pc, #88]	@ (8009660 <vPortValidateInterruptPriority+0x78>)
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	7afa      	ldrb	r2, [r7, #11]
 800960a:	429a      	cmp	r2, r3
 800960c:	d20b      	bcs.n	8009626 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	607b      	str	r3, [r7, #4]
}
 8009620:	bf00      	nop
 8009622:	bf00      	nop
 8009624:	e7fd      	b.n	8009622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009626:	4b0f      	ldr	r3, [pc, #60]	@ (8009664 <vPortValidateInterruptPriority+0x7c>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800962e:	4b0e      	ldr	r3, [pc, #56]	@ (8009668 <vPortValidateInterruptPriority+0x80>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	429a      	cmp	r2, r3
 8009634:	d90b      	bls.n	800964e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	603b      	str	r3, [r7, #0]
}
 8009648:	bf00      	nop
 800964a:	bf00      	nop
 800964c:	e7fd      	b.n	800964a <vPortValidateInterruptPriority+0x62>
	}
 800964e:	bf00      	nop
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	e000e3f0 	.word	0xe000e3f0
 8009660:	20001eb4 	.word	0x20001eb4
 8009664:	e000ed0c 	.word	0xe000ed0c
 8009668:	20001eb8 	.word	0x20001eb8

0800966c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b08a      	sub	sp, #40	@ 0x28
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009674:	2300      	movs	r3, #0
 8009676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009678:	f7fe fd86 	bl	8008188 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800967c:	4b5c      	ldr	r3, [pc, #368]	@ (80097f0 <pvPortMalloc+0x184>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009684:	f000 f924 	bl	80098d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009688:	4b5a      	ldr	r3, [pc, #360]	@ (80097f4 <pvPortMalloc+0x188>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4013      	ands	r3, r2
 8009690:	2b00      	cmp	r3, #0
 8009692:	f040 8095 	bne.w	80097c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01e      	beq.n	80096da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800969c:	2208      	movs	r2, #8
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4413      	add	r3, r2
 80096a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f003 0307 	and.w	r3, r3, #7
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d015      	beq.n	80096da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f023 0307 	bic.w	r3, r3, #7
 80096b4:	3308      	adds	r3, #8
 80096b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f003 0307 	and.w	r3, r3, #7
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00b      	beq.n	80096da <pvPortMalloc+0x6e>
	__asm volatile
 80096c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c6:	f383 8811 	msr	BASEPRI, r3
 80096ca:	f3bf 8f6f 	isb	sy
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	617b      	str	r3, [r7, #20]
}
 80096d4:	bf00      	nop
 80096d6:	bf00      	nop
 80096d8:	e7fd      	b.n	80096d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d06f      	beq.n	80097c0 <pvPortMalloc+0x154>
 80096e0:	4b45      	ldr	r3, [pc, #276]	@ (80097f8 <pvPortMalloc+0x18c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d86a      	bhi.n	80097c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096ea:	4b44      	ldr	r3, [pc, #272]	@ (80097fc <pvPortMalloc+0x190>)
 80096ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096ee:	4b43      	ldr	r3, [pc, #268]	@ (80097fc <pvPortMalloc+0x190>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096f4:	e004      	b.n	8009700 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80096f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	429a      	cmp	r2, r3
 8009708:	d903      	bls.n	8009712 <pvPortMalloc+0xa6>
 800970a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1f1      	bne.n	80096f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009712:	4b37      	ldr	r3, [pc, #220]	@ (80097f0 <pvPortMalloc+0x184>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009718:	429a      	cmp	r2, r3
 800971a:	d051      	beq.n	80097c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800971c:	6a3b      	ldr	r3, [r7, #32]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2208      	movs	r2, #8
 8009722:	4413      	add	r3, r2
 8009724:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800972e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	1ad2      	subs	r2, r2, r3
 8009736:	2308      	movs	r3, #8
 8009738:	005b      	lsls	r3, r3, #1
 800973a:	429a      	cmp	r2, r3
 800973c:	d920      	bls.n	8009780 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800973e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4413      	add	r3, r2
 8009744:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	f003 0307 	and.w	r3, r3, #7
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00b      	beq.n	8009768 <pvPortMalloc+0xfc>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	613b      	str	r3, [r7, #16]
}
 8009762:	bf00      	nop
 8009764:	bf00      	nop
 8009766:	e7fd      	b.n	8009764 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	1ad2      	subs	r2, r2, r3
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800977a:	69b8      	ldr	r0, [r7, #24]
 800977c:	f000 f90a 	bl	8009994 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009780:	4b1d      	ldr	r3, [pc, #116]	@ (80097f8 <pvPortMalloc+0x18c>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	4a1b      	ldr	r2, [pc, #108]	@ (80097f8 <pvPortMalloc+0x18c>)
 800978c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800978e:	4b1a      	ldr	r3, [pc, #104]	@ (80097f8 <pvPortMalloc+0x18c>)
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	4b1b      	ldr	r3, [pc, #108]	@ (8009800 <pvPortMalloc+0x194>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d203      	bcs.n	80097a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800979a:	4b17      	ldr	r3, [pc, #92]	@ (80097f8 <pvPortMalloc+0x18c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a18      	ldr	r2, [pc, #96]	@ (8009800 <pvPortMalloc+0x194>)
 80097a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	4b13      	ldr	r3, [pc, #76]	@ (80097f4 <pvPortMalloc+0x188>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	431a      	orrs	r2, r3
 80097ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b2:	2200      	movs	r2, #0
 80097b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80097b6:	4b13      	ldr	r3, [pc, #76]	@ (8009804 <pvPortMalloc+0x198>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3301      	adds	r3, #1
 80097bc:	4a11      	ldr	r2, [pc, #68]	@ (8009804 <pvPortMalloc+0x198>)
 80097be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097c0:	f7fe fcf0 	bl	80081a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <pvPortMalloc+0x17a>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	60fb      	str	r3, [r7, #12]
}
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
 80097e4:	e7fd      	b.n	80097e2 <pvPortMalloc+0x176>
	return pvReturn;
 80097e6:	69fb      	ldr	r3, [r7, #28]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3728      	adds	r7, #40	@ 0x28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	20002a7c 	.word	0x20002a7c
 80097f4:	20002a90 	.word	0x20002a90
 80097f8:	20002a80 	.word	0x20002a80
 80097fc:	20002a74 	.word	0x20002a74
 8009800:	20002a84 	.word	0x20002a84
 8009804:	20002a88 	.word	0x20002a88

08009808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d04f      	beq.n	80098ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800981a:	2308      	movs	r3, #8
 800981c:	425b      	negs	r3, r3
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	4413      	add	r3, r2
 8009822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	4b25      	ldr	r3, [pc, #148]	@ (80098c4 <vPortFree+0xbc>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4013      	ands	r3, r2
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10b      	bne.n	800984e <vPortFree+0x46>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	60fb      	str	r3, [r7, #12]
}
 8009848:	bf00      	nop
 800984a:	bf00      	nop
 800984c:	e7fd      	b.n	800984a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00b      	beq.n	800986e <vPortFree+0x66>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	60bb      	str	r3, [r7, #8]
}
 8009868:	bf00      	nop
 800986a:	bf00      	nop
 800986c:	e7fd      	b.n	800986a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	685a      	ldr	r2, [r3, #4]
 8009872:	4b14      	ldr	r3, [pc, #80]	@ (80098c4 <vPortFree+0xbc>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4013      	ands	r3, r2
 8009878:	2b00      	cmp	r3, #0
 800987a:	d01e      	beq.n	80098ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d11a      	bne.n	80098ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	4b0e      	ldr	r3, [pc, #56]	@ (80098c4 <vPortFree+0xbc>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	43db      	mvns	r3, r3
 800988e:	401a      	ands	r2, r3
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009894:	f7fe fc78 	bl	8008188 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	4b0a      	ldr	r3, [pc, #40]	@ (80098c8 <vPortFree+0xc0>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4413      	add	r3, r2
 80098a2:	4a09      	ldr	r2, [pc, #36]	@ (80098c8 <vPortFree+0xc0>)
 80098a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098a6:	6938      	ldr	r0, [r7, #16]
 80098a8:	f000 f874 	bl	8009994 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80098ac:	4b07      	ldr	r3, [pc, #28]	@ (80098cc <vPortFree+0xc4>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3301      	adds	r3, #1
 80098b2:	4a06      	ldr	r2, [pc, #24]	@ (80098cc <vPortFree+0xc4>)
 80098b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80098b6:	f7fe fc75 	bl	80081a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098ba:	bf00      	nop
 80098bc:	3718      	adds	r7, #24
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20002a90 	.word	0x20002a90
 80098c8:	20002a80 	.word	0x20002a80
 80098cc:	20002a8c 	.word	0x20002a8c

080098d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098d6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80098da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098dc:	4b27      	ldr	r3, [pc, #156]	@ (800997c <prvHeapInit+0xac>)
 80098de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00c      	beq.n	8009904 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3307      	adds	r3, #7
 80098ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f023 0307 	bic.w	r3, r3, #7
 80098f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	4a1f      	ldr	r2, [pc, #124]	@ (800997c <prvHeapInit+0xac>)
 8009900:	4413      	add	r3, r2
 8009902:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009908:	4a1d      	ldr	r2, [pc, #116]	@ (8009980 <prvHeapInit+0xb0>)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800990e:	4b1c      	ldr	r3, [pc, #112]	@ (8009980 <prvHeapInit+0xb0>)
 8009910:	2200      	movs	r2, #0
 8009912:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	4413      	add	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800991c:	2208      	movs	r2, #8
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	1a9b      	subs	r3, r3, r2
 8009922:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 0307 	bic.w	r3, r3, #7
 800992a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4a15      	ldr	r2, [pc, #84]	@ (8009984 <prvHeapInit+0xb4>)
 8009930:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009932:	4b14      	ldr	r3, [pc, #80]	@ (8009984 <prvHeapInit+0xb4>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2200      	movs	r2, #0
 8009938:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800993a:	4b12      	ldr	r3, [pc, #72]	@ (8009984 <prvHeapInit+0xb4>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2200      	movs	r2, #0
 8009940:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	1ad2      	subs	r2, r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009950:	4b0c      	ldr	r3, [pc, #48]	@ (8009984 <prvHeapInit+0xb4>)
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	4a0a      	ldr	r2, [pc, #40]	@ (8009988 <prvHeapInit+0xb8>)
 800995e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	4a09      	ldr	r2, [pc, #36]	@ (800998c <prvHeapInit+0xbc>)
 8009966:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009968:	4b09      	ldr	r3, [pc, #36]	@ (8009990 <prvHeapInit+0xc0>)
 800996a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800996e:	601a      	str	r2, [r3, #0]
}
 8009970:	bf00      	nop
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	20001ebc 	.word	0x20001ebc
 8009980:	20002a74 	.word	0x20002a74
 8009984:	20002a7c 	.word	0x20002a7c
 8009988:	20002a84 	.word	0x20002a84
 800998c:	20002a80 	.word	0x20002a80
 8009990:	20002a90 	.word	0x20002a90

08009994 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800999c:	4b28      	ldr	r3, [pc, #160]	@ (8009a40 <prvInsertBlockIntoFreeList+0xac>)
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	e002      	b.n	80099a8 <prvInsertBlockIntoFreeList+0x14>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d8f7      	bhi.n	80099a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	4413      	add	r3, r2
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d108      	bne.n	80099d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	441a      	add	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	441a      	add	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d118      	bne.n	8009a1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	4b15      	ldr	r3, [pc, #84]	@ (8009a44 <prvInsertBlockIntoFreeList+0xb0>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d00d      	beq.n	8009a12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	441a      	add	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	601a      	str	r2, [r3, #0]
 8009a10:	e008      	b.n	8009a24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a12:	4b0c      	ldr	r3, [pc, #48]	@ (8009a44 <prvInsertBlockIntoFreeList+0xb0>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	601a      	str	r2, [r3, #0]
 8009a1a:	e003      	b.n	8009a24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d002      	beq.n	8009a32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a32:	bf00      	nop
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	20002a74 	.word	0x20002a74
 8009a44:	20002a7c 	.word	0x20002a7c

08009a48 <memset>:
 8009a48:	4402      	add	r2, r0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d100      	bne.n	8009a52 <memset+0xa>
 8009a50:	4770      	bx	lr
 8009a52:	f803 1b01 	strb.w	r1, [r3], #1
 8009a56:	e7f9      	b.n	8009a4c <memset+0x4>

08009a58 <__libc_init_array>:
 8009a58:	b570      	push	{r4, r5, r6, lr}
 8009a5a:	4d0d      	ldr	r5, [pc, #52]	@ (8009a90 <__libc_init_array+0x38>)
 8009a5c:	4c0d      	ldr	r4, [pc, #52]	@ (8009a94 <__libc_init_array+0x3c>)
 8009a5e:	1b64      	subs	r4, r4, r5
 8009a60:	10a4      	asrs	r4, r4, #2
 8009a62:	2600      	movs	r6, #0
 8009a64:	42a6      	cmp	r6, r4
 8009a66:	d109      	bne.n	8009a7c <__libc_init_array+0x24>
 8009a68:	4d0b      	ldr	r5, [pc, #44]	@ (8009a98 <__libc_init_array+0x40>)
 8009a6a:	4c0c      	ldr	r4, [pc, #48]	@ (8009a9c <__libc_init_array+0x44>)
 8009a6c:	f000 f826 	bl	8009abc <_init>
 8009a70:	1b64      	subs	r4, r4, r5
 8009a72:	10a4      	asrs	r4, r4, #2
 8009a74:	2600      	movs	r6, #0
 8009a76:	42a6      	cmp	r6, r4
 8009a78:	d105      	bne.n	8009a86 <__libc_init_array+0x2e>
 8009a7a:	bd70      	pop	{r4, r5, r6, pc}
 8009a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a80:	4798      	blx	r3
 8009a82:	3601      	adds	r6, #1
 8009a84:	e7ee      	b.n	8009a64 <__libc_init_array+0xc>
 8009a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a8a:	4798      	blx	r3
 8009a8c:	3601      	adds	r6, #1
 8009a8e:	e7f2      	b.n	8009a76 <__libc_init_array+0x1e>
 8009a90:	0801f2f4 	.word	0x0801f2f4
 8009a94:	0801f2f4 	.word	0x0801f2f4
 8009a98:	0801f2f4 	.word	0x0801f2f4
 8009a9c:	0801f2f8 	.word	0x0801f2f8

08009aa0 <memcpy>:
 8009aa0:	440a      	add	r2, r1
 8009aa2:	4291      	cmp	r1, r2
 8009aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009aa8:	d100      	bne.n	8009aac <memcpy+0xc>
 8009aaa:	4770      	bx	lr
 8009aac:	b510      	push	{r4, lr}
 8009aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ab6:	4291      	cmp	r1, r2
 8009ab8:	d1f9      	bne.n	8009aae <memcpy+0xe>
 8009aba:	bd10      	pop	{r4, pc}

08009abc <_init>:
 8009abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009abe:	bf00      	nop
 8009ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ac2:	bc08      	pop	{r3}
 8009ac4:	469e      	mov	lr, r3
 8009ac6:	4770      	bx	lr

08009ac8 <_fini>:
 8009ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aca:	bf00      	nop
 8009acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ace:	bc08      	pop	{r3}
 8009ad0:	469e      	mov	lr, r3
 8009ad2:	4770      	bx	lr
